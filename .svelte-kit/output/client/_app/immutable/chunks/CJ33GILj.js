import{b as l}from"./CisIfe-u.js";import{a as A}from"./CgEzuEYe.js";const P=async(e="",s=null,o=!1)=>{let t=null;const n=await fetch(`${l}/api/models${o?"/base":""}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...e&&{authorization:`Bearer ${e}`}}}).then(async i=>{if(!i.ok)throw await i.json();return i.json()}).catch(i=>(t=i,console.log(i),null));if(t)throw t;let a=(n==null?void 0:n.data)??[];if(s&&!o){let i=[];if(s){const r=s.OPENAI_API_BASE_URLS,u=s.OPENAI_API_KEYS,w=s.OPENAI_API_CONFIGS,p=[];for(const h in r){const d=r[h];if(h.toString()in w){const y=w[h.toString()]??{},g=(y==null?void 0:y.enable)??!0,m=(y==null?void 0:y.model_ids)??[];if(g)if(m.length>0){const f={object:"list",data:m.map($=>({id:$,name:$,owned_by:"openai",openai:{id:$},urlIdx:h}))};p.push((async()=>f)())}else p.push((async()=>await A(d,u[h]).then(f=>f).catch(f=>({object:"list",data:[],urlIdx:h})))());else p.push((async()=>({object:"list",data:[],urlIdx:h}))())}}const j=await Promise.all(p);for(const h in j){const d=j[h],y=w[h.toString()]??{};let g=Array.isArray(d)?d:(d==null?void 0:d.data)??[];g=g.map(f=>({...f,openai:{id:f.id},urlIdx:h}));const m=y.prefix_id;if(m)for(const f of g)f.id=`${m}.${f.id}`;i=i.concat(g)}}a=a.concat(i.map(r=>({...r,name:(r==null?void 0:r.name)??(r==null?void 0:r.id),direct:!0})));const c={};for(const r of a)c[r.id]=r;a=Object.values(c)}return a},O=async(e,s,o)=>{let t=null;const n=await fetch(`${l}/api/chat/actions/${s}`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...e&&{authorization:`Bearer ${e}`}},body:JSON.stringify(o)}).then(async a=>{if(!a.ok)throw await a.json();return a.json()}).catch(a=>(console.log(a),"detail"in a?t=a.detail:t=a,null));if(t)throw t;return n},v=async(e,s)=>{let o=null;const t=await fetch(`${l}/api/tasks/stop/${s}`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...e&&{authorization:`Bearer ${e}`}}}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),"detail"in n?o=n.detail:o=n,null));if(o)throw o;return t},E=async(e="")=>{let s=null;const o=await fetch(`${l}/api/v1/tasks/config`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...e&&{authorization:`Bearer ${e}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),s=t,null));if(s)throw s;return o},b=async(e,s)=>{let o=null;const t=await fetch(`${l}/api/v1/tasks/config/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...e&&{authorization:`Bearer ${e}`}},body:JSON.stringify(s)}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),"detail"in n?o=n.detail:o=n,null));if(o)throw o;return t},C=async(e="",s,o,t)=>{var i,c;let n=null;const a=await fetch(`${l}/api/v1/tasks/tags/completions`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({model:s,messages:o,...t&&{chat_id:t}})}).then(async r=>{if(!r.ok)throw await r.json();return r.json()}).catch(r=>(console.log(r),"detail"in r&&(n=r.detail),null));if(n)throw n;try{const u=(((c=(i=a==null?void 0:a.choices[0])==null?void 0:i.message)==null?void 0:c.content)??"").replace(/['‘’`]/g,'"'),w=u.indexOf("{"),p=u.lastIndexOf("}");if(w!==-1&&p!==-1){const j=u.substring(w,p+1),h=JSON.parse(j);return h&&h.tags?Array.isArray(h.tags)?h.tags:[]:[]}return[]}catch(r){return console.error("Failed to parse response: ",r),[]}},I=async(e="",s,o,t)=>{var c,r;let n=null;const a=await fetch(`${l}/api/v1/tasks/emoji/completions`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({model:s,prompt:o,...t&&{chat_id:t}})}).then(async u=>{if(!u.ok)throw await u.json();return u.json()}).catch(u=>(console.log(u),"detail"in u&&(n=u.detail),null));if(n)throw n;const i=((r=(c=a==null?void 0:a.choices[0])==null?void 0:c.message)==null?void 0:r.content.replace(/["']/g,""))??null;return i&&new RegExp("\\p{Extended_Pictographic}","u").test(i)?i.match(new RegExp("\\p{Extended_Pictographic}","gu"))[0]:null},B=async(e="",s,o,t,n="search query")=>{var u,w;const a=new AbortController;let i=null;const c=await fetch(`${l}/api/v1/tasks/auto/completions`,{signal:a.signal,method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({model:s,prompt:o,...t&&{messages:t},type:n,stream:!1})}).then(async p=>{if(!p.ok)throw await p.json();return p.json()}).catch(p=>(console.log(p),"detail"in p&&(i=p.detail),null));if(i)throw i;const r=((w=(u=c==null?void 0:c.choices[0])==null?void 0:u.message)==null?void 0:w.content)??"";try{const p=r.indexOf("{"),j=r.lastIndexOf("}");if(p!==-1&&j!==-1){const h=r.substring(p,j+1),d=JSON.parse(h);return d&&d.text?d.text:""}return r}catch(p){return console.error("Failed to parse response: ",p),r}},k=async(e="",s,o,t)=>{const n=new AbortController;let a=null;const i=await fetch(`${l}/api/v1/tasks/moa/completions`,{signal:n.signal,method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({model:s,prompt:o,responses:t,stream:!0})}).catch(c=>(console.log(c),a=c,null));if(a)throw a;return[i,n]},x=async(e="")=>{let s=null;const o=await fetch(`${l}/api/v1/pipelines/list`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...e&&{authorization:`Bearer ${e}`}}}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),s=n,null));if(s)throw s;return(o==null?void 0:o.data)??[]},z=async(e,s,o)=>{let t=null;const n=new FormData;n.append("file",s),n.append("urlIdx",o);const a=await fetch(`${l}/api/v1/pipelines/upload`,{method:"POST",headers:{...e&&{authorization:`Bearer ${e}`}},body:n}).then(async i=>{if(!i.ok)throw await i.json();return i.json()}).catch(i=>(console.log(i),"detail"in i?t=i.detail:t=i,null));if(t)throw t;return a},N=async(e,s,o)=>{let t=null;const n=await fetch(`${l}/api/v1/pipelines/add`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...e&&{authorization:`Bearer ${e}`}},body:JSON.stringify({url:s,urlIdx:o})}).then(async a=>{if(!a.ok)throw await a.json();return a.json()}).catch(a=>(console.log(a),"detail"in a?t=a.detail:t=a,null));if(t)throw t;return n},_=async(e,s,o)=>{let t=null;const n=await fetch(`${l}/api/v1/pipelines/delete`,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json",...e&&{authorization:`Bearer ${e}`}},body:JSON.stringify({id:s,urlIdx:o})}).then(async a=>{if(!a.ok)throw await a.json();return a.json()}).catch(a=>(console.log(a),"detail"in a?t=a.detail:t=a,null));if(t)throw t;return n},J=async(e,s)=>{let o=null;const t=new URLSearchParams;s!==void 0&&t.append("urlIdx",s);const n=await fetch(`${l}/api/v1/pipelines/?${t.toString()}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...e&&{authorization:`Bearer ${e}`}}}).then(async i=>{if(!i.ok)throw await i.json();return i.json()}).catch(i=>(console.log(i),o=i,null));if(o)throw o;return(n==null?void 0:n.data)??[]},G=async(e,s,o)=>{let t=null;const n=new URLSearchParams;o!==void 0&&n.append("urlIdx",o);const a=await fetch(`${l}/api/v1/pipelines/${s}/valves?${n.toString()}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...e&&{authorization:`Bearer ${e}`}}}).then(async i=>{if(!i.ok)throw await i.json();return i.json()}).catch(i=>(console.log(i),t=i,null));if(t)throw t;return a},U=async(e,s,o)=>{let t=null;const n=new URLSearchParams;o!==void 0&&n.append("urlIdx",o);const a=await fetch(`${l}/api/v1/pipelines/${s}/valves/spec?${n.toString()}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...e&&{authorization:`Bearer ${e}`}}}).then(async i=>{if(!i.ok)throw await i.json();return i.json()}).catch(i=>(console.log(i),t=i,null));if(t)throw t;return a},L=async(e="",s,o,t)=>{let n=null;const a=new URLSearchParams;t!==void 0&&a.append("urlIdx",t);const i=await fetch(`${l}/api/v1/pipelines/${s}/valves/update?${a.toString()}`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...e&&{authorization:`Bearer ${e}`}},body:JSON.stringify(o)}).then(async c=>{if(!c.ok)throw await c.json();return c.json()}).catch(c=>(console.log(c),"detail"in c?n=c.detail:n=c,null));if(n)throw n;return i},R=async()=>{let e=null;const s=await fetch(`${l}/api/config`,{method:"GET",credentials:"omit",headers:{"Content-Type":"application/json"}}).then(async o=>{if(!o.ok)throw await o.json();return o.json()}).catch(o=>(console.log(o),e=o,null));if(e)throw e;return s},F=async e=>{let s=null;const o=await fetch(`${l}/api/version/updates`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),s=t,null));if(s)throw s;return o},M=async e=>{let s=null;const o=await fetch(`${l}/api/webhook`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),s=t,null));if(s)throw s;return o.url},D=async(e,s)=>{let o=null;const t=await fetch(`${l}/api/webhook`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({url:s})}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),o=n,null));if(o)throw o;return t.url};export{R as a,M as b,F as c,x as d,L as e,U as f,P as g,G as h,J as i,N as j,_ as k,z as l,E as m,b as n,C as o,B as p,I as q,O as r,v as s,k as t,D as u};
//# sourceMappingURL=CJ33GILj.js.map
