{"version":3,"file":"DJyIR_-r.js","sources":["../../../../../../src/lib/apis/index.ts"],"sourcesContent":["import { WEBUI_API_BASE_URL, WEBUI_BASE_URL } from '$lib/constants';\nimport { getOpenAIModelsDirect } from './openai';\n\nexport const getModels = async (\n\ttoken: string = '',\n\tconnections: object | null = null,\n\tbase: boolean = false\n) => {\n\tlet error = null;\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/models${base ? '/base' : ''}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tlet models = res?.data ?? [];\n\n\tif (connections && !base) {\n\t\tlet localModels = [];\n\n\t\tif (connections) {\n\t\t\tconst OPENAI_API_BASE_URLS = connections.OPENAI_API_BASE_URLS;\n\t\t\tconst OPENAI_API_KEYS = connections.OPENAI_API_KEYS;\n\t\t\tconst OPENAI_API_CONFIGS = connections.OPENAI_API_CONFIGS;\n\n\t\t\tconst requests = [];\n\t\t\tfor (const idx in OPENAI_API_BASE_URLS) {\n\t\t\t\tconst url = OPENAI_API_BASE_URLS[idx];\n\n\t\t\t\tif (idx.toString() in OPENAI_API_CONFIGS) {\n\t\t\t\t\tconst apiConfig = OPENAI_API_CONFIGS[idx.toString()] ?? {};\n\n\t\t\t\t\tconst enable = apiConfig?.enable ?? true;\n\t\t\t\t\tconst modelIds = apiConfig?.model_ids ?? [];\n\n\t\t\t\t\tif (enable) {\n\t\t\t\t\t\tif (modelIds.length > 0) {\n\t\t\t\t\t\t\tconst modelList = {\n\t\t\t\t\t\t\t\tobject: 'list',\n\t\t\t\t\t\t\t\tdata: modelIds.map((modelId) => ({\n\t\t\t\t\t\t\t\t\tid: modelId,\n\t\t\t\t\t\t\t\t\tname: modelId,\n\t\t\t\t\t\t\t\t\towned_by: 'openai',\n\t\t\t\t\t\t\t\t\topenai: { id: modelId },\n\t\t\t\t\t\t\t\t\turlIdx: idx\n\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\trequests.push(\n\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\treturn modelList;\n\t\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trequests.push(\n\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\treturn await getOpenAIModelsDirect(url, OPENAI_API_KEYS[idx])\n\t\t\t\t\t\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\t\t\t\t\t\treturn res;\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\tobject: 'list',\n\t\t\t\t\t\t\t\t\t\t\t\tdata: [],\n\t\t\t\t\t\t\t\t\t\t\t\turlIdx: idx\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequests.push(\n\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tobject: 'list',\n\t\t\t\t\t\t\t\t\tdata: [],\n\t\t\t\t\t\t\t\t\turlIdx: idx\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst responses = await Promise.all(requests);\n\n\t\t\tfor (const idx in responses) {\n\t\t\t\tconst response = responses[idx];\n\t\t\t\tconst apiConfig = OPENAI_API_CONFIGS[idx.toString()] ?? {};\n\n\t\t\t\tlet models = Array.isArray(response) ? response : (response?.data ?? []);\n\t\t\t\tmodels = models.map((model) => ({ ...model, openai: { id: model.id }, urlIdx: idx }));\n\n\t\t\t\tconst prefixId = apiConfig.prefix_id;\n\t\t\t\tif (prefixId) {\n\t\t\t\t\tfor (const model of models) {\n\t\t\t\t\t\tmodel.id = `${prefixId}.${model.id}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlocalModels = localModels.concat(models);\n\t\t\t}\n\t\t}\n\n\t\tmodels = models.concat(\n\t\t\tlocalModels.map((model) => ({\n\t\t\t\t...model,\n\t\t\t\tname: model?.name ?? model?.id,\n\t\t\t\tdirect: true\n\t\t\t}))\n\t\t);\n\n\t\t// Remove duplicates\n\t\tconst modelsMap = {};\n\t\tfor (const model of models) {\n\t\t\tmodelsMap[model.id] = model;\n\t\t}\n\n\t\tmodels = Object.values(modelsMap);\n\t}\n\n\treturn models;\n};\n\ntype ChatCompletedForm = {\n\tmodel: string;\n\tmessages: string[];\n\tchat_id: string;\n\tsession_id: string;\n};\n\nexport const chatCompleted = async (token: string, body: ChatCompletedForm) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/chat/completed`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify(body)\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\ntype ChatActionForm = {\n\tmodel: string;\n\tmessages: string[];\n\tchat_id: string;\n};\n\nexport const chatAction = async (token: string, action_id: string, body: ChatActionForm) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/chat/actions/${action_id}`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify(body)\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const stopTask = async (token: string, id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/tasks/stop/${id}`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getTaskConfig = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/config`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const updateTaskConfig = async (token: string, config: object) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/config/update`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify(config)\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const generateTitle = async (\n\ttoken: string = '',\n\tmodel: string,\n\tmessages: string[],\n\tchat_id?: string\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/title/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tmessages: messages,\n\t\t\t...(chat_id && { chat_id: chat_id })\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res?.choices[0]?.message?.content.replace(/[\"']/g, '') ?? 'New Chat';\n};\n\nexport const generateTags = async (\n\ttoken: string = '',\n\tmodel: string,\n\tmessages: string,\n\tchat_id?: string\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/tags/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tmessages: messages,\n\t\t\t...(chat_id && { chat_id: chat_id })\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\ttry {\n\t\t// Step 1: Safely extract the response string\n\t\tconst response = res?.choices[0]?.message?.content ?? '';\n\n\t\t// Step 2: Attempt to fix common JSON format issues like single quotes\n\t\tconst sanitizedResponse = response.replace(/['‘’`]/g, '\"'); // Convert single quotes to double quotes for valid JSON\n\n\t\t// Step 3: Find the relevant JSON block within the response\n\t\tconst jsonStartIndex = sanitizedResponse.indexOf('{');\n\t\tconst jsonEndIndex = sanitizedResponse.lastIndexOf('}');\n\n\t\t// Step 4: Check if we found a valid JSON block (with both `{` and `}`)\n\t\tif (jsonStartIndex !== -1 && jsonEndIndex !== -1) {\n\t\t\tconst jsonResponse = sanitizedResponse.substring(jsonStartIndex, jsonEndIndex + 1);\n\n\t\t\t// Step 5: Parse the JSON block\n\t\t\tconst parsed = JSON.parse(jsonResponse);\n\n\t\t\t// Step 6: If there's a \"tags\" key, return the tags array; otherwise, return an empty array\n\t\t\tif (parsed && parsed.tags) {\n\t\t\t\treturn Array.isArray(parsed.tags) ? parsed.tags : [];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\t// If no valid JSON block found, return an empty array\n\t\treturn [];\n\t} catch (e) {\n\t\t// Catch and safely return empty array on any parsing errors\n\t\tconsole.error('Failed to parse response: ', e);\n\t\treturn [];\n\t}\n};\n\nexport const generateEmoji = async (\n\ttoken: string = '',\n\tmodel: string,\n\tprompt: string,\n\tchat_id?: string\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/emoji/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tprompt: prompt,\n\t\t\t...(chat_id && { chat_id: chat_id })\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tconst response = res?.choices[0]?.message?.content.replace(/[\"']/g, '') ?? null;\n\n\tif (response) {\n\t\tif (/\\p{Extended_Pictographic}/u.test(response)) {\n\t\t\treturn response.match(/\\p{Extended_Pictographic}/gu)[0];\n\t\t}\n\t}\n\n\treturn null;\n};\n\nexport const generateQueries = async (\n\ttoken: string = '',\n\tmodel: string,\n\tmessages: object[],\n\tprompt: string,\n\ttype?: string = 'web_search'\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/queries/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tmessages: messages,\n\t\t\tprompt: prompt,\n\t\t\ttype: type\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\t// Step 1: Safely extract the response string\n\tconst response = res?.choices[0]?.message?.content ?? '';\n\n\ttry {\n\t\tconst jsonStartIndex = response.indexOf('{');\n\t\tconst jsonEndIndex = response.lastIndexOf('}');\n\n\t\tif (jsonStartIndex !== -1 && jsonEndIndex !== -1) {\n\t\t\tconst jsonResponse = response.substring(jsonStartIndex, jsonEndIndex + 1);\n\n\t\t\t// Step 5: Parse the JSON block\n\t\t\tconst parsed = JSON.parse(jsonResponse);\n\n\t\t\t// Step 6: If there's a \"queries\" key, return the queries array; otherwise, return an empty array\n\t\t\tif (parsed && parsed.queries) {\n\t\t\t\treturn Array.isArray(parsed.queries) ? parsed.queries : [];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\t// If no valid JSON block found, return response as is\n\t\treturn [response];\n\t} catch (e) {\n\t\t// Catch and safely return empty array on any parsing errors\n\t\tconsole.error('Failed to parse response: ', e);\n\t\treturn [response];\n\t}\n};\n\nexport const generateAutoCompletion = async (\n\ttoken: string = '',\n\tmodel: string,\n\tprompt: string,\n\tmessages?: object[],\n\ttype: string = 'search query'\n) => {\n\tconst controller = new AbortController();\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/auto/completions`, {\n\t\tsignal: controller.signal,\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tprompt: prompt,\n\t\t\t...(messages && { messages: messages }),\n\t\t\ttype: type,\n\t\t\tstream: false\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tconst response = res?.choices[0]?.message?.content ?? '';\n\n\ttry {\n\t\tconst jsonStartIndex = response.indexOf('{');\n\t\tconst jsonEndIndex = response.lastIndexOf('}');\n\n\t\tif (jsonStartIndex !== -1 && jsonEndIndex !== -1) {\n\t\t\tconst jsonResponse = response.substring(jsonStartIndex, jsonEndIndex + 1);\n\n\t\t\t// Step 5: Parse the JSON block\n\t\t\tconst parsed = JSON.parse(jsonResponse);\n\n\t\t\t// Step 6: If there's a \"queries\" key, return the queries array; otherwise, return an empty array\n\t\t\tif (parsed && parsed.text) {\n\t\t\t\treturn parsed.text;\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\t// If no valid JSON block found, return response as is\n\t\treturn response;\n\t} catch (e) {\n\t\t// Catch and safely return empty array on any parsing errors\n\t\tconsole.error('Failed to parse response: ', e);\n\t\treturn response;\n\t}\n};\n\nexport const generateMoACompletion = async (\n\ttoken: string = '',\n\tmodel: string,\n\tprompt: string,\n\tresponses: string[]\n) => {\n\tconst controller = new AbortController();\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/moa/completions`, {\n\t\tsignal: controller.signal,\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tprompt: prompt,\n\t\t\tresponses: responses,\n\t\t\tstream: true\n\t\t})\n\t}).catch((err) => {\n\t\tconsole.log(err);\n\t\terror = err;\n\t\treturn null;\n\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn [res, controller];\n};\n\nexport const getPipelinesList = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/list`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tlet pipelines = res?.data ?? [];\n\treturn pipelines;\n};\n\nexport const uploadPipeline = async (token: string, file: File, urlIdx: string) => {\n\tlet error = null;\n\n\t// Create a new FormData object to handle the file upload\n\tconst formData = new FormData();\n\tformData.append('file', file);\n\tformData.append('urlIdx', urlIdx);\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/upload`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t// 'Content-Type': 'multipart/form-data' is not needed as Fetch API will set it automatically\n\t\t},\n\t\tbody: formData\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const downloadPipeline = async (token: string, url: string, urlIdx: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/add`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\turl: url,\n\t\t\turlIdx: urlIdx\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const deletePipeline = async (token: string, id: string, urlIdx: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/delete`, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tid: id,\n\t\t\turlIdx: urlIdx\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getPipelines = async (token: string, urlIdx?: string) => {\n\tlet error = null;\n\n\tconst searchParams = new URLSearchParams();\n\tif (urlIdx !== undefined) {\n\t\tsearchParams.append('urlIdx', urlIdx);\n\t}\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/?${searchParams.toString()}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tlet pipelines = res?.data ?? [];\n\treturn pipelines;\n};\n\nexport const getPipelineValves = async (token: string, pipeline_id: string, urlIdx: string) => {\n\tlet error = null;\n\n\tconst searchParams = new URLSearchParams();\n\tif (urlIdx !== undefined) {\n\t\tsearchParams.append('urlIdx', urlIdx);\n\t}\n\n\tconst res = await fetch(\n\t\t`${WEBUI_BASE_URL}/api/v1/pipelines/${pipeline_id}/valves?${searchParams.toString()}`,\n\t\t{\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t}\n\t\t}\n\t)\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getPipelineValvesSpec = async (token: string, pipeline_id: string, urlIdx: string) => {\n\tlet error = null;\n\n\tconst searchParams = new URLSearchParams();\n\tif (urlIdx !== undefined) {\n\t\tsearchParams.append('urlIdx', urlIdx);\n\t}\n\n\tconst res = await fetch(\n\t\t`${WEBUI_BASE_URL}/api/v1/pipelines/${pipeline_id}/valves/spec?${searchParams.toString()}`,\n\t\t{\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t}\n\t\t}\n\t)\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const updatePipelineValves = async (\n\ttoken: string = '',\n\tpipeline_id: string,\n\tvalves: object,\n\turlIdx: string\n) => {\n\tlet error = null;\n\n\tconst searchParams = new URLSearchParams();\n\tif (urlIdx !== undefined) {\n\t\tsearchParams.append('urlIdx', urlIdx);\n\t}\n\n\tconst res = await fetch(\n\t\t`${WEBUI_BASE_URL}/api/v1/pipelines/${pipeline_id}/valves/update?${searchParams.toString()}`,\n\t\t{\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t},\n\t\t\tbody: JSON.stringify(valves)\n\t\t}\n\t)\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getBackendConfig = async () => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config`, {\n\t\tmethod: 'GET',\n\t\tcredentials: 'omit',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getChangelog = async () => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/changelog`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getVersionUpdates = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/version/updates`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getModelFilterConfig = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/model/filter`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const updateModelFilterConfig = async (\n\ttoken: string,\n\tenabled: boolean,\n\tmodels: string[]\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/model/filter`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tenabled: enabled,\n\t\t\tmodels: models\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getWebhookUrl = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/webhook`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.url;\n};\n\nexport const updateWebhookUrl = async (token: string, url: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/webhook`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\turl: url\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.url;\n};\n\nexport const getCommunitySharingEnabledStatus = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/community_sharing`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const toggleCommunitySharingEnabledStatus = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/community_sharing/toggle`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err.detail;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getModelConfig = async (token: string): Promise<GlobalModelConfig> => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/models`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.models;\n};\n\nexport interface ModelConfig {\n\tid: string;\n\tname: string;\n\tmeta: ModelMeta;\n\tbase_model_id?: string;\n\tparams: ModelParams;\n}\n\nexport interface ModelMeta {\n\tdescription?: string;\n\tcapabilities?: object;\n\tprofile_image_url?: string;\n}\n\nexport interface ModelParams {}\n\nexport type GlobalModelConfig = ModelConfig[];\n\nexport const updateModelConfig = async (token: string, config: GlobalModelConfig) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/models`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodels: config\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n"],"names":["getModels","token","connections","base","error","res","WEBUI_BASE_URL","err","models","localModels","OPENAI_API_BASE_URLS","OPENAI_API_KEYS","OPENAI_API_CONFIGS","requests","idx","url","apiConfig","enable","modelIds","modelList","modelId","getOpenAIModelsDirect","responses","response","model","prefixId","modelsMap","chatAction","action_id","body","stopTask","id","getTaskConfig","updateTaskConfig","config","generateTags","messages","chat_id","sanitizedResponse","_b","_a","jsonStartIndex","jsonEndIndex","jsonResponse","parsed","e","generateEmoji","prompt","generateAutoCompletion","type","controller","generateMoACompletion","getPipelinesList","uploadPipeline","file","urlIdx","formData","downloadPipeline","deletePipeline","getPipelines","searchParams","getPipelineValves","pipeline_id","getPipelineValvesSpec","updatePipelineValves","valves","getBackendConfig","getVersionUpdates","getWebhookUrl","updateWebhookUrl"],"mappings":"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"}