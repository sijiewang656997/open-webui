{"version":3,"file":"kokoro.worker-Rcpmmj56.js","sources":["../../../src/lib/workers/kokoro.worker.ts"],"sourcesContent":["import { env } from '@huggingface/transformers';\nimport { KokoroTTS } from 'kokoro-js';\n\n// TODO: Below doesn't work as expected, need to investigate further\nenv.backends.onnx.wasm.wasmPaths = '/wasm/';\n\nlet tts;\nlet isInitialized = false; // Flag to track initialization status\nconst DEFAULT_MODEL_ID = 'onnx-community/Kokoro-82M-v1.0-ONNX'; // Default model\n\nself.onmessage = async (event) => {\n\tconst { type, payload } = event.data;\n\n\tif (type === 'init') {\n\t\tlet { model_id, dtype } = payload;\n\t\tmodel_id = model_id || DEFAULT_MODEL_ID; // Use default model if none provided\n\n\t\tself.postMessage({ status: 'init:start' });\n\n\t\ttry {\n\t\t\ttts = await KokoroTTS.from_pretrained(model_id, {\n\t\t\t\tdtype,\n\t\t\t\tdevice: !!navigator?.gpu ? 'webgpu' : 'wasm' // Detect WebGPU\n\t\t\t});\n\t\t\tisInitialized = true; // Mark as initialized after successful loading\n\t\t\tself.postMessage({ status: 'init:complete' });\n\t\t} catch (error) {\n\t\t\tisInitialized = false; // Ensure it's marked as false on failure\n\t\t\tself.postMessage({ status: 'init:error', error: error.message });\n\t\t}\n\t}\n\n\tif (type === 'generate') {\n\t\tif (!isInitialized || !tts) {\n\t\t\t// Ensure model is initialized\n\t\t\tself.postMessage({ status: 'generate:error', error: 'TTS model not initialized' });\n\t\t\treturn;\n\t\t}\n\n\t\tconst { text, voice } = payload;\n\t\tself.postMessage({ status: 'generate:start' });\n\n\t\ttry {\n\t\t\tconst rawAudio = await tts.generate(text, { voice });\n\t\t\tconst blob = await rawAudio.toBlob();\n\t\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\t\tself.postMessage({ status: 'generate:complete', audioUrl: blobUrl });\n\t\t} catch (error) {\n\t\t\tself.postMessage({ status: 'generate:error', error: error.message });\n\t\t}\n\t}\n\n\tif (type === 'status') {\n\t\t// Respond with the current initialization status\n\t\tself.postMessage({ status: 'status:check', initialized: isInitialized });\n\t}\n};\n"],"names":[],"mappings":";;AAIA,IAAI,SAAS,KAAK,KAAK,YAAY;AAEnC,IAAI;AACJ,IAAI,gBAAgB;AACpB,MAAM,mBAAmB;AAEzB,KAAK,YAAY,OAAO,UAAU;AACjC,QAAM,EAAE,MAAM,YAAY,MAAM;AAEhC,MAAI,SAAS,QAAQ;AAChB,QAAA,EAAE,UAAU,MAAU,IAAA;AAC1B,eAAW,YAAY;AAEvB,SAAK,YAAY,EAAE,QAAQ,aAAc,CAAA;AAErC,QAAA;AACG,YAAA,MAAM,UAAU,gBAAgB,UAAU;AAAA,QAC/C;AAAA,QACA,QAAQ,CAAC,CAAC,WAAW,MAAM,WAAW;AAAA;AAAA,MAAA,CACtC;AACe,sBAAA;AAChB,WAAK,YAAY,EAAE,QAAQ,gBAAiB,CAAA;AAAA,aACpC,OAAO;AACC,sBAAA;AAChB,WAAK,YAAY,EAAE,QAAQ,cAAc,OAAO,MAAM,SAAS;AAAA,IAChE;AAAA,EACD;AAEA,MAAI,SAAS,YAAY;AACpB,QAAA,CAAC,iBAAiB,CAAC,KAAK;AAE3B,WAAK,YAAY,EAAE,QAAQ,kBAAkB,OAAO,6BAA6B;AACjF;AAAA,IACD;AAEM,UAAA,EAAE,MAAM,MAAU,IAAA;AACxB,SAAK,YAAY,EAAE,QAAQ,iBAAkB,CAAA;AAEzC,QAAA;AACH,YAAM,WAAW,MAAM,IAAI,SAAS,MAAM,EAAE,OAAO;AAC7C,YAAA,OAAO,MAAM,SAAS;AACtB,YAAA,UAAU,IAAI,gBAAgB,IAAI;AACxC,WAAK,YAAY,EAAE,QAAQ,qBAAqB,UAAU,SAAS;AAAA,aAC3D,OAAO;AACf,WAAK,YAAY,EAAE,QAAQ,kBAAkB,OAAO,MAAM,SAAS;AAAA,IACpE;AAAA,EACD;AAEA,MAAI,SAAS,UAAU;AAEtB,SAAK,YAAY,EAAE,QAAQ,gBAAgB,aAAa,eAAe;AAAA,EACxE;AACD;"}