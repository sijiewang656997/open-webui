{"version":3,"file":"pyodide.worker-B2DxdCLB.js","sources":["../../../src/lib/workers/pyodide.worker.ts"],"sourcesContent":["import { loadPyodide, type PyodideInterface } from 'pyodide';\n\ndeclare global {\n\tinterface Window {\n\t\tstdout: string | null;\n\t\tstderr: string | null;\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tresult: any;\n\t\tpyodide: PyodideInterface;\n\t\tpackages: string[];\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t[key: string]: any;\n\t}\n}\n\nasync function loadPyodideAndPackages(packages: string[] = []) {\n\tself.stdout = null;\n\tself.stderr = null;\n\tself.result = null;\n\n\tself.pyodide = await loadPyodide({\n\t\tindexURL: '/pyodide/',\n\t\tstdout: (text) => {\n\t\t\tconsole.log('Python output:', text);\n\n\t\t\tif (self.stdout) {\n\t\t\t\tself.stdout += `${text}\\n`;\n\t\t\t} else {\n\t\t\t\tself.stdout = `${text}\\n`;\n\t\t\t}\n\t\t},\n\t\tstderr: (text) => {\n\t\t\tconsole.log('An error occurred:', text);\n\t\t\tif (self.stderr) {\n\t\t\t\tself.stderr += `${text}\\n`;\n\t\t\t} else {\n\t\t\t\tself.stderr = `${text}\\n`;\n\t\t\t}\n\t\t},\n\t\tpackages: ['micropip']\n\t});\n\n\tlet mountDir = '/mnt';\n\tself.pyodide.FS.mkdirTree(mountDir);\n\t// self.pyodide.FS.mount(self.pyodide.FS.filesystems.IDBFS, {}, mountDir);\n\n\t// // Load persisted files from IndexedDB (Initial Sync)\n\t// await new Promise<void>((resolve, reject) => {\n\t// \tself.pyodide.FS.syncfs(true, (err) => {\n\t// \t\tif (err) {\n\t// \t\t\tconsole.error('Error syncing from IndexedDB:', err);\n\t// \t\t\treject(err);\n\t// \t\t} else {\n\t// \t\t\tconsole.log('Successfully loaded from IndexedDB.');\n\t// \t\t\tresolve();\n\t// \t\t}\n\t// \t});\n\t// });\n\n\tconst micropip = self.pyodide.pyimport('micropip');\n\n\t// await micropip.set_index_urls('https://pypi.org/pypi/{package_name}/json');\n\tawait micropip.install(packages);\n}\n\nself.onmessage = async (event) => {\n\tconst { id, code, ...context } = event.data;\n\n\tconsole.log(event.data);\n\n\t// The worker copies the context in its own \"memory\" (an object mapping name to values)\n\tfor (const key of Object.keys(context)) {\n\t\tself[key] = context[key];\n\t}\n\n\t// make sure loading is done\n\tawait loadPyodideAndPackages(self.packages);\n\n\ttry {\n\t\t// check if matplotlib is imported in the code\n\t\tif (code.includes('matplotlib')) {\n\t\t\t// Override plt.show() to return base64 image\n\t\t\tawait self.pyodide.runPythonAsync(`import base64\nimport os\nfrom io import BytesIO\n\n# before importing matplotlib\n# to avoid the wasm backend (which needs js.document', not available in worker)\nos.environ[\"MPLBACKEND\"] = \"AGG\"\n\nimport matplotlib.pyplot\n\n_old_show = matplotlib.pyplot.show\nassert _old_show, \"matplotlib.pyplot.show\"\n\ndef show(*, block=None):\n\tbuf = BytesIO()\n\tmatplotlib.pyplot.savefig(buf, format=\"png\")\n\tbuf.seek(0)\n\t# encode to a base64 str\n\timg_str = base64.b64encode(buf.read()).decode('utf-8')\n\tmatplotlib.pyplot.clf()\n\tbuf.close()\n\tprint(f\"data:image/png;base64,{img_str}\")\n\nmatplotlib.pyplot.show = show`);\n\t\t}\n\n\t\tself.result = await self.pyodide.runPythonAsync(code);\n\n\t\t// Safely process and recursively serialize the result\n\t\tself.result = processResult(self.result);\n\n\t\tconsole.log('Python result:', self.result);\n\n\t\t// Persist any changes to IndexedDB\n\t\t// await new Promise<void>((resolve, reject) => {\n\t\t// \tself.pyodide.FS.syncfs(false, (err) => {\n\t\t// \t\tif (err) {\n\t\t// \t\t\tconsole.error('Error syncing to IndexedDB:', err);\n\t\t// \t\t\treject(err);\n\t\t// \t\t} else {\n\t\t// \t\t\tconsole.log('Successfully synced to IndexedDB.');\n\t\t// \t\t\tresolve();\n\t\t// \t\t}\n\t\t// \t});\n\t\t// });\n\t} catch (error) {\n\t\tself.stderr = error.toString();\n\t}\n\n\tself.postMessage({ id, result: self.result, stdout: self.stdout, stderr: self.stderr });\n};\n\nfunction processResult(result: any): any {\n\t// Catch and always return JSON-safe string representations\n\ttry {\n\t\tif (result == null) {\n\t\t\t// Handle null and undefined\n\t\t\treturn null;\n\t\t}\n\t\tif (typeof result === 'string' || typeof result === 'number' || typeof result === 'boolean') {\n\t\t\t// Handle primitive types directly\n\t\t\treturn result;\n\t\t}\n\t\tif (typeof result === 'bigint') {\n\t\t\t// Convert BigInt to a string for JSON-safe representation\n\t\t\treturn result.toString();\n\t\t}\n\t\tif (Array.isArray(result)) {\n\t\t\t// If it's an array, recursively process items\n\t\t\treturn result.map((item) => processResult(item));\n\t\t}\n\t\tif (typeof result.toJs === 'function') {\n\t\t\t// If it's a Pyodide proxy object (e.g., Pandas DF, Numpy Array), convert to JS and process recursively\n\t\t\treturn processResult(result.toJs());\n\t\t}\n\t\tif (typeof result === 'object') {\n\t\t\t// Convert JS objects to a recursively serialized representation\n\t\t\tconst processedObject: { [key: string]: any } = {};\n\t\t\tfor (const key in result) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(result, key)) {\n\t\t\t\t\tprocessedObject[key] = processResult(result[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn processedObject;\n\t\t}\n\t\t// Stringify anything that's left (e.g., Proxy objects that cannot be directly processed)\n\t\treturn JSON.stringify(result);\n\t} catch (err) {\n\t\t// In case something unexpected happens, we return a stringified fallback\n\t\treturn `[processResult error]: ${err.message || err.toString()}`;\n\t}\n}\n\nexport default {};\n"],"names":[],"mappings":";AAeA,eAAe,uBAAuB,WAAqB,IAAI;AAC9D,OAAK,SAAS;AACd,OAAK,SAAS;AACd,OAAK,SAAS;AAET,OAAA,UAAU,MAAM,YAAY;AAAA,IAChC,UAAU;AAAA,IACV,QAAQ,CAAC,SAAS;AACT,cAAA,IAAI,kBAAkB,IAAI;AAElC,UAAI,KAAK,QAAQ;AACX,aAAA,UAAU,GAAG,IAAI;AAAA;AAAA,MAAA,OAChB;AACD,aAAA,SAAS,GAAG,IAAI;AAAA;AAAA,MAAA;AAAA,IAEvB;AAAA,IACA,QAAQ,CAAC,SAAS;AACT,cAAA,IAAI,sBAAsB,IAAI;AACtC,UAAI,KAAK,QAAQ;AACX,aAAA,UAAU,GAAG,IAAI;AAAA;AAAA,MAAA,OAChB;AACD,aAAA,SAAS,GAAG,IAAI;AAAA;AAAA,MAAA;AAAA,IAEvB;AAAA,IACA,UAAU,CAAC,UAAU;AAAA,EAAA,CACrB;AAED,MAAI,WAAW;AACV,OAAA,QAAQ,GAAG,UAAU,QAAQ;AAgBlC,QAAM,WAAW,KAAK,QAAQ,SAAS,UAAU;AAG3C,QAAA,SAAS,QAAQ,QAAQ;AAChC;AAEA,KAAK,YAAY,OAAO,UAAU;AACjC,QAAM,EAAE,IAAI,MAAM,GAAG,YAAY,MAAM;AAE/B,UAAA,IAAI,MAAM,IAAI;AAGtB,aAAW,OAAO,OAAO,KAAK,OAAO,GAAG;AAClC,SAAA,GAAG,IAAI,QAAQ,GAAG;AAAA,EAAA;AAIlB,QAAA,uBAAuB,KAAK,QAAQ;AAEtC,MAAA;AAEC,QAAA,KAAK,SAAS,YAAY,GAAG;AAE1B,YAAA,KAAK,QAAQ,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAuBP;AAAA,IAAA;AAG5B,SAAK,SAAS,MAAM,KAAK,QAAQ,eAAe,IAAI;AAG/C,SAAA,SAAS,cAAc,KAAK,MAAM;AAE/B,YAAA,IAAI,kBAAkB,KAAK,MAAM;AAAA,WAcjC,OAAO;AACV,SAAA,SAAS,MAAM,SAAS;AAAA,EAAA;AAG9B,OAAK,YAAY,EAAE,IAAI,QAAQ,KAAK,QAAQ,QAAQ,KAAK,QAAQ,QAAQ,KAAK,OAAA,CAAQ;AACvF;AAEA,SAAS,cAAc,QAAkB;AAEpC,MAAA;AACH,QAAI,UAAU,MAAM;AAEZ,aAAA;AAAA,IAAA;AAEJ,QAAA,OAAO,WAAW,YAAY,OAAO,WAAW,YAAY,OAAO,WAAW,WAAW;AAErF,aAAA;AAAA,IAAA;AAEJ,QAAA,OAAO,WAAW,UAAU;AAE/B,aAAO,OAAO,SAAS;AAAA,IAAA;AAEpB,QAAA,MAAM,QAAQ,MAAM,GAAG;AAE1B,aAAO,OAAO,IAAI,CAAC,SAAS,cAAc,IAAI,CAAC;AAAA,IAAA;AAE5C,QAAA,OAAO,OAAO,SAAS,YAAY;AAE/B,aAAA,cAAc,OAAO,MAAM;AAAA,IAAA;AAE/B,QAAA,OAAO,WAAW,UAAU;AAE/B,YAAM,kBAA0C,CAAC;AACjD,iBAAW,OAAO,QAAQ;AACzB,YAAI,OAAO,UAAU,eAAe,KAAK,QAAQ,GAAG,GAAG;AACtD,0BAAgB,GAAG,IAAI,cAAc,OAAO,GAAG,CAAC;AAAA,QAAA;AAAA,MACjD;AAEM,aAAA;AAAA,IAAA;AAGD,WAAA,KAAK,UAAU,MAAM;AAAA,WACpB,KAAK;AAEb,WAAO,0BAA0B,IAAI,WAAW,IAAI,UAAU;AAAA,EAAA;AAEhE;"}