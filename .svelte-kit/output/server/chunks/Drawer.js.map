{"version":3,"file":"Drawer.js","sources":["../../../../node_modules/svelte/src/runtime/transition/index.js","../../../../src/lib/components/icons/ArchiveBox.svelte","../../../../src/lib/components/layout/Sidebar/UserMenu.svelte","../../../../node_modules/paneforge/dist/internal/utils/lifecycle.js","../../../../node_modules/paneforge/dist/internal/utils/store.js","../../../../node_modules/paneforge/dist/internal/utils/style.js","../../../../node_modules/paneforge/dist/internal/utils/aria.js","../../../../node_modules/paneforge/dist/internal/utils/id.js","../../../../node_modules/paneforge/dist/internal/constants.js","../../../../node_modules/paneforge/dist/internal/utils/storage.js","../../../../node_modules/paneforge/dist/internal/utils/object.js","../../../../node_modules/paneforge/dist/internal/utils/compare.js","../../../../node_modules/paneforge/dist/internal/utils/assert.js","../../../../node_modules/paneforge/dist/internal/utils/resize.js","../../../../node_modules/paneforge/dist/internal/utils/adjust-layout.js","../../../../node_modules/paneforge/dist/internal/utils/is.js","../../../../node_modules/paneforge/dist/internal/paneforge.js","../../../../node_modules/paneforge/dist/components/ctx.js","../../../../node_modules/paneforge/dist/components/pane-group.svelte","../../../../node_modules/paneforge/dist/components/pane.svelte","../../../../src/lib/components/chat/MessageInput/FilesOverlay.svelte","../../../../src/lib/components/common/Drawer.svelte"],"sourcesContent":["import { cubicOut, cubicInOut, linear } from '../easing/index.js';\nimport { assign, split_css_unit, is_function } from '../internal/index.js';\n\n/**\n * Animates a `blur` filter alongside an element's opacity.\n *\n * https://svelte.dev/docs/svelte-transition#blur\n * @param {Element} node\n * @param {import('./public').BlurParams} [params]\n * @returns {import('./public').TransitionConfig}\n */\nexport function blur(\n\tnode,\n\t{ delay = 0, duration = 400, easing = cubicInOut, amount = 5, opacity = 0 } = {}\n) {\n\tconst style = getComputedStyle(node);\n\tconst target_opacity = +style.opacity;\n\tconst f = style.filter === 'none' ? '' : style.filter;\n\tconst od = target_opacity * (1 - opacity);\n\tconst [value, unit] = split_css_unit(amount);\n\treturn {\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tcss: (_t, u) => `opacity: ${target_opacity - od * u}; filter: ${f} blur(${u * value}${unit});`\n\t};\n}\n\n/**\n * Animates the opacity of an element from 0 to the current opacity for `in` transitions and from the current opacity to 0 for `out` transitions.\n *\n * https://svelte.dev/docs/svelte-transition#fade\n * @param {Element} node\n * @param {import('./public').FadeParams} [params]\n * @returns {import('./public').TransitionConfig}\n */\nexport function fade(node, { delay = 0, duration = 400, easing = linear } = {}) {\n\tconst o = +getComputedStyle(node).opacity;\n\treturn {\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tcss: (t) => `opacity: ${t * o}`\n\t};\n}\n\n/**\n * Animates the x and y positions and the opacity of an element. `in` transitions animate from the provided values, passed as parameters to the element's default values. `out` transitions animate from the element's default values to the provided values.\n *\n * https://svelte.dev/docs/svelte-transition#fly\n * @param {Element} node\n * @param {import('./public').FlyParams} [params]\n * @returns {import('./public').TransitionConfig}\n */\nexport function fly(\n\tnode,\n\t{ delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}\n) {\n\tconst style = getComputedStyle(node);\n\tconst target_opacity = +style.opacity;\n\tconst transform = style.transform === 'none' ? '' : style.transform;\n\tconst od = target_opacity * (1 - opacity);\n\tconst [xValue, xUnit] = split_css_unit(x);\n\tconst [yValue, yUnit] = split_css_unit(y);\n\treturn {\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tcss: (t, u) => `\n\t\t\ttransform: ${transform} translate(${(1 - t) * xValue}${xUnit}, ${(1 - t) * yValue}${yUnit});\n\t\t\topacity: ${target_opacity - od * u}`\n\t};\n}\n\n/**\n * Slides an element in and out.\n *\n * https://svelte.dev/docs/svelte-transition#slide\n * @param {Element} node\n * @param {import('./public').SlideParams} [params]\n * @returns {import('./public').TransitionConfig}\n */\nexport function slide(node, { delay = 0, duration = 400, easing = cubicOut, axis = 'y' } = {}) {\n\tconst style = getComputedStyle(node);\n\tconst opacity = +style.opacity;\n\tconst primary_property = axis === 'y' ? 'height' : 'width';\n\tconst primary_property_value = parseFloat(style[primary_property]);\n\tconst secondary_properties = axis === 'y' ? ['top', 'bottom'] : ['left', 'right'];\n\tconst capitalized_secondary_properties = secondary_properties.map(\n\t\t(e) => `${e[0].toUpperCase()}${e.slice(1)}`\n\t);\n\tconst padding_start_value = parseFloat(style[`padding${capitalized_secondary_properties[0]}`]);\n\tconst padding_end_value = parseFloat(style[`padding${capitalized_secondary_properties[1]}`]);\n\tconst margin_start_value = parseFloat(style[`margin${capitalized_secondary_properties[0]}`]);\n\tconst margin_end_value = parseFloat(style[`margin${capitalized_secondary_properties[1]}`]);\n\tconst border_width_start_value = parseFloat(\n\t\tstyle[`border${capitalized_secondary_properties[0]}Width`]\n\t);\n\tconst border_width_end_value = parseFloat(\n\t\tstyle[`border${capitalized_secondary_properties[1]}Width`]\n\t);\n\treturn {\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tcss: (t) =>\n\t\t\t'overflow: hidden;' +\n\t\t\t`opacity: ${Math.min(t * 20, 1) * opacity};` +\n\t\t\t`${primary_property}: ${t * primary_property_value}px;` +\n\t\t\t`padding-${secondary_properties[0]}: ${t * padding_start_value}px;` +\n\t\t\t`padding-${secondary_properties[1]}: ${t * padding_end_value}px;` +\n\t\t\t`margin-${secondary_properties[0]}: ${t * margin_start_value}px;` +\n\t\t\t`margin-${secondary_properties[1]}: ${t * margin_end_value}px;` +\n\t\t\t`border-${secondary_properties[0]}-width: ${t * border_width_start_value}px;` +\n\t\t\t`border-${secondary_properties[1]}-width: ${t * border_width_end_value}px;`\n\t};\n}\n\n/**\n * Animates the opacity and scale of an element. `in` transitions animate from an element's current (default) values to the provided values, passed as parameters. `out` transitions animate from the provided values to an element's default values.\n *\n * https://svelte.dev/docs/svelte-transition#scale\n * @param {Element} node\n * @param {import('./public').ScaleParams} [params]\n * @returns {import('./public').TransitionConfig}\n */\nexport function scale(\n\tnode,\n\t{ delay = 0, duration = 400, easing = cubicOut, start = 0, opacity = 0 } = {}\n) {\n\tconst style = getComputedStyle(node);\n\tconst target_opacity = +style.opacity;\n\tconst transform = style.transform === 'none' ? '' : style.transform;\n\tconst sd = 1 - start;\n\tconst od = target_opacity * (1 - opacity);\n\treturn {\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tcss: (_t, u) => `\n\t\t\ttransform: ${transform} scale(${1 - sd * u});\n\t\t\topacity: ${target_opacity - od * u}\n\t\t`\n\t};\n}\n\n/**\n * Animates the stroke of an SVG element, like a snake in a tube. `in` transitions begin with the path invisible and draw the path to the screen over time. `out` transitions start in a visible state and gradually erase the path. `draw` only works with elements that have a `getTotalLength` method, like `<path>` and `<polyline>`.\n *\n * https://svelte.dev/docs/svelte-transition#draw\n * @param {SVGElement & { getTotalLength(): number }} node\n * @param {import('./public').DrawParams} [params]\n * @returns {import('./public').TransitionConfig}\n */\nexport function draw(node, { delay = 0, speed, duration, easing = cubicInOut } = {}) {\n\tlet len = node.getTotalLength();\n\tconst style = getComputedStyle(node);\n\tif (style.strokeLinecap !== 'butt') {\n\t\tlen += parseInt(style.strokeWidth);\n\t}\n\tif (duration === undefined) {\n\t\tif (speed === undefined) {\n\t\t\tduration = 800;\n\t\t} else {\n\t\t\tduration = len / speed;\n\t\t}\n\t} else if (typeof duration === 'function') {\n\t\tduration = duration(len);\n\t}\n\treturn {\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tcss: (_, u) => `\n\t\t\tstroke-dasharray: ${len};\n\t\t\tstroke-dashoffset: ${u * len};\n\t\t`\n\t};\n}\n\n/**\n * The `crossfade` function creates a pair of [transitions](https://svelte.dev/docs#template-syntax-element-directives-transition-fn) called `send` and `receive`. When an element is 'sent', it looks for a corresponding element being 'received', and generates a transition that transforms the element to its counterpart's position and fades it out. When an element is 'received', the reverse happens. If there is no counterpart, the `fallback` transition is used.\n *\n * https://svelte.dev/docs/svelte-transition#crossfade\n * @param {import('./public').CrossfadeParams & {\n * \tfallback?: (node: Element, params: import('./public').CrossfadeParams, intro: boolean) => import('./public').TransitionConfig;\n * }} params\n * @returns {[(node: any, params: import('./public').CrossfadeParams & { key: any; }) => () => import('./public').TransitionConfig, (node: any, params: import('./public').CrossfadeParams & { key: any; }) => () => import('./public').TransitionConfig]}\n */\nexport function crossfade({ fallback, ...defaults }) {\n\t/** @type {Map<any, Element>} */\n\tconst to_receive = new Map();\n\t/** @type {Map<any, Element>} */\n\tconst to_send = new Map();\n\t/**\n\t * @param {Element} from_node\n\t * @param {Element} node\n\t * @param {import('./public').CrossfadeParams} params\n\t * @returns {import('./public').TransitionConfig}\n\t */\n\tfunction crossfade(from_node, node, params) {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = (d) => Math.sqrt(d) * 30,\n\t\t\teasing = cubicOut\n\t\t} = assign(assign({}, defaults), params);\n\t\tconst from = from_node.getBoundingClientRect();\n\t\tconst to = node.getBoundingClientRect();\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\t\tconst dw = from.width / to.width;\n\t\tconst dh = from.height / to.height;\n\t\tconst d = Math.sqrt(dx * dx + dy * dy);\n\t\tconst style = getComputedStyle(node);\n\t\tconst transform = style.transform === 'none' ? '' : style.transform;\n\t\tconst opacity = +style.opacity;\n\t\treturn {\n\t\t\tdelay,\n\t\t\tduration: is_function(duration) ? duration(d) : duration,\n\t\t\teasing,\n\t\t\tcss: (t, u) => `\n\t\t\t\topacity: ${t * opacity};\n\t\t\t\ttransform-origin: top left;\n\t\t\t\ttransform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${\n\t\t\t\tt + (1 - t) * dh\n\t\t\t});\n\t\t\t`\n\t\t};\n\t}\n\n\t/**\n\t * @param {Map<any, Element>} items\n\t * @param {Map<any, Element>} counterparts\n\t * @param {boolean} intro\n\t * @returns {(node: any, params: import('./public').CrossfadeParams & { key: any; }) => () => import('./public').TransitionConfig}\n\t */\n\tfunction transition(items, counterparts, intro) {\n\t\treturn (node, params) => {\n\t\t\titems.set(params.key, node);\n\t\t\treturn () => {\n\t\t\t\tif (counterparts.has(params.key)) {\n\t\t\t\t\tconst other_node = counterparts.get(params.key);\n\t\t\t\t\tcounterparts.delete(params.key);\n\t\t\t\t\treturn crossfade(other_node, node, params);\n\t\t\t\t}\n\t\t\t\t// if the node is disappearing altogether\n\t\t\t\t// (i.e. wasn't claimed by the other list)\n\t\t\t\t// then we need to supply an outro\n\t\t\t\titems.delete(params.key);\n\t\t\t\treturn fallback && fallback(node, params, intro);\n\t\t\t};\n\t\t};\n\t}\n\treturn [transition(to_send, to_receive, false), transition(to_receive, to_send, true)];\n}\n","<script lang=\"ts\">\n\texport let className = 'size-3.5';\n\texport let strokeWidth = '2.5';\n</script>\n\n<svg\n\txmlns=\"http://www.w3.org/2000/svg\"\n\tfill=\"none\"\n\tviewBox=\"0 0 24 24\"\n\tstroke-width={strokeWidth}\n\tstroke=\"currentColor\"\n\tclass={className}\n>\n\t<path\n\t\tstroke-linecap=\"round\"\n\t\tstroke-linejoin=\"round\"\n\t\td=\"m20.25 7.5-.625 10.632a2.25 2.25 0 0 1-2.247 2.118H6.622a2.25 2.25 0 0 1-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125Z\"\n\t/>\n</svg>\n","<script lang=\"ts\">\n\timport { DropdownMenu } from 'bits-ui';\n\timport { createEventDispatcher, getContext, onMount } from 'svelte';\n\n\timport { flyAndScale } from '$lib/utils/transitions';\n\timport { goto } from '$app/navigation';\n\timport ArchiveBox from '$lib/components/icons/ArchiveBox.svelte';\n\timport { showSettings, activeUserIds, USAGE_POOL, mobile, showSidebar } from '$lib/stores';\n\timport { fade, slide } from 'svelte/transition';\n\timport Tooltip from '$lib/components/common/Tooltip.svelte';\n\timport { userSignOut } from '$lib/apis/auths';\n\n\tconst i18n = getContext('i18n');\n\n\texport let show = false;\n\texport let role = '';\n\texport let className = 'max-w-[240px]';\n\n\tconst dispatch = createEventDispatcher();\n</script>\n\n<DropdownMenu.Root\n\tbind:open={show}\n\tonOpenChange={(state) => {\n\t\tdispatch('change', state);\n\t}}\n>\n\t<DropdownMenu.Trigger>\n\t\t<slot />\n\t</DropdownMenu.Trigger>\n\n\t<slot name=\"content\">\n\t\t<DropdownMenu.Content\n\t\t\tclass=\"w-full {className} text-sm rounded-xl px-1 py-1.5 z-50 bg-white dark:bg-gray-850 dark:text-white shadow-lg font-primary\"\n\t\t\tsideOffset={8}\n\t\t\tside=\"bottom\"\n\t\t\talign=\"start\"\n\t\t\ttransition={(e) => fade(e, { duration: 100 })}\n\t\t>\n\t\t\t<button\n\t\t\t\tclass=\"flex rounded-md py-2 px-3 w-full hover:bg-gray-50 dark:hover:bg-gray-800 transition\"\n\t\t\t\ton:click={async () => {\n\t\t\t\t\tawait showSettings.set(true);\n\t\t\t\t\tshow = false;\n\n\t\t\t\t\tif ($mobile) {\n\t\t\t\t\t\tshowSidebar.set(false);\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div class=\" self-center mr-3\">\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\tstroke-width=\"1.5\"\n\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\tclass=\"w-5 h-5\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\td=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\td=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t\t<div class=\" self-center truncate\">{$i18n.t('Settings')}</div>\n\t\t\t</button>\n\n\t\t\t<button\n\t\t\t\tclass=\"flex rounded-md py-2 px-3 w-full hover:bg-gray-50 dark:hover:bg-gray-800 transition\"\n\t\t\t\ton:click={() => {\n\t\t\t\t\tdispatch('show', 'archived-chat');\n\t\t\t\t\tshow = false;\n\n\t\t\t\t\tif ($mobile) {\n\t\t\t\t\t\tshowSidebar.set(false);\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div class=\" self-center mr-3\">\n\t\t\t\t\t<ArchiveBox className=\"size-5\" strokeWidth=\"1.5\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\" self-center truncate\">{$i18n.t('Archived Chats')}</div>\n\t\t\t</button>\n\n\t\t\t{#if role === 'admin'}\n\t\t\t\t<!-- <a\n\t\t\t\t\tclass=\"flex rounded-md py-2 px-3 w-full hover:bg-gray-50 dark:hover:bg-gray-800 transition\"\n\t\t\t\t\thref=\"/playground\"\n\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\tshow = false;\n\n\t\t\t\t\t\tif ($mobile) {\n\t\t\t\t\t\t\tshowSidebar.set(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<div class=\" self-center mr-3\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t\tstroke-width=\"1.5\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tclass=\"size-5\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\td=\"M14.25 9.75 16.5 12l-2.25 2.25m-4.5 0L7.5 12l2.25-2.25M6 20.25h12A2.25 2.25 0 0 0 20.25 18V6A2.25 2.25 0 0 0 18 3.75H6A2.25 2.25 0 0 0 3.75 6v12A2.25 2.25 0 0 0 6 20.25Z\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\" self-center truncate\">{$i18n.t('Playground')}</div>\n\t\t\t\t</a> -->\n\n\t\t\t\t<a\n\t\t\t\t\tclass=\"flex rounded-md py-2 px-3 w-full hover:bg-gray-50 dark:hover:bg-gray-800 transition\"\n\t\t\t\t\thref=\"/admin\"\n\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\tshow = false;\n\n\t\t\t\t\t\tif ($mobile) {\n\t\t\t\t\t\t\tshowSidebar.set(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<div class=\" self-center mr-3\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t\tstroke-width=\"1.5\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tclass=\"w-5 h-5\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\td=\"M17.982 18.725A7.488 7.488 0 0012 15.75a7.488 7.488 0 00-5.982 2.975m11.963 0a9 9 0 10-11.963 0m11.963 0A8.966 8.966 0 0112 21a8.966 8.966 0 01-5.982-2.275M15 9.75a3 3 0 11-6 0 3 3 0 016 0z\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\" self-center truncate\">{$i18n.t('Admin Panel')}</div>\n\t\t\t\t</a>\n\t\t\t{/if}\n\n\t\t\t<hr class=\" border-gray-100 dark:border-gray-850 my-1 p-0\" />\n\n\t\t\t<button\n\t\t\t\tclass=\"flex rounded-md py-2 px-3 w-full hover:bg-gray-50 dark:hover:bg-gray-800 transition\"\n\t\t\t\ton:click={async () => {\n\t\t\t\t\tawait userSignOut();\n\t\t\t\t\tlocalStorage.removeItem('token');\n\t\t\t\t\tlocation.href = '/auth';\n\t\t\t\t\tshow = false;\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div class=\" self-center mr-3\">\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\tviewBox=\"0 0 20 20\"\n\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\tclass=\"w-5 h-5\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\t\t\t\td=\"M3 4.25A2.25 2.25 0 015.25 2h5.5A2.25 2.25 0 0113 4.25v2a.75.75 0 01-1.5 0v-2a.75.75 0 00-.75-.75h-5.5a.75.75 0 00-.75.75v11.5c0 .414.336.75.75.75h5.5a.75.75 0 00.75-.75v-2a.75.75 0 011.5 0v2A2.25 2.25 0 0110.75 18h-5.5A2.25 2.25 0 013 15.75V4.25z\"\n\t\t\t\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\t\t\t\td=\"M6 10a.75.75 0 01.75-.75h9.546l-1.048-.943a.75.75 0 111.004-1.114l2.5 2.25a.75.75 0 010 1.114l-2.5 2.25a.75.75 0 11-1.004-1.114l1.048-.943H6.75A.75.75 0 016 10z\"\n\t\t\t\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t\t<div class=\" self-center truncate\">{$i18n.t('Sign Out')}</div>\n\t\t\t</button>\n\n\t\t\t{#if $activeUserIds?.length > 0}\n\t\t\t\t<hr class=\" border-gray-100 dark:border-gray-850 my-1 p-0\" />\n\n\t\t\t\t<Tooltip\n\t\t\t\t\tcontent={$USAGE_POOL && $USAGE_POOL.length > 0\n\t\t\t\t\t\t? `${$i18n.t('Running')}: ${$USAGE_POOL.join(', ')} ✨`\n\t\t\t\t\t\t: ''}\n\t\t\t\t>\n\t\t\t\t\t<div class=\"flex rounded-md py-1.5 px-3 text-xs gap-2.5 items-center\">\n\t\t\t\t\t\t<div class=\" flex items-center\">\n\t\t\t\t\t\t\t<span class=\"relative flex size-2\">\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclass=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<span class=\"relative inline-flex rounded-full size-2 bg-green-500\" />\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\" \">\n\t\t\t\t\t\t\t<span class=\"\">\n\t\t\t\t\t\t\t\t{$i18n.t('Active Users')}:\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span class=\" font-semibold\">\n\t\t\t\t\t\t\t\t{$activeUserIds?.length}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</Tooltip>\n\t\t\t{/if}\n\n\t\t\t<!-- <DropdownMenu.Item class=\"flex items-center px-3 py-2 text-sm \">\n\t\t\t\t<div class=\"flex items-center\">Profile</div>\n\t\t\t</DropdownMenu.Item> -->\n\t\t</DropdownMenu.Content>\n\t</slot>\n</DropdownMenu.Root>\n","import { onDestroy } from \"svelte\";\n/**\n * Safely calls `onDestroy` and catches any errors that occur.\n */\nexport function safeOnDestroy(fn) {\n    try {\n        onDestroy(fn);\n    }\n    catch {\n        return fn();\n    }\n}\n","import { isBrowser, safeOnDestroy } from \"./index.js\";\nimport { derived, writable, } from \"svelte/store\";\n/**\n * A utility function that creates a derived store that automatically\n * unsubscribes from its dependencies.\n *\n * Originally written by @tglide for use in Melt UI. <3\n *\n * @template S - The type of the stores object\n * @template T - The type of the derived store\n * @param stores - The stores object to derive from\n * @param fn - The function to derive the store from\n * @returns A derived store that automatically unsubscribes from its dependencies\n */\nexport function derivedWithUnsubscribe(stores, fn) {\n    let unsubscribers = [];\n    const onUnsubscribe = (cb) => {\n        unsubscribers.push(cb);\n    };\n    const unsubscribe = () => {\n        // Call all of the unsubscribe functions from the previous run of the function\n        unsubscribers.forEach((fn) => fn());\n        // Clear the list of unsubscribe functions\n        unsubscribers = [];\n    };\n    const derivedStore = derived(stores, ($storeValues) => {\n        unsubscribe();\n        return fn($storeValues, onUnsubscribe);\n    });\n    safeOnDestroy(unsubscribe);\n    const subscribe = (...args) => {\n        const unsub = derivedStore.subscribe(...args);\n        return () => {\n            unsub();\n            unsubscribe();\n        };\n    };\n    return {\n        ...derivedStore,\n        subscribe,\n    };\n}\n/**\n * A utility function that creates an effect from a set of stores and a function.\n * The effect is automatically cleaned up when the component is destroyed.\n *\n * Originally written by @tglide for use in Melt UI. <3\n *\n * @template S - The type of the stores object\n * @param stores - The stores object to derive from\n * @param fn - The function to run when the stores change\n * @returns A function that can be used to unsubscribe the effect\n */\nexport function clientEffect(stores, fn) {\n    if (!isBrowser)\n        return () => { };\n    // Create a derived store that contains the stores object and an onUnsubscribe function\n    const unsub = derivedWithUnsubscribe(stores, (stores, onUnsubscribe) => {\n        return {\n            stores,\n            onUnsubscribe,\n        };\n    }).subscribe(({ stores, onUnsubscribe }) => {\n        const returned = fn(stores);\n        // If the function returns a cleanup function, call it when the effect is unsubscribed\n        if (returned) {\n            onUnsubscribe(returned);\n        }\n    });\n    // Automatically unsubscribe the effect when the component is destroyed\n    safeOnDestroy(unsub);\n    return unsub;\n}\n/**\n * Given an object of properties, returns an object of writable stores\n * with the same properties and values.\n */\nexport function toWritableStores(properties) {\n    const result = {};\n    Object.keys(properties).forEach((key) => {\n        const propertyKey = key;\n        const value = properties[propertyKey];\n        result[propertyKey] = writable(value);\n    });\n    return result;\n}\n/**\n * Returns a function that can be used to update the values of options\n * in a store based on the modification of a prop.\n */\nexport function getOptionUpdater(options) {\n    return function (key, value) {\n        if (value === undefined)\n            return;\n        const store = options[key];\n        if (store) {\n            store.set(value);\n        }\n    };\n}\n","/**\n * A utility function that converts a style object to a string,\n * which can be used as the value of the `style` attribute for\n * an element.\n *\n * @param style - The style object to convert\n * @returns The style object as a string\n */\nexport function styleToString(style) {\n    return Object.keys(style).reduce((str, key) => {\n        if (style[key] === undefined)\n            return str;\n        return str + `${key}:${style[key]};`;\n    }, \"\");\n}\n/* Global cursor state */\nlet currentState = null;\n/* Global cursor element */\nlet element = null;\n/**\n * Returns the cursor style for a given cursor state.\n */\nexport function getCursorStyle(state) {\n    switch (state) {\n        case \"horizontal\":\n            return \"ew-resize\";\n        case \"horizontal-max\":\n            return \"w-resize\";\n        case \"horizontal-min\":\n            return \"e-resize\";\n        case \"vertical\":\n            return \"ns-resize\";\n        case \"vertical-max\":\n            return \"n-resize\";\n        case \"vertical-min\":\n            return \"s-resize\";\n    }\n}\n/**\n * Resets the global cursor style to the default.\n */\nexport function resetGlobalCursorStyle() {\n    if (element === null)\n        return;\n    document.head.removeChild(element);\n    currentState = null;\n    element = null;\n}\n/**\n * Sets the global cursor style to the given state.\n */\nexport function setGlobalCursorStyle(state) {\n    if (currentState === state)\n        return;\n    currentState = state;\n    const style = getCursorStyle(state);\n    if (element === null) {\n        element = document.createElement(\"style\");\n        document.head.appendChild(element);\n    }\n    element.innerHTML = `*{cursor: ${style}!important;}`;\n}\n/**\n * Computes the flexbox style for a pane given its layout and drag state.\n */\nexport function computePaneFlexBoxStyle({ defaultSize, dragState, layout, paneData, paneIndex, precision = 3, }) {\n    const size = layout[paneIndex];\n    let flexGrow;\n    if (size == null) {\n        // Initial render (before panes have registered themselves)\n        // To support server rendering, fallback to default size\n        flexGrow = defaultSize ?? \"1\";\n    }\n    else if (paneData.length === 1) {\n        //  Single pane group should always fill full width/height\n        flexGrow = \"1\";\n    }\n    else {\n        flexGrow = size.toPrecision(precision);\n    }\n    return styleToString({\n        \"flex-basis\": 0,\n        \"flex-grow\": flexGrow,\n        \"flex-shrink\": 1,\n        // Without this, pane sizes may be unintentionally overridden by their content\n        overflow: \"hidden\",\n        // Disable pointer events inside of a pane during resize\n        // This avoid edge cases like nested iframes\n        \"pointer-events\": dragState !== null ? \"none\" : undefined,\n    });\n}\n","/**\n * A utility function that calculates the `aria-valuemax`, `aria-valuemin`,\n * and `aria-valuenow` values for a pane based on its layout and constraints.\n */\nexport function calculateAriaValues({ layout, panesArray, pivotIndices, }) {\n    let currentMinSize = 0;\n    let currentMaxSize = 100;\n    let totalMinSize = 0;\n    let totalMaxSize = 0;\n    const firstIndex = pivotIndices[0];\n    // A pane's effective min/max sizes also need to account for other pane's sizes.\n    for (let i = 0; i < panesArray.length; i++) {\n        const { constraints } = panesArray[i];\n        const { maxSize = 100, minSize = 0 } = constraints;\n        if (i === firstIndex) {\n            currentMinSize = minSize;\n            currentMaxSize = maxSize;\n        }\n        else {\n            totalMinSize += minSize;\n            totalMaxSize += maxSize;\n        }\n    }\n    const valueMax = Math.min(currentMaxSize, 100 - totalMinSize);\n    const valueMin = Math.max(currentMinSize, 100 - totalMaxSize);\n    const valueNow = layout[firstIndex];\n    return {\n        valueMax,\n        valueMin,\n        valueNow,\n    };\n}\n","import { nanoid } from \"nanoid/non-secure\";\n/**\n * If an id is provided return it, otherwise generate a new id and return that.\n */\nexport function generateId(idFromProps = null) {\n    if (idFromProps == null)\n        return nanoid(10);\n    return idFromProps;\n}\n","export const LOCAL_STORAGE_DEBOUNCE_INTERVAL = 100;\nexport const PRECISION = 10;\n","import { get } from \"svelte/store\";\nimport { LOCAL_STORAGE_DEBOUNCE_INTERVAL } from \"../constants.js\";\n/**\n * Initializes the storage object with the appropriate getItem\n *  and setItem functions depending on the environment (browser or not).\n */\nexport function initializeStorage(storageObject) {\n    try {\n        if (typeof localStorage === \"undefined\") {\n            throw new Error(\"localStorage is not supported in this environment\");\n        }\n        storageObject.getItem = (name) => localStorage.getItem(name);\n        storageObject.setItem = (name, value) => localStorage.setItem(name, value);\n    }\n    catch (err) {\n        // eslint-disable-next-line no-console\n        console.error(err);\n        storageObject.getItem = () => null;\n        storageObject.setItem = () => { };\n    }\n}\n/**\n * Returns the key to use for storing the pane group state in local storage.\n */\nfunction getPaneGroupKey(autoSaveId) {\n    return `paneforge:${autoSaveId}`;\n}\n/**\n * Returns a key to use for storing the pane state in local storage.\n * The key is based on the pane order and constraints.\n */\nfunction getPaneKey(panes) {\n    const sortedPaneIds = panes\n        .map((pane) => {\n        const { constraints, id, idIsFromProps, order } = pane;\n        return idIsFromProps\n            ? id\n            : order\n                ? `${order}:${JSON.stringify(constraints)}`\n                : JSON.stringify(constraints);\n    })\n        .sort()\n        .join(\",\");\n    return sortedPaneIds;\n}\n/**\n * Loads the serialized pane group state from local storage.\n * If the state is not found, returns null.\n */\nfunction loadSerializedPaneGroupState(autoSaveId, storage) {\n    try {\n        const paneGroupKey = getPaneGroupKey(autoSaveId);\n        const serialized = storage.getItem(paneGroupKey);\n        const parsed = JSON.parse(serialized || \"\");\n        if (typeof parsed === \"object\" && parsed !== null) {\n            return parsed;\n        }\n    }\n    catch {\n        // noop\n    }\n    return null;\n}\n/**\n * Loads the pane group state from local storage.\n * If the state is not found, returns null.\n */\nexport function loadPaneGroupState(autoSaveId, panes, storage) {\n    const state = loadSerializedPaneGroupState(autoSaveId, storage) || {};\n    const paneKey = getPaneKey(panes);\n    return state[paneKey] || null;\n}\n/**\n * Saves the pane group state to local storage.\n */\nexport function savePaneGroupState(autoSaveId, panes, paneSizesBeforeCollapse, sizes, storage) {\n    const paneGroupKey = getPaneGroupKey(autoSaveId);\n    const paneKey = getPaneKey(panes);\n    const state = loadSerializedPaneGroupState(autoSaveId, storage) || {};\n    state[paneKey] = {\n        expandToSizes: Object.fromEntries(paneSizesBeforeCollapse.entries()),\n        layout: sizes,\n    };\n    try {\n        storage.setItem(paneGroupKey, JSON.stringify(state));\n    }\n    catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n    }\n}\nconst debounceMap = {};\n/**\n * Returns a debounced version of the given function.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction debounce(callback, durationMs = 10) {\n    let timeoutId = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const callable = (...args) => {\n        if (timeoutId !== null) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(() => {\n            callback(...args);\n        }, durationMs);\n    };\n    return callable;\n}\n/**\n * Updates the values in local storage based on the current state of\n * the pane group.\n * This function is debounced to limit the frequency of local storage writes.\n */\nexport function updateStorageValues({ autoSaveId, layout, storage, paneDataArrayStore, paneSizeBeforeCollapseStore, }) {\n    const $paneDataArray = get(paneDataArrayStore);\n    // If this pane has been configured to persist sizing\n    // information, save sizes to local storage.\n    if (layout.length === 0 || layout.length !== $paneDataArray.length)\n        return;\n    let debouncedSave = debounceMap[autoSaveId];\n    // Limit frequency of local storage writes.\n    if (debouncedSave == null) {\n        debouncedSave = debounce(savePaneGroupState, LOCAL_STORAGE_DEBOUNCE_INTERVAL);\n        debounceMap[autoSaveId] = debouncedSave;\n    }\n    // Clone mutable data before passing to the debounced function,\n    // else we run the risk of saving an incorrect combination of mutable and immutable values to state.\n    const clonedPaneDataArray = [...$paneDataArray];\n    const $paneSizeBeforeCollapse = get(paneSizeBeforeCollapseStore);\n    const clonedPaneSizesBeforeCollapse = new Map($paneSizeBeforeCollapse);\n    debouncedSave(autoSaveId, clonedPaneDataArray, clonedPaneSizesBeforeCollapse, layout, storage);\n}\n","/**\n * Removes all undefined properties from the given object.\n */\nexport function removeUndefined(obj) {\n    const result = {};\n    for (const key in obj) {\n        const value = obj[key];\n        if (value !== undefined) {\n            result[key] = value;\n        }\n    }\n    return result;\n}\n","import { PRECISION } from \"../constants.js\";\n/**\n * Compares two numbers for equality with a given fractional precision.\n */\nexport function areNumbersAlmostEqual(actual, expected, fractionDigits = PRECISION) {\n    return compareNumbersWithTolerance(actual, expected, fractionDigits) === 0;\n}\n/**\n * Compares two numbers with a given tolerance.\n *\n * @returns `-1` if `actual` is less than `expected`, `0` if they are equal,\n * and `1` if `actual` is greater than `expected`.\n */\nexport function compareNumbersWithTolerance(actual, expected, fractionDigits = PRECISION) {\n    const roundedActual = roundTo(actual, fractionDigits);\n    const roundedExpected = roundTo(expected, fractionDigits);\n    return Math.sign(roundedActual - roundedExpected);\n}\n/**\n * Compares two arrays for equality.\n */\nexport function areArraysEqual(arrA, arrB) {\n    if (arrA.length !== arrB.length)\n        return false;\n    for (let index = 0; index < arrA.length; index++) {\n        if (arrA[index] !== arrB[index])\n            return false;\n    }\n    return true;\n}\n/**\n * Rounds a number to a given number of decimal places.\n */\nfunction roundTo(value, decimals) {\n    return parseFloat(value.toFixed(decimals));\n}\n","export function assert(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexpectedCondition, message = \"Assertion failed!\") {\n    if (!expectedCondition) {\n        // eslint-disable-next-line no-console\n        console.error(message);\n        throw Error(message);\n    }\n}\n","import { PRECISION } from \"../constants.js\";\nimport { assert } from \"./assert.js\";\nimport { compareNumbersWithTolerance } from \"./compare.js\";\n/**\n * Resizes a pane based on its constraints.\n */\nexport function resizePane({ paneConstraints: paneConstraintsArray, paneIndex, initialSize, }) {\n    const paneConstraints = paneConstraintsArray[paneIndex];\n    assert(paneConstraints != null, \"Pane constraints should not be null.\");\n    const { collapsedSize = 0, collapsible, maxSize = 100, minSize = 0 } = paneConstraints;\n    let newSize = initialSize;\n    if (compareNumbersWithTolerance(newSize, minSize) < 0) {\n        newSize = getAdjustedSizeForCollapsible(newSize, collapsible, collapsedSize, minSize);\n    }\n    newSize = Math.min(maxSize, newSize);\n    return parseFloat(newSize.toFixed(PRECISION));\n}\n/**\n * Adjusts the size of a pane based on its collapsible state.\n *\n * If the pane is collapsible, the size will be snapped to the collapsed size\n * or the minimum size based on the halfway point.\n */\nfunction getAdjustedSizeForCollapsible(size, collapsible, collapsedSize, minSize) {\n    if (!collapsible)\n        return minSize;\n    // Snap collapsible panes closed or open based on the halfway point.\n    const halfwayPoint = (collapsedSize + minSize) / 2;\n    return compareNumbersWithTolerance(size, halfwayPoint) < 0 ? collapsedSize : minSize;\n}\n","import { assert } from \"./assert.js\";\nimport { compareNumbersWithTolerance, areNumbersAlmostEqual, resizePane, } from \"./index.js\";\n/**\n * Adjusts the layout of panes based on the delta of the resize handle.\n * All units must be in percentages; pixel values should be pre-converted.\n *\n * Credit: https://github.com/bvaughn/react-resizable-panels\n */\nexport function adjustLayoutByDelta({ delta, layout: prevLayout, paneConstraints: paneConstraintsArray, pivotIndices, trigger, }) {\n    if (areNumbersAlmostEqual(delta, 0))\n        return prevLayout;\n    const nextLayout = [...prevLayout];\n    const [firstPivotIndex, secondPivotIndex] = pivotIndices;\n    let deltaApplied = 0;\n    // A resizing pane affects the panes before or after it.\n    //\n    // A negative delta means the pane(s) immediately after the resize handle should grow/expand by decreasing its offset.\n    // Other panes may also need to shrink/contract (and shift) to make room, depending on the min weights.\n    //\n    // A positive delta means the pane(s) immediately before the resize handle should \"expand\".\n    // This is accomplished by shrinking/contracting (and shifting) one or more of the panes after the resize handle.\n    {\n        // If this is a resize triggered by a keyboard event, our logic for expanding/collapsing is different.\n        // We no longer check the halfway threshold because this may prevent the pane from expanding at all.\n        if (trigger === \"keyboard\") {\n            {\n                // Check if we should expand a collapsed pane\n                const index = delta < 0 ? secondPivotIndex : firstPivotIndex;\n                const paneConstraints = paneConstraintsArray[index];\n                assert(paneConstraints);\n                if (paneConstraints.collapsible) {\n                    const prevSize = prevLayout[index];\n                    assert(prevSize != null);\n                    const paneConstraints = paneConstraintsArray[index];\n                    assert(paneConstraints);\n                    const { collapsedSize = 0, minSize = 0 } = paneConstraints;\n                    if (areNumbersAlmostEqual(prevSize, collapsedSize)) {\n                        const localDelta = minSize - prevSize;\n                        //DEBUG.push(`  -> expand delta: ${localDelta}`);\n                        if (compareNumbersWithTolerance(localDelta, Math.abs(delta)) > 0) {\n                            delta = delta < 0 ? 0 - localDelta : localDelta;\n                            //DEBUG.push(`  -> delta: ${delta}`);\n                        }\n                    }\n                }\n            }\n            {\n                // Check if we should collapse a pane at its minimum size\n                const index = delta < 0 ? firstPivotIndex : secondPivotIndex;\n                const paneConstraints = paneConstraintsArray[index];\n                assert(paneConstraints);\n                const { collapsible } = paneConstraints;\n                if (collapsible) {\n                    const prevSize = prevLayout[index];\n                    assert(prevSize != null);\n                    const paneConstraints = paneConstraintsArray[index];\n                    assert(paneConstraints);\n                    const { collapsedSize = 0, minSize = 0 } = paneConstraints;\n                    if (areNumbersAlmostEqual(prevSize, minSize)) {\n                        const localDelta = prevSize - collapsedSize;\n                        if (compareNumbersWithTolerance(localDelta, Math.abs(delta)) > 0) {\n                            delta = delta < 0 ? 0 - localDelta : localDelta;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    {\n        // Pre-calculate max available delta in the opposite direction of our pivot.\n        // This will be the maximum amount we're allowed to expand/contract the panes in the primary direction.\n        // If this amount is less than the requested delta, adjust the requested delta.\n        // If this amount is greater than the requested delta, that's useful information too–\n        // as an expanding pane might change from collapsed to min size.\n        const increment = delta < 0 ? 1 : -1;\n        let index = delta < 0 ? secondPivotIndex : firstPivotIndex;\n        let maxAvailableDelta = 0;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const prevSize = prevLayout[index];\n            assert(prevSize != null);\n            const maxSafeSize = resizePane({\n                paneConstraints: paneConstraintsArray,\n                paneIndex: index,\n                initialSize: 100,\n            });\n            const delta = maxSafeSize - prevSize;\n            maxAvailableDelta += delta;\n            index += increment;\n            if (index < 0 || index >= paneConstraintsArray.length) {\n                break;\n            }\n        }\n        const minAbsDelta = Math.min(Math.abs(delta), Math.abs(maxAvailableDelta));\n        delta = delta < 0 ? 0 - minAbsDelta : minAbsDelta;\n    }\n    {\n        // Delta added to a pane needs to be subtracted from other panes (within the constraints that those panes allow).\n        const pivotIndex = delta < 0 ? firstPivotIndex : secondPivotIndex;\n        let index = pivotIndex;\n        while (index >= 0 && index < paneConstraintsArray.length) {\n            const deltaRemaining = Math.abs(delta) - Math.abs(deltaApplied);\n            const prevSize = prevLayout[index];\n            assert(prevSize != null);\n            const unsafeSize = prevSize - deltaRemaining;\n            const safeSize = resizePane({\n                paneConstraints: paneConstraintsArray,\n                paneIndex: index,\n                initialSize: unsafeSize,\n            });\n            if (!areNumbersAlmostEqual(prevSize, safeSize)) {\n                deltaApplied += prevSize - safeSize;\n                nextLayout[index] = safeSize;\n                if (deltaApplied.toPrecision(3).localeCompare(Math.abs(delta).toPrecision(3), undefined, {\n                    numeric: true,\n                }) >= 0) {\n                    break;\n                }\n            }\n            if (delta < 0) {\n                index--;\n            }\n            else {\n                index++;\n            }\n        }\n    }\n    // If we were unable to resize any of the panes, return the previous state.\n    // This will essentially bailout and ignore e.g. drags past a pane's boundaries\n    if (areNumbersAlmostEqual(deltaApplied, 0)) {\n        return prevLayout;\n    }\n    {\n        // Now distribute the applied delta to the panes in the other direction\n        const pivotIndex = delta < 0 ? secondPivotIndex : firstPivotIndex;\n        const prevSize = prevLayout[pivotIndex];\n        assert(prevSize != null);\n        const unsafeSize = prevSize + deltaApplied;\n        const safeSize = resizePane({\n            paneConstraints: paneConstraintsArray,\n            paneIndex: pivotIndex,\n            initialSize: unsafeSize,\n        });\n        // Adjust the pivot pane before, but only by the amount that surrounding panes were able to shrink/contract.\n        nextLayout[pivotIndex] = safeSize;\n        // Edge case where expanding or contracting one pane caused another one to change collapsed state\n        if (!areNumbersAlmostEqual(safeSize, unsafeSize)) {\n            let deltaRemaining = unsafeSize - safeSize;\n            const pivotIndex = delta < 0 ? secondPivotIndex : firstPivotIndex;\n            let index = pivotIndex;\n            while (index >= 0 && index < paneConstraintsArray.length) {\n                const prevSize = nextLayout[index];\n                assert(prevSize != null);\n                const unsafeSize = prevSize + deltaRemaining;\n                const safeSize = resizePane({\n                    paneConstraints: paneConstraintsArray,\n                    paneIndex: index,\n                    initialSize: unsafeSize,\n                });\n                if (!areNumbersAlmostEqual(prevSize, safeSize)) {\n                    deltaRemaining -= safeSize - prevSize;\n                    nextLayout[index] = safeSize;\n                }\n                if (areNumbersAlmostEqual(deltaRemaining, 0))\n                    break;\n                delta > 0 ? index-- : index++;\n            }\n        }\n    }\n    const totalSize = nextLayout.reduce((total, size) => size + total, 0);\n    if (!areNumbersAlmostEqual(totalSize, 100))\n        return prevLayout;\n    return nextLayout;\n}\n","export const isBrowser = typeof document !== \"undefined\";\nexport function isHTMLElement(element) {\n    return element instanceof HTMLElement;\n}\nexport function isKeyDown(event) {\n    return event.type === \"keydown\";\n}\nexport function isMouseEvent(event) {\n    return event.type.startsWith(\"mouse\");\n}\nexport function isTouchEvent(event) {\n    return event.type.startsWith(\"touch\");\n}\n","import { initializeStorage, loadPaneGroupState, resizePane, resetGlobalCursorStyle, setGlobalCursorStyle, updateStorageValues, adjustLayoutByDelta, areNumbersAlmostEqual, areArraysEqual, generateId, removeUndefined, clientEffect, toWritableStores, calculateAriaValues, addEventListener, computePaneFlexBoxStyle, styleToString, isBrowser, isHTMLElement, isKeyDown, isMouseEvent, isTouchEvent, } from \"./utils/index.js\";\nimport { derived, get, writable } from \"svelte/store\";\nimport { assert } from \"./utils/assert.js\";\nimport { onMount } from \"svelte\";\nexport const defaultStorage = {\n    getItem: (name) => {\n        initializeStorage(defaultStorage);\n        return defaultStorage.getItem(name);\n    },\n    setItem: (name, value) => {\n        initializeStorage(defaultStorage);\n        defaultStorage.setItem(name, value);\n    },\n};\nconst defaultProps = {\n    id: null,\n    onLayout: null,\n    keyboardResizeBy: null,\n    autoSaveId: null,\n    direction: \"horizontal\",\n    storage: defaultStorage,\n};\nexport function createPaneForge(props) {\n    const withDefaults = {\n        ...defaultProps,\n        ...removeUndefined(props),\n    };\n    const options = toWritableStores(withDefaults);\n    const { autoSaveId, direction, keyboardResizeBy, storage, onLayout } = options;\n    const groupId = writable(generateId());\n    const dragState = writable(null);\n    const layout = writable([]);\n    const paneDataArray = writable([]);\n    const paneDataArrayChanged = writable(false);\n    const paneIdToLastNotifiedSizeMap = writable({});\n    const paneSizeBeforeCollapseMap = writable(new Map());\n    const prevDelta = writable(0);\n    clientEffect([groupId, layout, paneDataArray], ([$groupId, $layout, $paneDataArray]) => {\n        const unsub = updateResizeHandleAriaValues({\n            groupId: $groupId,\n            layout: $layout,\n            paneDataArray: $paneDataArray,\n        });\n        return unsub;\n    });\n    onMount(() => {\n        const unsub = setResizeHandlerEventListeners();\n        return unsub;\n    });\n    clientEffect([autoSaveId, layout, storage], ([$autoSaveId, $layout, $storage]) => {\n        if (!$autoSaveId)\n            return;\n        updateStorageValues({\n            autoSaveId: $autoSaveId,\n            layout: $layout,\n            storage: $storage,\n            paneDataArrayStore: paneDataArray,\n            paneSizeBeforeCollapseStore: paneSizeBeforeCollapseMap,\n        });\n    });\n    function collapsePane(paneData) {\n        const $prevLayout = get(layout);\n        const $paneDataArray = get(paneDataArray);\n        if (!paneData.constraints.collapsible)\n            return;\n        const paneConstraintsArray = $paneDataArray.map((paneData) => paneData.constraints);\n        const { collapsedSize = 0, paneSize, pivotIndices, } = paneDataHelper($paneDataArray, paneData, $prevLayout);\n        assert(paneSize != null);\n        if (paneSize === collapsedSize)\n            return;\n        // Store the size before collapse, which is returned when `expand()` is called\n        paneSizeBeforeCollapseMap.update((curr) => {\n            curr.set(paneData.id, paneSize);\n            return curr;\n        });\n        const isLastPane = findPaneDataIndex($paneDataArray, paneData) === $paneDataArray.length - 1;\n        const delta = isLastPane ? paneSize - collapsedSize : collapsedSize - paneSize;\n        const nextLayout = adjustLayoutByDelta({\n            delta,\n            layout: $prevLayout,\n            paneConstraints: paneConstraintsArray,\n            pivotIndices,\n            trigger: \"imperative-api\",\n        });\n        if (areArraysEqual($prevLayout, nextLayout))\n            return;\n        layout.set(nextLayout);\n        const $onLayout = get(onLayout);\n        if ($onLayout) {\n            $onLayout(nextLayout);\n        }\n        callPaneCallbacks($paneDataArray, nextLayout, get(paneIdToLastNotifiedSizeMap));\n    }\n    function getPaneSize(paneData) {\n        const $layout = get(layout);\n        const $paneDataArray = get(paneDataArray);\n        const { paneSize } = paneDataHelper($paneDataArray, paneData, $layout);\n        return paneSize;\n    }\n    const getPaneStyle = derived([paneDataArray, layout, dragState], ([$paneDataArray, $layout, $dragState]) => {\n        return (paneData, defaultSize) => {\n            const paneIndex = findPaneDataIndex($paneDataArray, paneData);\n            return computePaneFlexBoxStyle({\n                defaultSize,\n                dragState: $dragState,\n                layout: $layout,\n                paneData: $paneDataArray,\n                paneIndex,\n            });\n        };\n    });\n    function isPaneExpanded(paneData) {\n        const $paneDataArray = get(paneDataArray);\n        const $layout = get(layout);\n        const { collapsedSize = 0, collapsible, paneSize, } = paneDataHelper($paneDataArray, paneData, $layout);\n        return !collapsible || paneSize > collapsedSize;\n    }\n    function registerPane(paneData) {\n        paneDataArray.update((curr) => {\n            const newArr = [...curr, paneData];\n            newArr.sort((paneA, paneB) => {\n                const orderA = paneA.order;\n                const orderB = paneB.order;\n                if (orderA == null && orderB == null) {\n                    return 0;\n                }\n                else if (orderA == null) {\n                    return -1;\n                }\n                else if (orderB == null) {\n                    return 1;\n                }\n                else {\n                    return orderA - orderB;\n                }\n            });\n            return newArr;\n        });\n        paneDataArrayChanged.set(true);\n    }\n    clientEffect([paneDataArrayChanged], ([$paneDataArrayChanged]) => {\n        if (!$paneDataArrayChanged)\n            return;\n        paneDataArrayChanged.set(false);\n        const $autoSaveId = get(autoSaveId);\n        const $storage = get(storage);\n        const $prevLayout = get(layout);\n        const $paneDataArray = get(paneDataArray);\n        // If this pane has been configured to persist sizing information,\n        // default size should be restored from local storage if possible.\n        let unsafeLayout = null;\n        if ($autoSaveId) {\n            const state = loadPaneGroupState($autoSaveId, $paneDataArray, $storage);\n            if (state) {\n                paneSizeBeforeCollapseMap.set(new Map(Object.entries(state.expandToSizes)));\n                unsafeLayout = state.layout;\n            }\n        }\n        if (unsafeLayout == null) {\n            unsafeLayout = getUnsafeDefaultLayout({\n                paneDataArray: $paneDataArray,\n            });\n        }\n        // Validate even saved layouts in case something has changed since last render\n        const nextLayout = validatePaneGroupLayout({\n            layout: unsafeLayout,\n            paneConstraints: $paneDataArray.map((paneData) => paneData.constraints),\n        });\n        if (areArraysEqual($prevLayout, nextLayout))\n            return;\n        layout.set(nextLayout);\n        const $onLayout = get(onLayout);\n        if ($onLayout) {\n            $onLayout(nextLayout);\n        }\n        callPaneCallbacks($paneDataArray, nextLayout, get(paneIdToLastNotifiedSizeMap));\n    });\n    function registerResizeHandle(dragHandleId) {\n        return function resizeHandler(event) {\n            event.preventDefault();\n            const $direction = get(direction);\n            const $dragState = get(dragState);\n            const $groupId = get(groupId);\n            const $keyboardResizeBy = get(keyboardResizeBy);\n            const $prevLayout = get(layout);\n            const $paneDataArray = get(paneDataArray);\n            const { initialLayout } = $dragState ?? {};\n            const pivotIndices = getPivotIndices($groupId, dragHandleId);\n            let delta = getDeltaPercentage(event, dragHandleId, $direction, $dragState, $keyboardResizeBy);\n            if (delta === 0)\n                return;\n            // support RTL\n            const isHorizontal = $direction === \"horizontal\";\n            if (document.dir === \"rtl\" && isHorizontal) {\n                delta = -delta;\n            }\n            const paneConstraints = $paneDataArray.map((paneData) => paneData.constraints);\n            const nextLayout = adjustLayoutByDelta({\n                delta,\n                layout: initialLayout ?? $prevLayout,\n                paneConstraints: paneConstraints,\n                pivotIndices,\n                trigger: isKeyDown(event) ? \"keyboard\" : \"mouse-or-touch\",\n            });\n            const layoutChanged = !areArraysEqual($prevLayout, nextLayout);\n            // Only update the cursor for layout changes triggered by touch/mouse events (not keyboard)\n            // Update the cursor even if the layout hasn't changed (we may need to show an invalid cursor state)\n            if (isMouseEvent(event) || isTouchEvent(event)) {\n                // Watch for multiple subsequent deltas; this might occur for tiny cursor movements.\n                // In this case, Pane sizes might not change–\n                // but updating cursor in this scenario would cause a flicker.\n                const $prevDelta = get(prevDelta);\n                if ($prevDelta != delta) {\n                    prevDelta.set(delta);\n                    if (!layoutChanged) {\n                        // If the pointer has moved too far to resize the pane any further,\n                        // update the cursor style for a visual clue.\n                        // This mimics VS Code behavior.\n                        if (isHorizontal) {\n                            setGlobalCursorStyle(delta < 0 ? \"horizontal-min\" : \"horizontal-max\");\n                        }\n                        else {\n                            setGlobalCursorStyle(delta < 0 ? \"vertical-min\" : \"vertical-max\");\n                        }\n                    }\n                    else {\n                        setGlobalCursorStyle(isHorizontal ? \"horizontal\" : \"vertical\");\n                    }\n                }\n            }\n            if (layoutChanged) {\n                layout.set(nextLayout);\n                const $onLayout = get(onLayout);\n                if ($onLayout) {\n                    $onLayout(nextLayout);\n                }\n                callPaneCallbacks($paneDataArray, nextLayout, get(paneIdToLastNotifiedSizeMap));\n            }\n        };\n    }\n    function resizePane(paneData, unsafePaneSize) {\n        const $prevLayout = get(layout);\n        const $paneDataArray = get(paneDataArray);\n        const paneConstraintsArr = $paneDataArray.map((paneData) => paneData.constraints);\n        const { paneSize, pivotIndices } = paneDataHelper($paneDataArray, paneData, $prevLayout);\n        assert(paneSize != null);\n        const isLastPane = findPaneDataIndex($paneDataArray, paneData) === $paneDataArray.length - 1;\n        const delta = isLastPane ? paneSize - unsafePaneSize : unsafePaneSize - paneSize;\n        const nextLayout = adjustLayoutByDelta({\n            delta,\n            layout: $prevLayout,\n            paneConstraints: paneConstraintsArr,\n            pivotIndices,\n            trigger: \"imperative-api\",\n        });\n        if (areArraysEqual($prevLayout, nextLayout))\n            return;\n        layout.set(nextLayout);\n        const $onLayout = get(onLayout);\n        $onLayout?.(nextLayout);\n        callPaneCallbacks($paneDataArray, nextLayout, get(paneIdToLastNotifiedSizeMap));\n    }\n    function startDragging(dragHandleId, event) {\n        const $direction = get(direction);\n        const $layout = get(layout);\n        const handleElement = getResizeHandleElement(dragHandleId);\n        assert(handleElement);\n        const initialCursorPosition = getResizeEventCursorPosition($direction, event);\n        dragState.set({\n            dragHandleId,\n            dragHandleRect: handleElement.getBoundingClientRect(),\n            initialCursorPosition,\n            initialLayout: $layout,\n        });\n    }\n    function stopDragging() {\n        resetGlobalCursorStyle();\n        dragState.set(null);\n    }\n    function unregisterPane(paneData) {\n        const $paneDataArray = get(paneDataArray);\n        const index = findPaneDataIndex($paneDataArray, paneData);\n        if (index < 0)\n            return;\n        paneDataArray.update((curr) => {\n            curr.splice(index, 1);\n            paneIdToLastNotifiedSizeMap.update((curr) => {\n                delete curr[paneData.id];\n                return curr;\n            });\n            paneDataArrayChanged.set(true);\n            return curr;\n        });\n    }\n    function isPaneCollapsed(paneData) {\n        const $paneDataArray = get(paneDataArray);\n        const $layout = get(layout);\n        const { collapsedSize = 0, collapsible, paneSize, } = paneDataHelper($paneDataArray, paneData, $layout);\n        return collapsible === true && paneSize === collapsedSize;\n    }\n    function expandPane(paneData) {\n        const $prevLayout = get(layout);\n        const $paneDataArray = get(paneDataArray);\n        if (!paneData.constraints.collapsible)\n            return;\n        const paneConstraintsArray = $paneDataArray.map((paneData) => paneData.constraints);\n        const { collapsedSize = 0, paneSize, minSize = 0, pivotIndices, } = paneDataHelper($paneDataArray, paneData, $prevLayout);\n        if (paneSize !== collapsedSize)\n            return;\n        // Restore this pane to the size it was before it was collapsed, if possible.\n        const prevPaneSize = get(paneSizeBeforeCollapseMap).get(paneData.id);\n        const baseSize = prevPaneSize != null && prevPaneSize >= minSize ? prevPaneSize : minSize;\n        const isLastPane = findPaneDataIndex($paneDataArray, paneData) === $paneDataArray.length - 1;\n        const delta = isLastPane ? paneSize - baseSize : baseSize - paneSize;\n        const nextLayout = adjustLayoutByDelta({\n            delta,\n            layout: $prevLayout,\n            paneConstraints: paneConstraintsArray,\n            pivotIndices,\n            trigger: \"imperative-api\",\n        });\n        if (areArraysEqual($prevLayout, nextLayout))\n            return;\n        layout.set(nextLayout);\n        const $onLayout = get(onLayout);\n        $onLayout?.(nextLayout);\n        callPaneCallbacks($paneDataArray, nextLayout, get(paneIdToLastNotifiedSizeMap));\n    }\n    const paneGroupStyle = derived([direction], ([$direction]) => {\n        return styleToString({\n            display: \"flex\",\n            \"flex-direction\": $direction === \"horizontal\" ? \"row\" : \"column\",\n            height: \"100%\",\n            overflow: \"hidden\",\n            width: \"100%\",\n        });\n    });\n    const paneGroupSelectors = derived([direction, groupId], ([$direction, $groupId]) => {\n        return {\n            \"data-pane-group\": \"\",\n            \"data-direction\": $direction,\n            \"data-pane-group-id\": $groupId,\n        };\n    });\n    const paneGroupAttrs = derived([paneGroupStyle, paneGroupSelectors], ([$style, $selectors]) => {\n        return {\n            style: $style,\n            ...$selectors,\n        };\n    });\n    function setResizeHandlerEventListeners() {\n        const $groupId = get(groupId);\n        const handles = getResizeHandleElementsForGroup($groupId);\n        const unsubHandlers = handles.map((handle) => {\n            const handleId = handle.getAttribute(\"data-pane-resizer-id\");\n            if (!handleId)\n                return noop;\n            const [idBefore, idAfter] = getResizeHandlePaneIds($groupId, handleId, get(paneDataArray));\n            if (idBefore == null || idAfter == null)\n                return noop;\n            const onKeydown = (e) => {\n                if (e.defaultPrevented || e.key !== \"Enter\")\n                    return;\n                e.preventDefault();\n                const $paneDataArray = get(paneDataArray);\n                const index = $paneDataArray.findIndex((paneData) => paneData.id === idBefore);\n                if (index < 0)\n                    return;\n                const paneData = $paneDataArray[index];\n                assert(paneData);\n                const $layout = get(layout);\n                const size = $layout[index];\n                const { collapsedSize = 0, collapsible, minSize = 0 } = paneData.constraints;\n                if (!(size != null && collapsible))\n                    return;\n                const nextLayout = adjustLayoutByDelta({\n                    delta: areNumbersAlmostEqual(size, collapsedSize) ? minSize - size : collapsedSize - size,\n                    layout: $layout,\n                    paneConstraints: $paneDataArray.map((paneData) => paneData.constraints),\n                    pivotIndices: getPivotIndices($groupId, handleId),\n                    trigger: \"keyboard\",\n                });\n                if ($layout !== nextLayout) {\n                    layout.set(nextLayout);\n                }\n            };\n            const unsubListener = addEventListener(handle, \"keydown\", onKeydown);\n            return () => {\n                unsubListener();\n            };\n        });\n        return () => {\n            unsubHandlers.forEach((unsub) => unsub());\n        };\n    }\n    function setLayout(newLayout) {\n        layout.set(newLayout);\n    }\n    function getLayout() {\n        return get(layout);\n    }\n    return {\n        methods: {\n            collapsePane,\n            expandPane,\n            getSize: getPaneSize,\n            getPaneStyle,\n            isCollapsed: isPaneCollapsed,\n            isExpanded: isPaneExpanded,\n            registerPane,\n            registerResizeHandle,\n            resizePane,\n            startDragging,\n            stopDragging,\n            unregisterPane,\n            setLayout,\n            getLayout,\n        },\n        states: {\n            direction,\n            dragState,\n            groupId,\n            paneGroupAttrs,\n            paneGroupSelectors,\n            paneGroupStyle,\n            layout,\n        },\n        options,\n    };\n}\nfunction updateResizeHandleAriaValues({ groupId, layout, paneDataArray, }) {\n    const resizeHandleElements = getResizeHandleElementsForGroup(groupId);\n    for (let index = 0; index < paneDataArray.length - 1; index++) {\n        const { valueMax, valueMin, valueNow } = calculateAriaValues({\n            layout,\n            panesArray: paneDataArray,\n            pivotIndices: [index, index + 1],\n        });\n        const resizeHandleEl = resizeHandleElements[index];\n        if (isHTMLElement(resizeHandleEl)) {\n            const paneData = paneDataArray[index];\n            resizeHandleEl.setAttribute(\"aria-controls\", paneData.id);\n            resizeHandleEl.setAttribute(\"aria-valuemax\", \"\" + Math.round(valueMax));\n            resizeHandleEl.setAttribute(\"aria-valuemin\", \"\" + Math.round(valueMin));\n            resizeHandleEl.setAttribute(\"aria-valuenow\", valueNow != null ? \"\" + Math.round(valueNow) : \"\");\n        }\n    }\n    return () => {\n        resizeHandleElements.forEach((resizeHandleElement) => {\n            resizeHandleElement.removeAttribute(\"aria-controls\");\n            resizeHandleElement.removeAttribute(\"aria-valuemax\");\n            resizeHandleElement.removeAttribute(\"aria-valuemin\");\n            resizeHandleElement.removeAttribute(\"aria-valuenow\");\n        });\n    };\n}\nexport function getResizeHandleElementsForGroup(groupId) {\n    if (!isBrowser)\n        return [];\n    return Array.from(document.querySelectorAll(`[data-pane-resizer-id][data-pane-group-id=\"${groupId}\"]`));\n}\nfunction getPaneGroupElement(id) {\n    if (!isBrowser)\n        return null;\n    const element = document.querySelector(`[data-pane-group][data-pane-group-id=\"${id}\"]`);\n    if (element) {\n        return element;\n    }\n    return null;\n}\nfunction noop() {\n    // do nothing\n}\nexport function getResizeHandlePaneIds(groupId, handleId, panesArray) {\n    const handle = getResizeHandleElement(handleId);\n    const handles = getResizeHandleElementsForGroup(groupId);\n    const index = handle ? handles.indexOf(handle) : -1;\n    const idBefore = panesArray[index]?.id ?? null;\n    const idAfter = panesArray[index + 1]?.id ?? null;\n    return [idBefore, idAfter];\n}\nexport function getResizeHandleElement(id) {\n    if (!isBrowser)\n        return null;\n    const element = document.querySelector(`[data-pane-resizer-id=\"${id}\"]`);\n    if (element) {\n        return element;\n    }\n    return null;\n}\nexport function getResizeHandleElementIndex(groupId, id) {\n    if (!isBrowser)\n        return null;\n    const handles = getResizeHandleElementsForGroup(groupId);\n    const index = handles.findIndex((handle) => handle.getAttribute(\"data-pane-resizer-id\") === id);\n    return index ?? null;\n}\nfunction getPivotIndices(groupId, dragHandleId) {\n    const index = getResizeHandleElementIndex(groupId, dragHandleId);\n    return index != null ? [index, index + 1] : [-1, -1];\n}\nfunction paneDataHelper(paneDataArray, paneData, layout) {\n    const paneConstraintsArray = paneDataArray.map((paneData) => paneData.constraints);\n    const paneIndex = findPaneDataIndex(paneDataArray, paneData);\n    const paneConstraints = paneConstraintsArray[paneIndex];\n    const isLastPane = paneIndex === paneDataArray.length - 1;\n    const pivotIndices = isLastPane ? [paneIndex - 1, paneIndex] : [paneIndex, paneIndex + 1];\n    const paneSize = layout[paneIndex];\n    return {\n        ...paneConstraints,\n        paneSize,\n        pivotIndices,\n    };\n}\nfunction findPaneDataIndex(paneDataArray, paneData) {\n    return paneDataArray.findIndex((prevPaneData) => prevPaneData.id === paneData.id);\n}\n// Layout should be pre-converted into percentages\nfunction callPaneCallbacks(paneArray, layout, paneIdToLastNotifiedSizeMap) {\n    layout.forEach((size, index) => {\n        const paneData = paneArray[index];\n        assert(paneData);\n        const { callbacks, constraints, id: paneId } = paneData;\n        const { collapsedSize = 0, collapsible } = constraints;\n        const lastNotifiedSize = paneIdToLastNotifiedSizeMap[paneId];\n        // invert the logic from below\n        if (!(lastNotifiedSize == null || size !== lastNotifiedSize))\n            return;\n        paneIdToLastNotifiedSizeMap[paneId] = size;\n        const { onCollapse, onExpand, onResize } = callbacks;\n        onResize?.(size, lastNotifiedSize);\n        if (collapsible && (onCollapse || onExpand)) {\n            if (onExpand &&\n                (lastNotifiedSize == null || lastNotifiedSize === collapsedSize) &&\n                size !== collapsedSize) {\n                onExpand();\n            }\n            if (onCollapse &&\n                (lastNotifiedSize == null || lastNotifiedSize !== collapsedSize) &&\n                size === collapsedSize) {\n                onCollapse();\n            }\n        }\n    });\n}\nfunction getUnsafeDefaultLayout({ paneDataArray }) {\n    const layout = Array(paneDataArray.length);\n    const paneConstraintsArray = paneDataArray.map((paneData) => paneData.constraints);\n    let numPanesWithSizes = 0;\n    let remainingSize = 100;\n    // Distribute default sizes first\n    for (let index = 0; index < paneDataArray.length; index++) {\n        const paneConstraints = paneConstraintsArray[index];\n        assert(paneConstraints);\n        const { defaultSize } = paneConstraints;\n        if (defaultSize != null) {\n            numPanesWithSizes++;\n            layout[index] = defaultSize;\n            remainingSize -= defaultSize;\n        }\n    }\n    // Remaining size should be distributed evenly between panes without default sizes\n    for (let index = 0; index < paneDataArray.length; index++) {\n        const paneConstraints = paneConstraintsArray[index];\n        assert(paneConstraints);\n        const { defaultSize } = paneConstraints;\n        if (defaultSize != null) {\n            continue;\n        }\n        const numRemainingPanes = paneDataArray.length - numPanesWithSizes;\n        const size = remainingSize / numRemainingPanes;\n        numPanesWithSizes++;\n        layout[index] = size;\n        remainingSize -= size;\n    }\n    return layout;\n}\n// All units must be in percentages\nfunction validatePaneGroupLayout({ layout: prevLayout, paneConstraints, }) {\n    const nextLayout = [...prevLayout];\n    const nextLayoutTotalSize = nextLayout.reduce((accumulated, current) => accumulated + current, 0);\n    // Validate layout expectations\n    if (nextLayout.length !== paneConstraints.length) {\n        throw Error(`Invalid ${paneConstraints.length} pane layout: ${nextLayout\n            .map((size) => `${size}%`)\n            .join(\", \")}`);\n    }\n    else if (!areNumbersAlmostEqual(nextLayoutTotalSize, 100)) {\n        for (let index = 0; index < paneConstraints.length; index++) {\n            const unsafeSize = nextLayout[index];\n            assert(unsafeSize != null);\n            const safeSize = (100 / nextLayoutTotalSize) * unsafeSize;\n            nextLayout[index] = safeSize;\n        }\n    }\n    let remainingSize = 0;\n    // First pass: Validate the proposed layout given each pane's constraints\n    for (let index = 0; index < paneConstraints.length; index++) {\n        const unsafeSize = nextLayout[index];\n        assert(unsafeSize != null);\n        const safeSize = resizePane({\n            paneConstraints,\n            paneIndex: index,\n            initialSize: unsafeSize,\n        });\n        if (unsafeSize != safeSize) {\n            remainingSize += unsafeSize - safeSize;\n            nextLayout[index] = safeSize;\n        }\n    }\n    // If there is additional, left over space, assign it to any pane(s) that permits it\n    // (It's not worth taking multiple additional passes to evenly distribute)\n    if (!areNumbersAlmostEqual(remainingSize, 0)) {\n        for (let index = 0; index < paneConstraints.length; index++) {\n            const prevSize = nextLayout[index];\n            assert(prevSize != null);\n            const unsafeSize = prevSize + remainingSize;\n            const safeSize = resizePane({\n                paneConstraints,\n                paneIndex: index,\n                initialSize: unsafeSize,\n            });\n            if (prevSize !== safeSize) {\n                remainingSize -= safeSize - prevSize;\n                nextLayout[index] = safeSize;\n                // Once we've used up the remainder, bail\n                if (areNumbersAlmostEqual(remainingSize, 0)) {\n                    break;\n                }\n            }\n        }\n    }\n    return nextLayout;\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX\nfunction getDeltaPercentage(e, dragHandleId, dir, initialDragState, keyboardResizeBy) {\n    if (isKeyDown(e)) {\n        const isHorizontal = dir === \"horizontal\";\n        let delta = 0;\n        if (e.shiftKey) {\n            delta = 100;\n        }\n        else if (keyboardResizeBy != null) {\n            delta = keyboardResizeBy;\n        }\n        else {\n            delta = 10;\n        }\n        let movement = 0;\n        switch (e.key) {\n            case \"ArrowDown\":\n                movement = isHorizontal ? 0 : delta;\n                break;\n            case \"ArrowLeft\":\n                movement = isHorizontal ? -delta : 0;\n                break;\n            case \"ArrowRight\":\n                movement = isHorizontal ? delta : 0;\n                break;\n            case \"ArrowUp\":\n                movement = isHorizontal ? 0 : -delta;\n                break;\n            case \"End\":\n                movement = 100;\n                break;\n            case \"Home\":\n                movement = -100;\n                break;\n        }\n        return movement;\n    }\n    else {\n        if (initialDragState == null)\n            return 0;\n        return getDragOffsetPercentage(e, dragHandleId, dir, initialDragState);\n    }\n}\nfunction getDragOffsetPercentage(e, dragHandleId, dir, initialDragState) {\n    const isHorizontal = dir === \"horizontal\";\n    const handleElement = getResizeHandleElement(dragHandleId);\n    assert(handleElement);\n    const groupId = handleElement.getAttribute(\"data-pane-group-id\");\n    assert(groupId);\n    const { initialCursorPosition } = initialDragState;\n    const cursorPosition = getResizeEventCursorPosition(dir, e);\n    const groupElement = getPaneGroupElement(groupId);\n    assert(groupElement);\n    const groupRect = groupElement.getBoundingClientRect();\n    const groupSizeInPixels = isHorizontal ? groupRect.width : groupRect.height;\n    const offsetPixels = cursorPosition - initialCursorPosition;\n    const offsetPercentage = (offsetPixels / groupSizeInPixels) * 100;\n    return offsetPercentage;\n}\nfunction getResizeEventCursorPosition(dir, e) {\n    const isHorizontal = dir === \"horizontal\";\n    if (isMouseEvent(e)) {\n        return isHorizontal ? e.clientX : e.clientY;\n    }\n    else if (isTouchEvent(e)) {\n        const firstTouch = e.touches[0];\n        assert(firstTouch);\n        return isHorizontal ? firstTouch.screenX : firstTouch.screenY;\n    }\n    else {\n        throw Error(`Unsupported event type \"${e.type}\"`);\n    }\n}\n","import { createPaneForge } from \"../internal/paneforge.js\";\nimport { getContext, hasContext, setContext } from \"svelte\";\nimport { removeUndefined, getOptionUpdater } from \"../internal/utils/index.js\";\nconst PF_GROUP_CTX = Symbol(\"PF_GROUP_CTX\");\nexport function setCtx(props) {\n    const paneForge = createPaneForge(removeUndefined(props));\n    const updateOption = getOptionUpdater(paneForge.options);\n    const ctxValue = { ...paneForge, updateOption };\n    setContext(PF_GROUP_CTX, ctxValue);\n    return ctxValue;\n}\nexport function getCtx(componentName) {\n    if (!hasContext(PF_GROUP_CTX)) {\n        throw new Error(`${componentName} components must be rendered with a <PaneGroup> container`);\n    }\n    return getContext(PF_GROUP_CTX);\n}\n","<script>import { setCtx } from \"./ctx.js\";\nimport {} from \"../internal/utils/index.js\";\nimport { defaultStorage } from \"../internal/paneforge.js\";\nexport let autoSaveId = null;\nexport let direction;\nexport let id = null;\nexport let keyboardResizeBy = null;\nexport let onLayoutChange = null;\nexport let storage = defaultStorage;\nexport let el = void 0;\nexport let paneGroup = void 0;\nlet styleFromProps = void 0;\nexport { styleFromProps as style };\nconst {\n  states: { paneGroupStyle, paneGroupSelectors, groupId },\n  methods: { setLayout, getLayout },\n  updateOption\n} = setCtx({\n  autoSaveId,\n  direction,\n  id,\n  keyboardResizeBy,\n  onLayout: onLayoutChange,\n  storage\n});\n$:\n  updateOption(\"autoSaveId\", autoSaveId);\n$:\n  updateOption(\"direction\", direction);\n$:\n  updateOption(\"id\", id);\n$:\n  updateOption(\"keyboardResizeBy\", keyboardResizeBy);\n$:\n  updateOption(\"onLayout\", onLayoutChange);\n$:\n  updateOption(\"storage\", storage);\npaneGroup = {\n  getLayout,\n  setLayout,\n  getId: () => $groupId\n};\n$:\n  style = $paneGroupStyle + (styleFromProps ?? \"\");\n</script>\n\n<div bind:this={el} id={$groupId} {...$paneGroupSelectors} {style} {...$$restProps}>\n\t<slot />\n</div>\n","<script>import { generateId } from \"../internal/utils/index.js\";\nimport { onMount } from \"svelte\";\nimport { getCtx } from \"./ctx.js\";\nexport let collapsedSize = void 0;\nexport let collapsible = void 0;\nexport let defaultSize = void 0;\nexport let maxSize = void 0;\nexport let minSize = void 0;\nexport let onCollapse = void 0;\nexport let onExpand = void 0;\nexport let onResize = void 0;\nexport let order = void 0;\nexport let el = void 0;\nexport let pane = void 0;\nlet idFromProps = void 0;\nexport { idFromProps as id };\nlet styleFromProps = void 0;\nexport { styleFromProps as style };\nconst {\n  methods: {\n    getPaneStyle,\n    registerPane,\n    unregisterPane,\n    collapsePane,\n    expandPane,\n    getSize,\n    isCollapsed,\n    isExpanded,\n    resizePane\n  },\n  states: { groupId }\n} = getCtx(\"Pane\");\nconst paneId = generateId(idFromProps);\nlet paneData;\n$:\n  paneData = {\n    callbacks: {\n      onCollapse,\n      onExpand,\n      onResize\n    },\n    constraints: {\n      collapsedSize,\n      collapsible,\n      defaultSize,\n      maxSize,\n      minSize\n    },\n    id: paneId,\n    idIsFromProps: idFromProps !== void 0,\n    order\n  };\npane = {\n  collapse: () => {\n    collapsePane(paneData);\n  },\n  expand: () => expandPane(paneData),\n  getSize: () => getSize(paneData),\n  isCollapsed: () => isCollapsed(paneData),\n  isExpanded: () => isExpanded(paneData),\n  resize: (size) => resizePane(paneData, size),\n  getId: () => paneId\n};\nonMount(() => {\n  registerPane(paneData);\n  return () => {\n    unregisterPane(paneData);\n  };\n});\n$:\n  style = $getPaneStyle(paneData, defaultSize) + (styleFromProps ?? \"\");\n$:\n  attrs = {\n    \"data-pane\": \"\",\n    \"data-pane-id\": paneId,\n    \"data-pane-group-id\": $groupId\n  };\n</script>\n\n<div bind:this={el} {style} {...attrs} {...$$restProps}>\n\t<slot />\n</div>\n","<script lang=\"ts\">\n\timport { showSidebar } from '$lib/stores';\n\timport AddFilesPlaceholder from '$lib/components/AddFilesPlaceholder.svelte';\n\n\texport let show = false;\n\tlet overlayElement = null;\n\n\t$: if (show && overlayElement) {\n\t\tdocument.body.appendChild(overlayElement);\n\t\tdocument.body.style.overflow = 'hidden';\n\t} else if (overlayElement) {\n\t\tdocument.body.removeChild(overlayElement);\n\t\tdocument.body.style.overflow = 'unset';\n\t}\n</script>\n\n{#if show}\n\t<div\n\t\tbind:this={overlayElement}\n\t\tclass=\"fixed {$showSidebar\n\t\t\t? 'left-0 md:left-[260px] md:w-[calc(100%-260px)]'\n\t\t\t: 'left-0'}  fixed top-0 right-0 bottom-0 w-full h-full flex z-9999 touch-none pointer-events-none\"\n\t\tid=\"dropzone\"\n\t\trole=\"region\"\n\t\taria-label=\"Drag and Drop Container\"\n\t>\n\t\t<div class=\"absolute w-full h-full backdrop-blur-sm bg-gray-800/40 flex justify-center\">\n\t\t\t<div class=\"m-auto pt-64 flex flex-col justify-center\">\n\t\t\t\t<div class=\"max-w-md\">\n\t\t\t\t\t<AddFilesPlaceholder />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n{/if}\n","<script lang=\"ts\">\n\timport { onDestroy, onMount, createEventDispatcher } from 'svelte';\n\timport { flyAndScale } from '$lib/utils/transitions';\n\timport { fade, fly, slide } from 'svelte/transition';\n\timport { isApp } from '$lib/stores';\n\n\tconst dispatch = createEventDispatcher();\n\n\texport let show = false;\n\texport let className = '';\n\n\tlet modalElement = null;\n\tlet mounted = false;\n\n\tconst handleKeyDown = (event: KeyboardEvent) => {\n\t\tif (event.key === 'Escape' && isTopModal()) {\n\t\t\tconsole.log('Escape');\n\t\t\tshow = false;\n\t\t}\n\t};\n\n\tconst isTopModal = () => {\n\t\tconst modals = document.getElementsByClassName('modal');\n\t\treturn modals.length && modals[modals.length - 1] === modalElement;\n\t};\n\n\tonMount(() => {\n\t\tmounted = true;\n\t});\n\n\t$: if (show && modalElement) {\n\t\tdocument.body.appendChild(modalElement);\n\t\twindow.addEventListener('keydown', handleKeyDown);\n\t\tdocument.body.style.overflow = 'hidden';\n\t} else if (modalElement) {\n\t\tdispatch('close');\n\t\twindow.removeEventListener('keydown', handleKeyDown);\n\n\t\tif (document.body.contains(modalElement)) {\n\t\t\tdocument.body.removeChild(modalElement);\n\t\t\tdocument.body.style.overflow = 'unset';\n\t\t}\n\t}\n\n\tonDestroy(() => {\n\t\tshow = false;\n\t\tif (modalElement) {\n\t\t\tif (document.body.contains(modalElement)) {\n\t\t\t\tdocument.body.removeChild(modalElement);\n\t\t\t\tdocument.body.style.overflow = 'unset';\n\t\t\t}\n\t\t}\n\t});\n</script>\n\n<!-- svelte-ignore a11y-click-events-have-key-events -->\n<!-- svelte-ignore a11y-no-static-element-interactions -->\n\n<div\n\tbind:this={modalElement}\n\tclass=\"modal fixed right-0 {$isApp\n\t\t? ' ml-[4.5rem] max-w-[calc(100%-4.5rem)]'\n\t\t: ''} left-0 bottom-0 bg-black/60 w-full h-screen max-h-[100dvh] flex justify-center z-999 overflow-hidden overscroll-contain\"\n\tin:fly={{ y: 100, duration: 100 }}\n\ton:mousedown={() => {\n\t\tshow = false;\n\t}}\n>\n\t<div\n\t\tclass=\" mt-auto w-full bg-gray-50 dark:bg-gray-900 dark:text-gray-100 {className} max-h-[100dvh] overflow-y-auto scrollbar-hidden\"\n\t\ton:mousedown={(e) => {\n\t\t\te.stopPropagation();\n\t\t}}\n\t>\n\t\t<slot />\n\t</div>\n</div>\n\n<style>\n\t.modal-content {\n\t\tanimation: scaleUp 0.1s ease-out forwards;\n\t}\n\n\t@keyframes scaleUp {\n\t\tfrom {\n\t\t\ttransform: scale(0.985);\n\t\t\topacity: 0;\n\t\t}\n\t\tto {\n\t\t\ttransform: scale(1);\n\t\t\topacity: 1;\n\t\t}\n\t}\n</style>\n"],"names":["linear","fn","subscribe","stores","get","paneConstraints","delta","pivotIndex","prevSize","unsafeSize","safeSize","element","paneData","resizePane","curr"],"mappings":"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","x_google_ignoreList":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]}