{"version":3,"file":"Markdown.js","sources":["../../../../src/lib/components/common/Loader.svelte","../../../../src/lib/components/icons/Info.svelte","../../../../src/lib/components/common/ExcelViewer.svelte","../../../../src/lib/components/common/FileItemModal.svelte","../../../../src/lib/components/common/FileItem.svelte","../../../../src/lib/components/common/ImagePreview.svelte","../../../../src/lib/components/common/Image.svelte","../../../../src/lib/components/chat/Messages/ProfileImage.svelte","../../../../src/lib/components/common/CodeEditor.svelte","../../../../src/lib/components/icons/Clipboard.svelte","../../../../src/lib/components/icons/Reset.svelte","../../../../src/lib/components/common/SVGPanZoom.svelte","../../../../src/lib/components/chat/Messages/CodeBlock.svelte","../../../../src/lib/utils/marked/extension.ts","../../../../src/lib/utils/marked/katex-extension.ts","../../../../src/lib/components/chat/Messages/Markdown/KatexRenderer.svelte","../../../../src/lib/components/chat/Messages/Markdown/Source.svelte","../../../../src/lib/components/chat/Messages/Markdown/MarkdownInlineTokens.svelte","../../../../src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte","../../../../src/lib/components/chat/Messages/Markdown.svelte"],"sourcesContent":["<script lang=\"ts\">\n\timport { createEventDispatcher, onDestroy, onMount } from 'svelte';\n\tconst dispatch = createEventDispatcher();\n\n\tlet loaderElement: HTMLElement;\n\n\tlet observer;\n\tlet intervalId;\n\n\tonMount(() => {\n\t\tobserver = new IntersectionObserver(\n\t\t\t(entries, observer) => {\n\t\t\t\tentries.forEach((entry) => {\n\t\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\t\tintervalId = setInterval(() => {\n\t\t\t\t\t\t\tdispatch('visible');\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t\t// dispatch('visible');\n\t\t\t\t\t\t// observer.unobserve(loaderElement); // Stop observing until content is loaded\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclearInterval(intervalId);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\t{\n\t\t\t\troot: null, // viewport\n\t\t\t\trootMargin: '0px',\n\t\t\t\tthreshold: 0.1 // When 10% of the loader is visible\n\t\t\t}\n\t\t);\n\n\t\tobserver.observe(loaderElement);\n\t});\n\n\tonDestroy(() => {\n\t\tobserver.disconnect();\n\n\t\tif (intervalId) {\n\t\t\tclearInterval(intervalId);\n\t\t}\n\t});\n</script>\n\n<div bind:this={loaderElement}>\n\t<slot />\n</div>\n","<script lang=\"ts\">\n\texport let className = 'size-4';\n\texport let strokeWidth = '1.5';\n</script>\n\n<svg\n\txmlns=\"http://www.w3.org/2000/svg\"\n\tfill=\"none\"\n\tviewBox=\"0 0 24 24\"\n\tstroke-width={strokeWidth}\n\tstroke=\"currentColor\"\n\tclass={className}\n>\n\t<path\n\t\tstroke-linecap=\"round\"\n\t\tstroke-linejoin=\"round\"\n\t\td=\"m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z\"\n\t/>\n</svg>\n","<script>\n    import { onMount, createEventDispatcher } from 'svelte';\n    import * as XLSX from 'xlsx';\n    \n    export let src = \"\";\n    export let fileName = \"\";\n    export let editable = false; // 是否可编辑\n    \n    let sheets = [];\n    let activeSheetIndex = 0;\n    let isLoading = true;\n    let error = null;\n    let editingCell = null; // 当前正在编辑的单元格\n    let editValue = \"\"; // 编辑框的值\n    let originalWorkbook = null; // 保存原始workbook以便导出\n    let isModified = false; // 新增：跟踪是否有修改\n    let isSaving = false; // 新增：保存状态\n    let saveSuccess = false; // 新增：保存成功状态\n    \n    const dispatch = createEventDispatcher(); // 用于触发数据变更事件\n    \n    function getColumnHeader(index) {\n        let result = '';\n        do {\n            result = String.fromCharCode(65 + (index % 26)) + result;\n            index = Math.floor(index / 26) - 1;\n        } while (index >= 0);\n        return result;\n    }\n\n    function getAuthToken() {\n        return localStorage.getItem('token') || '';\n    }\n    \n    async function loadExcel() {\n        try {\n            isLoading = true;\n            \n            const token = getAuthToken();\n            \n            const response = await fetch(src, {\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json',\n                    'Accept-Language': 'zh-CN'\n                }\n            });\n            \n            if (!response.ok) {\n                throw new Error(`Failed to fetch Excel file: ${response.status} ${response.statusText}`);\n            }\n            \n            const arrayBuffer = await response.arrayBuffer();\n            \n            originalWorkbook = XLSX.read(new Uint8Array(arrayBuffer), { type: 'array' });\n            \n            sheets = originalWorkbook.SheetNames.map(name => {\n                const sheet = originalWorkbook.Sheets[name];\n                const data = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n                \n                // 确保所有行具有相同的列数\n                const maxCols = data.reduce((max, row) => Math.max(max, row?.length || 0), 0);\n                const normalizedData = data.map(row => {\n                    if (!row) return Array(maxCols).fill('');\n                    return [...row, ...Array(maxCols - row.length).fill('')];\n                });\n                \n                const MAX_ROWS = 1000;\n                const rowCount = normalizedData.length;\n                const truncated = rowCount > MAX_ROWS;\n                \n                return {\n                    name,\n                    data: normalizedData.slice(0, MAX_ROWS),\n                    rowCount,\n                    truncated\n                };\n            });\n            \n        } catch (err) {\n            console.error(\"Error loading Excel:\", err);\n            error = err.message;\n        } finally {\n            isLoading = false;\n        }\n    }\n    \n    function switchSheet(index) {\n        // 取消当前编辑\n        editingCell = null;\n        activeSheetIndex = index;\n    }\n    \n    // 开始编辑单元格\n    function startEditing(rowIndex, colIndex, currentValue) {\n        if (!editable) return;\n        editingCell = { rowIndex, colIndex };\n        editValue = currentValue !== undefined && currentValue !== null ? currentValue.toString() : '';\n    }\n    \n    // 保存单元格编辑\n    function saveEdit() {\n        if (!editingCell) return;\n        \n        const { rowIndex, colIndex } = editingCell;\n        \n        // 更新数据\n        if (!sheets[activeSheetIndex].data[rowIndex]) {\n            sheets[activeSheetIndex].data[rowIndex] = [];\n        }\n        \n        // 转换类型：尝试转换为数字，如果不是数字则保持为字符串\n        let valueToSave = editValue;\n        if (!isNaN(editValue) && editValue.trim() !== '') {\n            const num = Number(editValue);\n            if (String(num) === editValue.trim()) {\n                valueToSave = num;\n            }\n        }\n        \n        // 检查值是否真的改变了，如果改变了才标记修改状态\n        if (sheets[activeSheetIndex].data[rowIndex][colIndex] !== valueToSave) {\n            sheets[activeSheetIndex].data[rowIndex][colIndex] = valueToSave;\n            isModified = true; // 标记为已修改\n            \n            // 更新Excel工作表数据\n            updateWorkbookData();\n        }\n        \n        // 退出编辑模式\n        editingCell = null;\n    }\n    \n    // 取消编辑\n    function cancelEdit() {\n        editingCell = null;\n    }\n    \n    // 处理键盘事件\n    function handleKeydown(event) {\n        if (event.key === 'Enter') {\n            saveEdit();\n            event.preventDefault();\n        } else if (event.key === 'Escape') {\n            cancelEdit();\n            event.preventDefault();\n        }\n    }\n    \n    // 更新工作簿数据\n    function updateWorkbookData() {\n        if (!originalWorkbook) return;\n        \n        // 每个sheet的数据\n        sheets.forEach((sheet, sheetIndex) => {\n            // 创建一个新的工作表\n            const ws = XLSX.utils.aoa_to_sheet(sheet.data);\n            // 更新原始工作簿中的工作表\n            originalWorkbook.Sheets[sheet.name] = ws;\n        });\n    }\n    \n    // 触发数据变更事件\n    function dispatchChanges() {\n        if (!originalWorkbook) return;\n        \n        // 转换为二进制\n        const wbout = XLSX.write(originalWorkbook, { bookType: 'xlsx', type: 'array' });\n        \n        // 触发事件，传递二进制数据\n        dispatch('datachange', {\n            data: wbout\n        });\n    }\n    \n    // 下载Excel文件\n    function downloadExcel() {\n        if (!originalWorkbook) return;\n        \n        updateWorkbookData();\n        \n        // 生成二进制数据\n        const wbout = XLSX.write(originalWorkbook, { bookType: 'xlsx', type: 'array' });\n        \n        // 创建Blob对象\n        const blob = new Blob([new Uint8Array(wbout)], { type: 'application/octet-stream' });\n        \n        // 创建下载链接\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = fileName || 'download.xlsx';\n        \n        // 模拟点击下载\n        document.body.appendChild(a);\n        a.click();\n        \n        // 清理\n        setTimeout(() => {\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n        }, 0);\n    }\n    \n    // 新增: 保存修改\n    async function saveChanges() {\n        if (!originalWorkbook || !isModified) return;\n        \n        try {\n            isSaving = true;\n            \n            // 更新工作簿数据确保最新\n            updateWorkbookData();\n            \n            // 生成二进制数据\n            const wbout = XLSX.write(originalWorkbook, { bookType: 'xlsx', type: 'array' });\n            \n            // 触发事件将数据送到父组件处理\n            dispatch('datachange', {\n                data: wbout\n            });\n            \n            // 如果有保存的逻辑，显示成功\n            saveSuccess = true;\n            isModified = false;\n            \n            // 3秒后隐藏成功信息\n            setTimeout(() => {\n                saveSuccess = false;\n            }, 3000);\n        } catch (err) {\n            console.error(\"Error saving Excel:\", err);\n            error = err.message;\n        } finally {\n            isSaving = false;\n        }\n    }\n    \n    // 处理单元格点击\n    function handleCellClick(rowIndex, colIndex, currentValue) {\n        if (editable) {\n            startEditing(rowIndex, colIndex, currentValue);\n        }\n    }\n    \n    $: activeSheet = sheets[activeSheetIndex] || null;\n    \n    onMount(() => {\n        loadExcel();\n    });\n</script>\n\n{#if isLoading}\n    <div class=\"flex justify-center items-center h-[50vh]\">\n        <div class=\"animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-blue-500\"></div>\n        <span class=\"ml-3 text-sm text-gray-600 dark:text-gray-400\">Loading Excel data...</span>\n    </div>\n{:else if error}\n    <div class=\"bg-red-50 dark:bg-red-900/20 p-4 rounded-lg text-red-600 dark:text-red-400\">\n        <p class=\"font-medium\">Error loading Excel file</p>\n        <p class=\"text-sm mt-1\">{error}</p>\n        <div class=\"mt-4\">\n            <a \n                href={src} \n                download={fileName}\n                class=\"text-blue-600 dark:text-blue-400 hover:underline text-sm inline-flex items-center\"\n            >\n                Download file instead\n            </a>\n        </div>\n    </div>\n{:else if sheets.length}\n    <div class=\"mb-3 flex justify-between items-center\">\n        <div>\n            {#if sheets.length > 1}\n                <span class=\"text-sm text-gray-600 dark:text-gray-400\">Sheets: {sheets.length}</span>\n            {/if}\n        </div>\n        <div class=\"flex gap-2\">\n            {#if editable && isModified}\n                <button \n                    class=\"px-3 py-1 bg-green-600 text-white text-sm rounded-md hover:bg-green-700 \n                           disabled:bg-gray-400 disabled:cursor-not-allowed\"\n                    on:click={saveChanges}\n                    disabled={isSaving}\n                >\n                    {#if isSaving}\n                        <span class=\"inline-block animate-pulse\">Saving...</span>\n                    {:else}\n                        Save\n                    {/if}\n                </button>\n            {/if}\n            \n            {#if editable}\n                <button \n                    class=\"px-3 py-1 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700\"\n                    on:click={downloadExcel}\n                >\n                    Download\n                </button>\n            {:else}\n                <a \n                    href={src} \n                    download={fileName}\n                    class=\"px-3 py-1 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 inline-block\"\n                >\n                    Download\n                </a>\n            {/if}\n        </div>\n    </div>\n\n    {#if saveSuccess}\n        <div class=\"mb-3 px-3 py-2 bg-green-100 dark:bg-green-900/20 border border-green-300 \n                  dark:border-green-800 rounded-md text-green-700 dark:text-green-400 text-sm\">\n            Changes saved successfully!\n        </div>\n    {/if}\n\n    {#if sheets.length > 1}\n        <div class=\"mb-2 border-b dark:border-gray-700 overflow-x-auto\">\n            <div class=\"flex\">\n                {#each sheets as sheet, index}\n                    <button \n                        class=\"px-3 py-2 text-sm whitespace-nowrap {index === activeSheetIndex \n                            ? 'border-b-2 border-blue-500 dark:border-blue-400 text-blue-600 dark:text-blue-400 font-medium' \n                            : 'text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200'}\"\n                        on:click={() => switchSheet(index)}\n                    >\n                        {sheet.name || `Sheet ${index + 1}`}\n                    </button>\n                {/each}\n            </div>\n        </div>\n    {/if}\n    \n    {#if activeSheet?.data?.length}\n        <div class=\"overflow-x-auto border dark:border-gray-700 rounded-lg\">\n            <table class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                <thead class=\"bg-gray-50 dark:bg-gray-800\">\n                    <tr>\n                        <th class=\"w-10 px-2 py-2 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider text-center\">\n                            #\n                        </th>\n                        {#each Array(activeSheet.data[0]?.length || 0) as _, colIndex}\n                            <th class=\"px-4 py-2 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                                {getColumnHeader(colIndex)}\n                            </th>\n                        {/each}\n                    </tr>\n                </thead>\n                <tbody class=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-800\">\n                    {#each activeSheet.data as row, rowIndex}\n                        <tr class=\"hover:bg-gray-50 dark:hover:bg-gray-800/50\">\n                            <td class=\"px-2 py-2 whitespace-nowrap text-xs text-gray-500 dark:text-gray-400 text-center\">\n                                {rowIndex + 1}\n                            </td>\n                            {#each Array(activeSheet.data[0]?.length || 0) as _, colIndex}\n                                <td \n                                    class=\"px-4 py-2 whitespace-nowrap text-xs overflow-hidden text-ellipsis max-w-[200px] {editable ? 'cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700' : ''}\"\n                                    on:click={() => handleCellClick(rowIndex, colIndex, row[colIndex])}\n                                >\n                                    {#if editingCell && editingCell.rowIndex === rowIndex && editingCell.colIndex === colIndex}\n                                        <input \n                                            type=\"text\"\n                                            class=\"w-full p-1 border border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-gray-100\"\n                                            bind:value={editValue}\n                                            on:keydown={handleKeydown}\n                                            on:blur={saveEdit}\n                                            autofocus\n                                        />\n                                    {:else}\n                                        {row[colIndex] !== undefined && row[colIndex] !== null ? row[colIndex] : ''}\n                                    {/if}\n                                </td>\n                            {/each}\n                        </tr>\n                    {/each}\n                </tbody>\n            </table>\n        </div>\n        \n        {#if activeSheet.truncated}\n            <div class=\"mt-2 text-xs text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 p-2 rounded\">\n                Showing first 1000 rows. Full file contains {activeSheet.rowCount} rows.\n                <span class=\"ml-1 text-yellow-500\">Note: Only visible rows can be edited.</span>\n            </div>\n        {/if}\n\n        {#if editable}\n            <div class=\"mt-2 text-xs text-blue-500 bg-blue-50 dark:bg-blue-900/20 dark:text-blue-400 p-2 rounded\">\n                <p><strong>Editing mode enabled:</strong> Click on any cell to edit its content.</p>\n                {#if isModified}\n                    <p class=\"mt-1 text-yellow-600 dark:text-yellow-400\">\n                        <strong>Unsaved changes:</strong> Remember to save your changes.\n                    </p>\n                {/if}\n            </div>\n        {/if}\n    {:else}\n        <div class=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n            No data available in this sheet\n        </div>\n    {/if}\n{:else}\n    <div class=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n        No data available in this Excel file\n    </div>\n{/if}\n\n<style>\n    table td {\n        max-width: 300px;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n    \n    input {\n        font-size: inherit;\n    }\n</style>","<script lang=\"ts\">\n\timport { getContext, onMount } from 'svelte';\n\timport { formatFileSize, getLineCount } from '$lib/utils';\n\timport { WEBUI_API_BASE_URL } from '$lib/constants';\n\n\tconst i18n = getContext('i18n');\n\n\timport Modal from './Modal.svelte';\n\timport XMark from '../icons/XMark.svelte';\n\timport Info from '../icons/Info.svelte';\n\timport Switch from './Switch.svelte';\n\timport Tooltip from './Tooltip.svelte';\n\timport ExcelViewer from './ExcelViewer.svelte';\n\n\texport let item;\n\texport let show = false;\n\texport let edit = false;\n\n\tlet enableFullContent = false;\n    let excelData = null;\n    let isExcelModified = false;\n\n\t$: isPDF =\n\t\titem?.meta?.content_type === 'application/pdf' ||\n\t\t(item?.name && item?.name.toLowerCase().endsWith('.pdf'));\n\t\t\n\t$: isExcel =\n\t\titem?.meta?.content_type?.includes('spreadsheet') ||\n\t\titem?.meta?.content_type?.includes('excel') ||\n\t\titem?.meta?.content_type?.includes('ms-excel') ||\n\t\t(item?.name && /\\.(xlsx|xls|xlsm|xlsb|xltx|xlt|csv|ods)$/i.test(item?.name));\n\n    function handleExcelDataChange(event) {\n        excelData = event.detail.data;\n        isExcelModified = true;\n    }\n\n    // 保留Excel文件保存功能\n    async function saveExcelFile() {\n        if (!excelData || !item || !item.id) return;\n\n        try {\n            const isSaving = true;\n            \n            const formData = new FormData();\n            \n            \n            // 假设excelData是一个Blob对象或可以转换为Blob的数据\n\n            // 假设excelData是一个Blob对象或可以转换为Blob的数据\n            const excelBlob = new Blob([excelData], { \n                type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \n            });\n            \n            formData.append('file', excelBlob, item.name);\n            \n            // 发送到服务器的API端点\n            const response = await fetch(`${WEBUI_API_BASE_URL}/files/${item.id}/update`, {\n                method: 'PUT',\n                body: formData\n            });\n            \n            if (!response.ok) {\n                throw new Error('Failed to save file');\n            }\n            \n            // 保存成功\n            isExcelModified = false;\n            alert('Excel file saved successfully!');\n        } catch (error) {\n            console.error('Error saving Excel file:', error);\n            alert('Failed to save Excel file: ' + error.message);\n        }\n    }\n\n\tonMount(() => {\n\t\tconsole.log(item);\n\t\tif (item?.context === 'full') {\n\t\t\tenableFullContent = true;\n\t\t}\n\t});\n</script>\n\n<!-- 保持Modal可拖动功能 -->\n<Modal bind:show size=\"lg\" draggable={true} className=\"bg-gray-50 dark:bg-gray-900 rounded-2xl\">\n    <div class=\"font-primary px-6 py-5 w-full flex flex-col justify-center dark:text-gray-400\">\n        <div class=\"pb-2\">\n            <div class=\"flex items-start justify-between\">\n                <div>\n                    <div class=\"font-medium text-lg dark:text-gray-100\">\n                        <a\n                            href=\"#\"\n                            class=\"hover:underline line-clamp-1\"\n                            on:click|preventDefault={() => {\n                                if (!isPDF && !isExcel && item.url) {\n                                    window.open(\n                                        item.type === 'file' ? `${item.url}/content` : `${item.url}`,\n                                        '_blank'\n                                    );\n                                }\n                            }}\n                        >\n                            {item?.name ?? 'File'}\n                        </a>\n                    </div>\n                </div>\n                \n                <!-- 保留Excel保存按钮 -->\n                {#if isExcel && isExcelModified}\n                <div class=\"ml-auto mr-2\">\n                    <button \n                        class=\"px-3 py-1 bg-blue-600 text-white rounded-md text-sm hover:bg-blue-700\"\n                        on:click={saveExcelFile}\n                    >\n                        Save\n                    </button>\n                </div>\n                {/if}\n                \n                <div>\n                    <button\n                        on:click={() => {\n                            // 保留未保存提示\n                            if (isExcel && isExcelModified) {\n                                if (confirm('You have unsaved changes. Do you want to leave without saving?')) {\n                                    show = false;\n                                }\n                            } else {\n                                show = false;\n                            }\n                        }}\n                    >\n                        <XMark />\n                    </button>\n                </div>\n            </div>\n            \n            <div>\n                <div class=\"flex flex-col items-center md:flex-row gap-1 justify-between w-full\">\n                    <div class=\"flex flex-wrap text-sm gap-1 text-gray-500\">\n                        {#if item.size}\n                            <div class=\"capitalize shrink-0\">{formatFileSize(item.size)}</div>\n                            •\n                        {/if}\n                        \n                        {#if item?.file?.data?.content}\n                            <div class=\"capitalize shrink-0\">\n                                {getLineCount(item?.file?.data?.content ?? '')} extracted lines\n                            </div>\n                            \n                            <div class=\"flex items-center gap-1 shrink-0\">\n                                <Info />\n                                Formatting may be inconsistent from source.\n                            </div>\n                        {/if}\n                    </div>\n                    \n                    {#if edit}\n                        <div>\n                            <Tooltip\n                                content={enableFullContent\n                                    ? 'Inject the entire content as context for comprehensive processing, this is recommended for complex queries.'\n                                    : 'Default to segmented retrieval for focused and relevant content extraction, this is recommended for most cases.'}\n                            >\n                                <div class=\"flex items-center gap-1.5 text-xs\">\n                                    {#if enableFullContent}\n                                        Using Entire Document\n                                    {:else}\n                                        Using Focused Retrieval\n                                    {/if}\n                                    <Switch\n                                        bind:state={enableFullContent}\n                                        on:change={(e) => {\n                                            item.context = e.detail ? 'full' : undefined;\n                                        }}\n                                    />\n                                </div>\n                            </Tooltip>\n                        </div>\n                    {/if}\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"max-h-[75vh] overflow-auto\">\n            {#if isPDF}\n                <iframe\n                    title={item?.name}\n                    src={`${WEBUI_API_BASE_URL}/files/${item.id}/content`}\n                    class=\"w-full h-[70vh] border-0 rounded-lg mt-4\"\n                />\n            {:else if isExcel}\n                <!-- 保留Excel编辑功能 -->\n                <ExcelViewer \n                    src={`${WEBUI_API_BASE_URL}/files/${item.id}/content`}\n                    fileName={item.name}\n                    editable={true}\n                    on:datachange={handleExcelDataChange}\n                />\n            {:else}\n                <div class=\"max-h-96 overflow-scroll scrollbar-hidden text-xs whitespace-pre-wrap\">\n                    {item?.file?.data?.content ?? 'No content'}\n                </div>\n            {/if}\n        </div>\n    </div>\n</Modal>\n\n<style>\n    :global(.scrollbar-hidden::-webkit-scrollbar) {\n        display: none;\n    }\n    \n    :global(.scrollbar-hidden) {\n        -ms-overflow-style: none;\n        scrollbar-width: none;\n    }\n</style>","<script lang=\"ts\">\n\t// FileItem.svelte 修改\n\timport { createEventDispatcher, getContext } from 'svelte';\n\timport { formatFileSize } from '$lib/utils';\n\n\timport FileItemModal from './FileItemModal.svelte';\n\timport GarbageBin from '../icons/GarbageBin.svelte';\n\timport Spinner from './Spinner.svelte';\n\timport Tooltip from './Tooltip.svelte';\n\timport { WEBUI_API_BASE_URL } from '$lib/constants';\n\n\tconst i18n = getContext('i18n');\n\tconst dispatch = createEventDispatcher();\n\n\texport let className = 'w-60';\n\texport let colorClassName = 'bg-white dark:bg-gray-850 border border-gray-50 dark:border-white/5';\n\texport let url: string | null = null;\n\n\texport let dismissible = false;\n\texport let loading = false;\n\n\texport let item = null;\n\texport let edit = false;\n\texport let small = false;\n\n\texport let name: string;\n\texport let type: string;\n\texport let size: number;\n\n\timport { deleteFileById } from '$lib/apis/files';\n\n\tlet showModal = false;\n\t\n\t// Function to check if this is an Excel file\n\tfunction isExcelFile(fileName: string) {\n\t\tconst excelExtensions = ['.xls', '.xlsx', '.csv', '.ods'];\n\t\treturn excelExtensions.some(ext => fileName.toLowerCase().endsWith(ext));\n\t}\n\t\n\t// Function to check if this is a PDF file\n\tfunction isPdfFile(fileName: string) {\n\t\treturn fileName.toLowerCase().endsWith('.pdf');\n\t}\n\t\n\t// Determine the file type for icon display\n\tconst fileType = isExcelFile(name) ? 'excel' : type;\n</script>\n\n{#if item}\n\t<FileItemModal bind:show={showModal} bind:item {edit} />\n{/if}\n\n<button\n\tclass=\"relative group p-1.5 {className} flex items-center gap-1 {colorClassName} {small\n\t\t? 'rounded-xl'\n\t\t: 'rounded-2xl'} text-left\"\n\ttype=\"button\"\n\ton:click={async () => {\n\t\tif (isExcelFile(name) && item?.id) {\n\t\t\t// Excel文件打开专用的Excel预览页面，而不是直接打开文件\n\t\t\t// 假设预览页面的路径是 /excel-viewer，并通过查询参数传递文件ID\n\t\t\tconst viewerUrl = `/excel-viewer?fileId=${item.id}&fileName=${encodeURIComponent(name)}`;\n\t\t\twindow.open(viewerUrl, '_blank').focus();\n\t\t} else if (item?.file?.data?.content || isPdfFile(name)) {\n\t\t\t// PDF文件或有内容的文件使用modal打开\n\t\t\tshowModal = !showModal;\n\t\t} else {\n\t\t\t// 其他文件如果有URL则在新标签页打开\n\t\t\tif (url) {\n\t\t\t\tif (type === 'file') {\n\t\t\t\t\twindow.open(`${url}/content`, '_blank').focus();\n\t\t\t\t} else {\n\t\t\t\t\twindow.open(`${url}`, '_blank').focus();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdispatch('click');\n\t}}\n>\n\t{#if !small}\n\t\t<div class=\"p-3 {isExcelFile(name) ? 'bg-green-600/20 dark:bg-green-500/20 text-green-600 dark:text-green-500' : 'bg-black/20 dark:bg-white/10 text-white'} rounded-xl\">\n\t\t\t{#if !loading}\n\t\t\t\t{#if isExcelFile(name)}\n\t\t\t\t\t<!-- Excel Icon -->\n\t\t\t\t\t<svg \n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\" \n\t\t\t\t\t\tviewBox=\"0 0 24 24\" \n\t\t\t\t\t\tfill=\"currentColor\" \n\t\t\t\t\t\tclass=\"size-5\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path \n\t\t\t\t\t\t\tfill-rule=\"evenodd\" \n\t\t\t\t\t\t\td=\"M5.625 1.5c-1.036 0-1.875.84-1.875 1.875v17.25c0 1.035.84 1.875 1.875 1.875h12.75c1.035 0 1.875-.84 1.875-1.875V12.75A3.75 3.75 0 0 0 16.5 9h-1.875a1.875 1.875 0 0 1-1.875-1.875V5.25A3.75 3.75 0 0 0 9 1.5H5.625ZM7.5 15a.75.75 0 0 1 .75-.75h7.5a.75.75 0 0 1 0 1.5h-7.5A.75.75 0 0 1 7.5 15Zm.75 2.25a.75.75 0 0 0 0 1.5H12a.75.75 0 0 0 0-1.5H8.25Z\" \n\t\t\t\t\t\t\tclip-rule=\"evenodd\" \n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<path \n\t\t\t\t\t\t\td=\"M12.971 1.816A5.23 5.23 0 0 1 14.25 5.25v1.875c0 .207.168.375.375.375H16.5a5.23 5.23 0 0 1 3.434 1.279 9.768 9.768 0 0 0-6.963-6.963Z\" \n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\t\t\t\t{:else}\n\t\t\t\t\t<!-- Default document icon -->\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\tclass=\"size-5\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\t\t\t\td=\"M5.625 1.5c-1.036 0-1.875.84-1.875 1.875v17.25c0 1.035.84 1.875 1.875 1.875h12.75c1.035 0 1.875-.84 1.875-1.875V12.75A3.75 3.75 0 0 0 16.5 9h-1.875a1.875 1.875 0 0 1-1.875-1.875V5.25A3.75 3.75 0 0 0 9 1.5H5.625ZM7.5 15a.75.75 0 0 1 .75-.75h7.5a.75.75 0 0 1 0 1.5h-7.5A.75.75 0 0 1 7.5 15Zm.75 2.25a.75.75 0 0 0 0 1.5H12a.75.75 0 0 0 0-1.5H8.25Z\"\n\t\t\t\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\td=\"M12.971 1.816A5.23 5.23 0 0 1 14.25 5.25v1.875c0 .207.168.375.375.375H16.5a5.23 5.23 0 0 1 3.434 1.279 9.768 9.768 0 0 0-6.963-6.963Z\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\t\t\t\t{/if}\n\t\t\t{:else}\n\t\t\t\t<Spinner />\n\t\t\t{/if}\n\t\t</div>\n\t{/if}\n\n\t{#if !small}\n\t\t<div class=\"flex flex-col justify-center -space-y-0.5 px-2.5 w-full\">\n\t\t\t<div class=\"dark:text-gray-100 text-sm font-medium line-clamp-1 mb-1\">\n\t\t\t\t{name}\n\t\t\t</div>\n\n\t\t\t<div class=\"flex justify-between text-gray-500 text-xs line-clamp-1\">\n\t\t\t\t{#if isExcelFile(name)}\n\t\t\t\t\t{$i18n.t('Excel')}\n\t\t\t\t{:else if type === 'file'}\n\t\t\t\t\t{$i18n.t('File')}\n\t\t\t\t{:else if type === 'doc'}\n\t\t\t\t\t{$i18n.t('Document')}\n\t\t\t\t{:else if type === 'collection'}\n\t\t\t\t\t{$i18n.t('Collection')}\n\t\t\t\t{:else}\n\t\t\t\t\t<span class=\"capitalize line-clamp-1\">{type}</span>\n\t\t\t\t{/if}\n\t\t\t\t{#if size}\n\t\t\t\t\t<span class=\"capitalize\">{formatFileSize(size)}</span>\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t</div>\n\t{:else}\n\t\t<Tooltip content={name} className=\"flex flex-col w-full\" placement=\"top-start\">\n\t\t\t<div class=\"flex flex-col justify-center -space-y-0.5 px-2.5 w-full\">\n\t\t\t\t<div class=\"dark:text-gray-100 text-sm flex justify-between items-center\">\n\t\t\t\t\t{#if loading}\n\t\t\t\t\t\t<div class=\"shrink-0 mr-2\">\n\t\t\t\t\t\t\t<Spinner className=\"size-4\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t\t<div class=\"font-medium line-clamp-1 flex-1\">{name}</div>\n\t\t\t\t\t<div class=\"text-gray-500 text-xs capitalize shrink-0\">{formatFileSize(size)}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Tooltip>\n\t{/if}\n\n\t{#if dismissible}\n\t\t<div class=\"absolute -top-1 -right-1\">\n\t\t\t<button\n\t\t\t\tclass=\"bg-white text-black border border-white rounded-full group-hover:visible invisible transition\"\n\t\t\t\ttype=\"button\"\n\t\t\t\ton:click|stopPropagation={() => {\n\t\t\t\t\tdispatch('dismiss');\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tviewBox=\"0 0 20 20\"\n\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\tclass=\"w-4 h-4\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z\"\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</button>\n\t\t</div>\n\t{/if}\n</button>","<script lang=\"ts\">\n\timport { onDestroy, onMount } from 'svelte';\n\n\texport let show = false;\n\texport let src = '';\n\texport let alt = '';\n\n\tlet mounted = false;\n\n\tlet previewElement = null;\n\n\tconst downloadImage = (url, filename, prefixName = '') => {\n\t\tfetch(url)\n\t\t\t.then((response) => response.blob())\n\t\t\t.then((blob) => {\n\t\t\t\tconst objectUrl = window.URL.createObjectURL(blob);\n\t\t\t\tconst link = document.createElement('a');\n\t\t\t\tlink.href = objectUrl;\n\t\t\t\tlink.download = `${prefixName}${filename}`;\n\t\t\t\tdocument.body.appendChild(link);\n\t\t\t\tlink.click();\n\t\t\t\tdocument.body.removeChild(link);\n\t\t\t\twindow.URL.revokeObjectURL(objectUrl);\n\t\t\t})\n\t\t\t.catch((error) => console.error('Error downloading image:', error));\n\t};\n\n\tconst handleKeyDown = (event: KeyboardEvent) => {\n\t\tif (event.key === 'Escape') {\n\t\t\tconsole.log('Escape');\n\t\t\tshow = false;\n\t\t}\n\t};\n\n\tonMount(() => {\n\t\tmounted = true;\n\t});\n\n\t$: if (show && previewElement) {\n\t\tdocument.body.appendChild(previewElement);\n\t\twindow.addEventListener('keydown', handleKeyDown);\n\t\tdocument.body.style.overflow = 'hidden';\n\t} else if (previewElement) {\n\t\twindow.removeEventListener('keydown', handleKeyDown);\n\t\tdocument.body.removeChild(previewElement);\n\t\tdocument.body.style.overflow = 'unset';\n\t}\n\n\tonDestroy(() => {\n\t\tshow = false;\n\n\t\tif (previewElement) {\n\t\t\tdocument.body.removeChild(previewElement);\n\t\t}\n\t});\n</script>\n\n{#if show}\n\t<!-- svelte-ignore a11y-click-events-have-key-events -->\n\t<!-- svelte-ignore a11y-no-static-element-interactions -->\n\t<div\n\t\tbind:this={previewElement}\n\t\tclass=\"modal fixed top-0 right-0 left-0 bottom-0 bg-black text-white w-full min-h-screen h-screen flex justify-center z-9999 overflow-hidden overscroll-contain\"\n\t>\n\t\t<div class=\" absolute left-0 w-full flex justify-between select-none\">\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tclass=\" p-5\"\n\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\tshow = false;\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\tclass=\"w-6 h-6\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tclass=\" p-5\"\n\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\tdownloadImage(src, src.substring(src.lastIndexOf('/') + 1), alt);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\tviewBox=\"0 0 20 20\"\n\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\tclass=\"w-6 h-6\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\td=\"M10.75 2.75a.75.75 0 0 0-1.5 0v8.614L6.295 8.235a.75.75 0 1 0-1.09 1.03l4.25 4.5a.75.75 0 0 0 1.09 0l4.25-4.5a.75.75 0 0 0-1.09-1.03l-2.955 3.129V2.75Z\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\td=\"M3.5 12.75a.75.75 0 0 0-1.5 0v2.5A2.75 2.75 0 0 0 4.75 18h10.5A2.75 2.75 0 0 0 18 15.25v-2.5a.75.75 0 0 0-1.5 0v2.5c0 .69-.56 1.25-1.25 1.25H4.75c-.69 0-1.25-.56-1.25-1.25v-2.5Z\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t\t<img {src} {alt} class=\" mx-auto h-full object-scale-down select-none\" draggable=\"false\" />\n\t</div>\n{/if}\n","<script lang=\"ts\">\n\timport { WEBUI_BASE_URL } from '$lib/constants';\n\timport ImagePreview from './ImagePreview.svelte';\n\n\texport let src = '';\n\texport let alt = '';\n\n\texport let className = ' w-full outline-hidden focus:outline-hidden';\n\texport let imageClassName = 'rounded-lg';\n\n\tlet _src = '';\n\t$: _src = src.startsWith('/') ? `${WEBUI_BASE_URL}${src}` : src;\n\n\tlet showImagePreview = false;\n</script>\n\n<button\n\tclass={className}\n\ton:click={() => {\n\t\tshowImagePreview = true;\n\t}}\n\ttype=\"button\"\n>\n\t<img src={_src} {alt} class={imageClassName} draggable=\"false\" data-cy=\"image\" />\n</button>\n\n<ImagePreview bind:show={showImagePreview} src={_src} {alt} />\n","<script lang=\"ts\">\n\timport { WEBUI_BASE_URL } from '$lib/constants';\n\n\texport let className = 'size-8';\n\texport let src = `${WEBUI_BASE_URL}/static/favicon.png`;\n</script>\n\n<img\n\tcrossorigin=\"anonymous\"\n\tsrc={src === ''\n\t\t? `${WEBUI_BASE_URL}/static/favicon.png`\n\t\t: src.startsWith(WEBUI_BASE_URL) ||\n\t\t\t  src.startsWith('https://www.gravatar.com/avatar/') ||\n\t\t\t  src.startsWith('data:') ||\n\t\t\t  src.startsWith('/')\n\t\t\t? src\n\t\t\t: `/user.png`}\n\tclass=\" {className} object-cover rounded-full -translate-y-[1px]\"\n\talt=\"profile\"\n\tdraggable=\"false\"\n/>\n","<script lang=\"ts\">\n\timport { basicSetup, EditorView } from 'codemirror';\n\timport { keymap, placeholder } from '@codemirror/view';\n\timport { Compartment, EditorState } from '@codemirror/state';\n\n\timport { acceptCompletion } from '@codemirror/autocomplete';\n\timport { indentWithTab } from '@codemirror/commands';\n\n\timport { indentUnit, LanguageDescription } from '@codemirror/language';\n\timport { languages } from '@codemirror/language-data';\n\n\timport { oneDark } from '@codemirror/theme-one-dark';\n\n\timport { onMount, createEventDispatcher, getContext, tick } from 'svelte';\n\n\timport { formatPythonCode } from '$lib/apis/utils';\n\timport { toast } from 'svelte-sonner';\n\n\tconst dispatch = createEventDispatcher();\n\tconst i18n = getContext('i18n');\n\n\texport let boilerplate = '';\n\texport let value = '';\n\n\texport let onSave = () => {};\n\texport let onChange = () => {};\n\n\tlet _value = '';\n\n\t$: if (value) {\n\t\tupdateValue();\n\t}\n\n\tconst updateValue = () => {\n\t\tif (_value !== value) {\n\t\t\t_value = value;\n\t\t\tif (codeEditor) {\n\t\t\t\tcodeEditor.dispatch({\n\t\t\t\t\tchanges: [{ from: 0, to: codeEditor.state.doc.length, insert: _value }]\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\texport let id = '';\n\texport let lang = '';\n\n\tlet codeEditor;\n\n\texport const focus = () => {\n\t\tcodeEditor.focus();\n\t};\n\n\tlet isDarkMode = false;\n\tlet editorTheme = new Compartment();\n\tlet editorLanguage = new Compartment();\n\n\tlanguages.push(\n\t\tLanguageDescription.of({\n\t\t\tname: 'HCL',\n\t\t\textensions: ['hcl', 'tf'],\n\t\t\tload() {\n\t\t\t\treturn import('codemirror-lang-hcl').then((m) => m.hcl());\n\t\t\t}\n\t\t})\n\t);\n\tconst getLang = async () => {\n\t\tconst language = languages.find((l) => l.alias.includes(lang));\n\t\treturn await language?.load();\n\t};\n\n\texport const formatPythonCodeHandler = async () => {\n\t\tif (codeEditor) {\n\t\t\tconst res = await formatPythonCode(localStorage.token, _value).catch((error) => {\n\t\t\t\ttoast.error(`${error}`);\n\t\t\t\treturn null;\n\t\t\t});\n\n\t\t\tif (res && res.code) {\n\t\t\t\tconst formattedCode = res.code;\n\t\t\t\tcodeEditor.dispatch({\n\t\t\t\t\tchanges: [{ from: 0, to: codeEditor.state.doc.length, insert: formattedCode }]\n\t\t\t\t});\n\n\t\t\t\t_value = formattedCode;\n\t\t\t\tonChange(_value);\n\t\t\t\tawait tick();\n\n\t\t\t\ttoast.success($i18n.t('Code formatted successfully'));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t};\n\n\tlet extensions = [\n\t\tbasicSetup,\n\t\tkeymap.of([{ key: 'Tab', run: acceptCompletion }, indentWithTab]),\n\t\tindentUnit.of('    '),\n\t\tplaceholder('Enter your code here...'),\n\t\tEditorView.updateListener.of((e) => {\n\t\t\tif (e.docChanged) {\n\t\t\t\t_value = e.state.doc.toString();\n\t\t\t\tonChange(_value);\n\t\t\t}\n\t\t}),\n\t\teditorTheme.of([]),\n\t\teditorLanguage.of([])\n\t];\n\n\t$: if (lang) {\n\t\tsetLanguage();\n\t}\n\n\tconst setLanguage = async () => {\n\t\tconst language = await getLang();\n\t\tif (language && codeEditor) {\n\t\t\tcodeEditor.dispatch({\n\t\t\t\teffects: editorLanguage.reconfigure(language)\n\t\t\t});\n\t\t}\n\t};\n\n\tonMount(() => {\n\t\tconsole.log(value);\n\t\tif (value === '') {\n\t\t\tvalue = boilerplate;\n\t\t}\n\n\t\t_value = value;\n\n\t\t// Check if html class has dark mode\n\t\tisDarkMode = document.documentElement.classList.contains('dark');\n\n\t\t// python code editor, highlight python code\n\t\tcodeEditor = new EditorView({\n\t\t\tstate: EditorState.create({\n\t\t\t\tdoc: _value,\n\t\t\t\textensions: extensions\n\t\t\t}),\n\t\t\tparent: document.getElementById(`code-textarea-${id}`)\n\t\t});\n\n\t\tif (isDarkMode) {\n\t\t\tcodeEditor.dispatch({\n\t\t\t\teffects: editorTheme.reconfigure(oneDark)\n\t\t\t});\n\t\t}\n\n\t\t// listen to html class changes this should fire only when dark mode is toggled\n\t\tconst observer = new MutationObserver((mutations) => {\n\t\t\tmutations.forEach((mutation) => {\n\t\t\t\tif (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n\t\t\t\t\tconst _isDarkMode = document.documentElement.classList.contains('dark');\n\n\t\t\t\t\tif (_isDarkMode !== isDarkMode) {\n\t\t\t\t\t\tisDarkMode = _isDarkMode;\n\t\t\t\t\t\tif (_isDarkMode) {\n\t\t\t\t\t\t\tcodeEditor.dispatch({\n\t\t\t\t\t\t\t\teffects: editorTheme.reconfigure(oneDark)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcodeEditor.dispatch({\n\t\t\t\t\t\t\t\teffects: editorTheme.reconfigure()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tobserver.observe(document.documentElement, {\n\t\t\tattributes: true,\n\t\t\tattributeFilter: ['class']\n\t\t});\n\n\t\tconst keydownHandler = async (e) => {\n\t\t\tif ((e.ctrlKey || e.metaKey) && e.key === 's') {\n\t\t\t\te.preventDefault();\n\n\t\t\t\tonSave();\n\t\t\t}\n\n\t\t\t// Format code when Ctrl + Shift + F is pressed\n\t\t\tif ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'f') {\n\t\t\t\te.preventDefault();\n\t\t\t\tawait formatPythonCodeHandler();\n\t\t\t}\n\t\t};\n\n\t\tdocument.addEventListener('keydown', keydownHandler);\n\n\t\treturn () => {\n\t\t\tobserver.disconnect();\n\t\t\tdocument.removeEventListener('keydown', keydownHandler);\n\t\t};\n\t});\n</script>\n\n<div id=\"code-textarea-{id}\" class=\"h-full w-full\" />\n","<script lang=\"ts\">\n\texport let className = 'size-4';\n\texport let strokeWidth = '2';\n</script>\n\n<svg\n\txmlns=\"http://www.w3.org/2000/svg\"\n\tfill=\"none\"\n\tviewBox=\"0 0 24 24\"\n\tstroke-width={strokeWidth}\n\tstroke=\"currentColor\"\n\tclass={className}\n>\n\t<path\n\t\tstroke-linecap=\"round\"\n\t\tstroke-linejoin=\"round\"\n\t\td=\"M15.666 3.888A2.25 2.25 0 0 0 13.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 0 1-.75.75H9a.75.75 0 0 1-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 0 1-2.25 2.25H6.75A2.25 2.25 0 0 1 4.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 0 1 1.927-.184\"\n\t/>\n</svg>\n","<script lang=\"ts\">\n\texport let className = 'size-4';\n\texport let strokeWidth = '2';\n</script>\n\n<svg\n\txmlns=\"http://www.w3.org/2000/svg\"\n\tfill=\"none\"\n\tviewBox=\"0 0 24 24\"\n\tstroke-width={strokeWidth}\n\tstroke=\"currentColor\"\n\tclass={className}\n>\n\t<path\n\t\tstroke-linecap=\"round\"\n\t\tstroke-linejoin=\"round\"\n\t\td=\"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99\"\n\t/>\n</svg>\n","<script lang=\"ts\">\n\timport fileSaver from 'file-saver';\n\tconst { saveAs } = fileSaver;\n\n\timport { toast } from 'svelte-sonner';\n\n\timport panzoom, { type PanZoom } from 'panzoom';\n\timport DOMPurify from 'dompurify';\n\n\timport { onMount, getContext } from 'svelte';\n\tconst i18n = getContext('i18n');\n\n\timport { copyToClipboard } from '$lib/utils';\n\n\timport DocumentDuplicate from '../icons/DocumentDuplicate.svelte';\n\timport Tooltip from './Tooltip.svelte';\n\timport Clipboard from '../icons/Clipboard.svelte';\n\timport Reset from '../icons/Reset.svelte';\n\timport ArrowDownTray from '../icons/ArrowDownTray.svelte';\n\n\texport let className = '';\n\texport let svg = '';\n\texport let content = '';\n\n\tlet instance: PanZoom;\n\n\tlet sceneParentElement: HTMLElement;\n\tlet sceneElement: HTMLElement;\n\n\t$: if (sceneElement) {\n\t\tinstance = panzoom(sceneElement, {\n\t\t\tbounds: true,\n\t\t\tboundsPadding: 0.1,\n\n\t\t\tzoomSpeed: 0.065\n\t\t});\n\t}\n\tconst resetPanZoomViewport = () => {\n\t\tinstance.moveTo(0, 0);\n\t\tinstance.zoomAbs(0, 0, 1);\n\t\tconsole.log(instance.getTransform());\n\t};\n\n\tconst downloadAsSVG = () => {\n\t\tconst svgBlob = new Blob([svg], { type: 'image/svg+xml' });\n\t\tsaveAs(svgBlob, `diagram.svg`);\n\t};\n</script>\n\n<div bind:this={sceneParentElement} class=\"relative {className}\">\n\t<div bind:this={sceneElement} class=\"flex h-full max-h-full justify-center items-center\">\n\t\t{@html svg}\n\t</div>\n\n\t{#if content}\n\t\t<div class=\" absolute top-1 right-1\">\n\t\t\t<div class=\"flex gap-1\">\n\t\t\t\t<Tooltip content={$i18n.t('Download as SVG')}>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"p-1.5 rounded-lg border border-gray-100 dark:border-none dark:bg-gray-850 hover:bg-gray-50 dark:hover:bg-gray-800 transition\"\n\t\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\t\tdownloadAsSVG();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ArrowDownTray className=\" size-4\" />\n\t\t\t\t\t</button>\n\t\t\t\t</Tooltip>\n\n\t\t\t\t<Tooltip content={$i18n.t('Reset view')}>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"p-1.5 rounded-lg border border-gray-100 dark:border-none dark:bg-gray-850 hover:bg-gray-50 dark:hover:bg-gray-800 transition\"\n\t\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\t\tresetPanZoomViewport();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Reset className=\" size-4\" />\n\t\t\t\t\t</button>\n\t\t\t\t</Tooltip>\n\n\t\t\t\t<Tooltip content={$i18n.t('Copy to clipboard')}>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"p-1.5 rounded-lg border border-gray-100 dark:border-none dark:bg-gray-850 hover:bg-gray-50 dark:hover:bg-gray-800 transition\"\n\t\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\t\tcopyToClipboard(content);\n\t\t\t\t\t\t\ttoast.success($i18n.t('Copied to clipboard'));\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Clipboard className=\" size-4\" strokeWidth=\"1.5\" />\n\t\t\t\t\t</button>\n\t\t\t\t</Tooltip>\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n</div>\n","<script lang=\"ts\">\n\timport mermaid from 'mermaid';\n\n\timport { v4 as uuidv4 } from 'uuid';\n\n\timport { getContext, onMount, tick, onDestroy } from 'svelte';\n\timport { copyToClipboard } from '$lib/utils';\n\n\timport 'highlight.js/styles/github-dark.min.css';\n\n\timport PyodideWorker from '$lib/workers/pyodide.worker?worker';\n\timport CodeEditor from '$lib/components/common/CodeEditor.svelte';\n\timport SvgPanZoom from '$lib/components/common/SVGPanZoom.svelte';\n\timport { config } from '$lib/stores';\n\timport { executeCode } from '$lib/apis/utils';\n\timport { toast } from 'svelte-sonner';\n\n\tconst i18n = getContext('i18n');\n\n\texport let id = '';\n\n\texport let onSave = (e) => {};\n\texport let onCode = (e) => {};\n\n\texport let save = false;\n\texport let run = true;\n\n\texport let token;\n\texport let lang = '';\n\texport let code = '';\n\texport let attributes = {};\n\n\texport let className = 'my-2';\n\texport let editorClassName = '';\n\texport let stickyButtonsClassName = 'top-8';\n\n\tlet pyodideWorker = null;\n\n\tlet _code = '';\n\t$: if (code) {\n\t\tupdateCode();\n\t}\n\n\tconst updateCode = () => {\n\t\t_code = code;\n\t};\n\n\tlet _token = null;\n\n\tlet mermaidHtml = null;\n\n\tlet highlightedCode = null;\n\tlet executing = false;\n\n\tlet stdout = null;\n\tlet stderr = null;\n\tlet result = null;\n\tlet files = null;\n\n\tlet copied = false;\n\tlet saved = false;\n\n\tconst saveCode = () => {\n\t\tsaved = true;\n\n\t\tcode = _code;\n\t\tonSave(code);\n\n\t\tsetTimeout(() => {\n\t\t\tsaved = false;\n\t\t}, 1000);\n\t};\n\n\tconst copyCode = async () => {\n\t\tcopied = true;\n\t\tawait copyToClipboard(code);\n\n\t\tsetTimeout(() => {\n\t\t\tcopied = false;\n\t\t}, 1000);\n\t};\n\n\tconst checkPythonCode = (str) => {\n\t\t// Check if the string contains typical Python syntax characters\n\t\tconst pythonSyntax = [\n\t\t\t'def ',\n\t\t\t'else:',\n\t\t\t'elif ',\n\t\t\t'try:',\n\t\t\t'except:',\n\t\t\t'finally:',\n\t\t\t'yield ',\n\t\t\t'lambda ',\n\t\t\t'assert ',\n\t\t\t'nonlocal ',\n\t\t\t'del ',\n\t\t\t'True',\n\t\t\t'False',\n\t\t\t'None',\n\t\t\t' and ',\n\t\t\t' or ',\n\t\t\t' not ',\n\t\t\t' in ',\n\t\t\t' is ',\n\t\t\t' with '\n\t\t];\n\n\t\tfor (let syntax of pythonSyntax) {\n\t\t\tif (str.includes(syntax)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// If none of the above conditions met, it's probably not Python code\n\t\treturn false;\n\t};\n\n\tconst executePython = async (code) => {\n\t\tresult = null;\n\t\tstdout = null;\n\t\tstderr = null;\n\n\t\texecuting = true;\n\n\t\tif ($config?.code?.engine === 'jupyter') {\n\t\t\tconst output = await executeCode(localStorage.token, code).catch((error) => {\n\t\t\t\ttoast.error(`${error}`);\n\t\t\t\treturn null;\n\t\t\t});\n\n\t\t\tif (output) {\n\t\t\t\tif (output['stdout']) {\n\t\t\t\t\tstdout = output['stdout'];\n\t\t\t\t\tconst stdoutLines = stdout.split('\\n');\n\n\t\t\t\t\tfor (const [idx, line] of stdoutLines.entries()) {\n\t\t\t\t\t\tif (line.startsWith('data:image/png;base64')) {\n\t\t\t\t\t\t\tif (files) {\n\t\t\t\t\t\t\t\tfiles.push({\n\t\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfiles = [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (stdout.startsWith(`${line}\\n`)) {\n\t\t\t\t\t\t\t\tstdout = stdout.replace(`${line}\\n`, ``);\n\t\t\t\t\t\t\t} else if (stdout.startsWith(`${line}`)) {\n\t\t\t\t\t\t\t\tstdout = stdout.replace(`${line}`, ``);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (output['result']) {\n\t\t\t\t\tresult = output['result'];\n\t\t\t\t\tconst resultLines = result.split('\\n');\n\n\t\t\t\t\tfor (const [idx, line] of resultLines.entries()) {\n\t\t\t\t\t\tif (line.startsWith('data:image/png;base64')) {\n\t\t\t\t\t\t\tif (files) {\n\t\t\t\t\t\t\t\tfiles.push({\n\t\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfiles = [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (result.startsWith(`${line}\\n`)) {\n\t\t\t\t\t\t\t\tresult = result.replace(`${line}\\n`, ``);\n\t\t\t\t\t\t\t} else if (result.startsWith(`${line}`)) {\n\t\t\t\t\t\t\t\tresult = result.replace(`${line}`, ``);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\toutput['stderr'] && (stderr = output['stderr']);\n\t\t\t}\n\n\t\t\texecuting = false;\n\t\t} else {\n\t\t\texecutePythonAsWorker(code);\n\t\t}\n\t};\n\n\tconst executePythonAsWorker = async (code) => {\n\t\tlet packages = [\n\t\t\tcode.includes('requests') ? 'requests' : null,\n\t\t\tcode.includes('bs4') ? 'beautifulsoup4' : null,\n\t\t\tcode.includes('numpy') ? 'numpy' : null,\n\t\t\tcode.includes('pandas') ? 'pandas' : null,\n\t\t\tcode.includes('sklearn') ? 'scikit-learn' : null,\n\t\t\tcode.includes('scipy') ? 'scipy' : null,\n\t\t\tcode.includes('re') ? 'regex' : null,\n\t\t\tcode.includes('seaborn') ? 'seaborn' : null,\n\t\t\tcode.includes('sympy') ? 'sympy' : null,\n\t\t\tcode.includes('tiktoken') ? 'tiktoken' : null,\n\t\t\tcode.includes('matplotlib') ? 'matplotlib' : null,\n\t\t\tcode.includes('pytz') ? 'pytz' : null\n\t\t].filter(Boolean);\n\n\t\tconsole.log(packages);\n\n\t\tpyodideWorker = new PyodideWorker();\n\n\t\tpyodideWorker.postMessage({\n\t\t\tid: id,\n\t\t\tcode: code,\n\t\t\tpackages: packages\n\t\t});\n\n\t\tsetTimeout(() => {\n\t\t\tif (executing) {\n\t\t\t\texecuting = false;\n\t\t\t\tstderr = 'Execution Time Limit Exceeded';\n\t\t\t\tpyodideWorker.terminate();\n\t\t\t}\n\t\t}, 60000);\n\n\t\tpyodideWorker.onmessage = (event) => {\n\t\t\tconsole.log('pyodideWorker.onmessage', event);\n\t\t\tconst { id, ...data } = event.data;\n\n\t\t\tconsole.log(id, data);\n\n\t\t\tif (data['stdout']) {\n\t\t\t\tstdout = data['stdout'];\n\t\t\t\tconst stdoutLines = stdout.split('\\n');\n\n\t\t\t\tfor (const [idx, line] of stdoutLines.entries()) {\n\t\t\t\t\tif (line.startsWith('data:image/png;base64')) {\n\t\t\t\t\t\tif (files) {\n\t\t\t\t\t\t\tfiles.push({\n\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfiles = [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (stdout.startsWith(`${line}\\n`)) {\n\t\t\t\t\t\t\tstdout = stdout.replace(`${line}\\n`, ``);\n\t\t\t\t\t\t} else if (stdout.startsWith(`${line}`)) {\n\t\t\t\t\t\t\tstdout = stdout.replace(`${line}`, ``);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data['result']) {\n\t\t\t\tresult = data['result'];\n\t\t\t\tconst resultLines = result.split('\\n');\n\n\t\t\t\tfor (const [idx, line] of resultLines.entries()) {\n\t\t\t\t\tif (line.startsWith('data:image/png;base64')) {\n\t\t\t\t\t\tif (files) {\n\t\t\t\t\t\t\tfiles.push({\n\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfiles = [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (result.startsWith(`${line}\\n`)) {\n\t\t\t\t\t\t\tresult = result.replace(`${line}\\n`, ``);\n\t\t\t\t\t\t} else if (result.startsWith(`${line}`)) {\n\t\t\t\t\t\t\tresult = result.replace(`${line}`, ``);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdata['stderr'] && (stderr = data['stderr']);\n\t\t\tdata['result'] && (result = data['result']);\n\n\t\t\texecuting = false;\n\t\t};\n\n\t\tpyodideWorker.onerror = (event) => {\n\t\t\tconsole.log('pyodideWorker.onerror', event);\n\t\t\texecuting = false;\n\t\t};\n\t};\n\n\tlet debounceTimeout;\n\n\tconst drawMermaidDiagram = async () => {\n\t\ttry {\n\t\t\tif (await mermaid.parse(code)) {\n\t\t\t\tconst { svg } = await mermaid.render(`mermaid-${uuidv4()}`, code);\n\t\t\t\tmermaidHtml = svg;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log('Error:', error);\n\t\t}\n\t};\n\n\tconst render = async () => {\n\t\tif (lang === 'mermaid' && (token?.raw ?? '').slice(-4).includes('```')) {\n\t\t\t(async () => {\n\t\t\t\tawait drawMermaidDiagram();\n\t\t\t})();\n\t\t}\n\t};\n\n\t$: if (token) {\n\t\tif (JSON.stringify(token) !== JSON.stringify(_token)) {\n\t\t\t_token = token;\n\t\t}\n\t}\n\n\t$: if (_token) {\n\t\trender();\n\t}\n\n\t$: onCode({ lang, code });\n\n\t$: if (attributes) {\n\t\tonAttributesUpdate();\n\t}\n\n\tconst onAttributesUpdate = () => {\n\t\tif (attributes?.output) {\n\t\t\t// Create a helper function to unescape HTML entities\n\t\t\tconst unescapeHtml = (html) => {\n\t\t\t\tconst textArea = document.createElement('textarea');\n\t\t\t\ttextArea.innerHTML = html;\n\t\t\t\treturn textArea.value;\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\t// Unescape the HTML-encoded string\n\t\t\t\tconst unescapedOutput = unescapeHtml(attributes.output);\n\n\t\t\t\t// Parse the unescaped string into JSON\n\t\t\t\tconst output = JSON.parse(unescapedOutput);\n\n\t\t\t\t// Assign the parsed values to variables\n\t\t\t\tstdout = output.stdout;\n\t\t\t\tstderr = output.stderr;\n\t\t\t\tresult = output.result;\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error:', error);\n\t\t\t}\n\t\t}\n\t};\n\n\tonMount(async () => {\n\t\tconsole.log('codeblock', lang, code);\n\n\t\tif (lang) {\n\t\t\tonCode({ lang, code });\n\t\t}\n\t\tif (document.documentElement.classList.contains('dark')) {\n\t\t\tmermaid.initialize({\n\t\t\t\tstartOnLoad: true,\n\t\t\t\ttheme: 'dark',\n\t\t\t\tsecurityLevel: 'loose'\n\t\t\t});\n\t\t} else {\n\t\t\tmermaid.initialize({\n\t\t\t\tstartOnLoad: true,\n\t\t\t\ttheme: 'default',\n\t\t\t\tsecurityLevel: 'loose'\n\t\t\t});\n\t\t}\n\t});\n\n\tonDestroy(() => {\n\t\tif (pyodideWorker) {\n\t\t\tpyodideWorker.terminate();\n\t\t}\n\t});\n</script>\n\n<div>\n\t<div class=\"relative {className} flex flex-col rounded-lg\" dir=\"ltr\">\n\t\t{#if lang === 'mermaid'}\n\t\t\t{#if mermaidHtml}\n\t\t\t\t<SvgPanZoom\n\t\t\t\t\tclassName=\" border border-gray-100 dark:border-gray-850 rounded-lg max-h-fit overflow-hidden\"\n\t\t\t\t\tsvg={mermaidHtml}\n\t\t\t\t\tcontent={_token.text}\n\t\t\t\t/>\n\t\t\t{:else}\n\t\t\t\t<pre class=\"mermaid\">{code}</pre>\n\t\t\t{/if}\n\t\t{:else}\n\t\t\t<div class=\"text-text-300 absolute pl-4 py-1.5 text-xs font-medium dark:text-white\">\n\t\t\t\t{lang}\n\t\t\t</div>\n\n\t\t\t<div\n\t\t\t\tclass=\"sticky {stickyButtonsClassName} mb-1 py-1 pr-2.5 flex items-center justify-end z-10 text-xs text-black dark:text-white\"\n\t\t\t>\n\t\t\t\t<div class=\"flex items-center gap-0.5 translate-y-[1px]\">\n\t\t\t\t\t{#if lang.toLowerCase() === 'python' || lang.toLowerCase() === 'py' || (lang === '' && checkPythonCode(code))}\n\t\t\t\t\t\t{#if executing}\n\t\t\t\t\t\t\t<div class=\"run-code-button bg-none border-none p-1 cursor-not-allowed\">Running</div>\n\t\t\t\t\t\t{:else if run}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclass=\"run-code-button bg-none border-none bg-gray-50 hover:bg-gray-100 dark:bg-gray-850 dark:hover:bg-gray-800 transition rounded-md px-1.5 py-0.5\"\n\t\t\t\t\t\t\t\ton:click={async () => {\n\t\t\t\t\t\t\t\t\tcode = _code;\n\t\t\t\t\t\t\t\t\tawait tick();\n\t\t\t\t\t\t\t\t\texecutePython(code);\n\t\t\t\t\t\t\t\t}}>{$i18n.t('Run')}</button\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{/if}\n\n\t\t\t\t\t{#if save}\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclass=\"save-code-button bg-none border-none bg-gray-50 hover:bg-gray-100 dark:bg-gray-850 dark:hover:bg-gray-800 transition rounded-md px-1.5 py-0.5\"\n\t\t\t\t\t\t\ton:click={saveCode}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{saved ? $i18n.t('Saved') : $i18n.t('Save')}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t{/if}\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"copy-code-button bg-none border-none bg-gray-50 hover:bg-gray-100 dark:bg-gray-850 dark:hover:bg-gray-800 transition rounded-md px-1.5 py-0.5\"\n\t\t\t\t\t\ton:click={copyCode}>{copied ? $i18n.t('Copied') : $i18n.t('Copy')}</button\n\t\t\t\t\t>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div\n\t\t\t\tclass=\"language-{lang} rounded-t-lg -mt-8 {editorClassName\n\t\t\t\t\t? editorClassName\n\t\t\t\t\t: executing || stdout || stderr || result\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: 'rounded-b-lg'} overflow-hidden\"\n\t\t\t>\n\t\t\t\t<div class=\" pt-7 bg-gray-50 dark:bg-gray-850\"></div>\n\t\t\t\t<CodeEditor\n\t\t\t\t\tvalue={code}\n\t\t\t\t\t{id}\n\t\t\t\t\t{lang}\n\t\t\t\t\tonSave={() => {\n\t\t\t\t\t\tsaveCode();\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t_code = value;\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<div\n\t\t\t\tid=\"plt-canvas-{id}\"\n\t\t\t\tclass=\"bg-gray-50 dark:bg-[#202123] dark:text-white max-w-full overflow-x-auto scrollbar-hidden\"\n\t\t\t/>\n\n\t\t\t{#if executing || stdout || stderr || result || files}\n\t\t\t\t<div\n\t\t\t\t\tclass=\"bg-gray-50 dark:bg-[#202123] dark:text-white rounded-b-lg! py-4 px-4 flex flex-col gap-2\"\n\t\t\t\t>\n\t\t\t\t\t{#if executing}\n\t\t\t\t\t\t<div class=\" \">\n\t\t\t\t\t\t\t<div class=\" text-gray-500 text-xs mb-1\">STDOUT/STDERR</div>\n\t\t\t\t\t\t\t<div class=\"text-sm\">Running...</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t{#if stdout || stderr}\n\t\t\t\t\t\t\t<div class=\" \">\n\t\t\t\t\t\t\t\t<div class=\" text-gray-500 text-xs mb-1\">STDOUT/STDERR</div>\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclass=\"text-sm {stdout?.split('\\n')?.length > 100\n\t\t\t\t\t\t\t\t\t\t? `max-h-96`\n\t\t\t\t\t\t\t\t\t\t: ''}  overflow-y-auto\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{stdout || stderr}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t{#if result || files}\n\t\t\t\t\t\t\t<div class=\" \">\n\t\t\t\t\t\t\t\t<div class=\" text-gray-500 text-xs mb-1\">RESULT</div>\n\t\t\t\t\t\t\t\t{#if result}\n\t\t\t\t\t\t\t\t\t<div class=\"text-sm\">{`${JSON.stringify(result)}`}</div>\n\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t{#if files}\n\t\t\t\t\t\t\t\t\t<div class=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t\t\t{#each files as file}\n\t\t\t\t\t\t\t\t\t\t\t{#if file.type.startsWith('image')}\n\t\t\t\t\t\t\t\t\t\t\t\t<img src={file.data} alt=\"Output\" class=\" w-full max-w-[36rem]\" />\n\t\t\t\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{/if}\n\t</div>\n</div>\n","// Helper function to find matching closing tag\nfunction findMatchingClosingTag(src: string, openTag: string, closeTag: string): number {\n\tlet depth = 1;\n\tlet index = openTag.length;\n\twhile (depth > 0 && index < src.length) {\n\t\tif (src.startsWith(openTag, index)) {\n\t\t\tdepth++;\n\t\t} else if (src.startsWith(closeTag, index)) {\n\t\t\tdepth--;\n\t\t}\n\t\tif (depth > 0) {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn depth === 0 ? index + closeTag.length : -1;\n}\n\n// Function to parse attributes from tag\nfunction parseAttributes(tag: string): { [key: string]: string } {\n\tconst attributes: { [key: string]: string } = {};\n\tconst attrRegex = /(\\w+)=\"(.*?)\"/g;\n\tlet match;\n\twhile ((match = attrRegex.exec(tag)) !== null) {\n\t\tattributes[match[1]] = match[2];\n\t}\n\treturn attributes;\n}\n\nfunction detailsTokenizer(src: string) {\n\t// Updated regex to capture attributes inside <details>\n\tconst detailsRegex = /^<details(\\s+[^>]*)?>\\n/;\n\tconst summaryRegex = /^<summary>(.*?)<\\/summary>\\n/;\n\n\tconst detailsMatch = detailsRegex.exec(src);\n\tif (detailsMatch) {\n\t\tconst endIndex = findMatchingClosingTag(src, '<details', '</details>');\n\t\tif (endIndex === -1) return;\n\n\t\tconst fullMatch = src.slice(0, endIndex);\n\t\tconst detailsTag = detailsMatch[0];\n\t\tconst attributes = parseAttributes(detailsTag); // Parse attributes from <details>\n\n\t\tlet content = fullMatch.slice(detailsTag.length, -10).trim(); // Remove <details> and </details>\n\t\tlet summary = '';\n\n\t\tconst summaryMatch = summaryRegex.exec(content);\n\t\tif (summaryMatch) {\n\t\t\tsummary = summaryMatch[1].trim();\n\t\t\tcontent = content.slice(summaryMatch[0].length).trim();\n\t\t}\n\n\t\treturn {\n\t\t\ttype: 'details',\n\t\t\traw: fullMatch,\n\t\t\tsummary: summary,\n\t\t\ttext: content,\n\t\t\tattributes: attributes // Include extracted attributes from <details>\n\t\t};\n\t}\n}\n\nfunction detailsStart(src: string) {\n\treturn src.match(/^<details>/) ? 0 : -1;\n}\n\nfunction detailsRenderer(token: any) {\n\tconst attributesString = token.attributes\n\t\t? Object.entries(token.attributes)\n\t\t\t\t.map(([key, value]) => `${key}=\"${value}\"`)\n\t\t\t\t.join(' ')\n\t\t: '';\n\n\treturn `<details ${attributesString}>\n  ${token.summary ? `<summary>${token.summary}</summary>` : ''}\n  ${token.text}\n  </details>`;\n}\n\n// Extension wrapper function\nfunction detailsExtension() {\n\treturn {\n\t\tname: 'details',\n\t\tlevel: 'block',\n\t\tstart: detailsStart,\n\t\ttokenizer: detailsTokenizer,\n\t\trenderer: detailsRenderer\n\t};\n}\n\nexport default function (options = {}) {\n\treturn {\n\t\textensions: [detailsExtension(options)]\n\t};\n}\n","import katex from 'katex';\n\nconst DELIMITER_LIST = [\n\t{ left: '$$', right: '$$', display: true },\n\t{ left: '$', right: '$', display: false },\n\t{ left: '\\\\pu{', right: '}', display: false },\n\t{ left: '\\\\ce{', right: '}', display: false },\n\t{ left: '\\\\(', right: '\\\\)', display: false },\n\t{ left: '\\\\[', right: '\\\\]', display: true },\n\t{ left: '\\\\begin{equation}', right: '\\\\end{equation}', display: true }\n];\n\n// const DELIMITER_LIST = [\n//     { left: '$$', right: '$$', display: false },\n//     { left: '$', right: '$', display: false },\n// ];\n\n// const inlineRule = /^(\\${1,2})(?!\\$)((?:\\\\.|[^\\\\\\n])*?(?:\\\\.|[^\\\\\\n\\$]))\\1(?=[\\s?!\\.,:？！。，：]|$)/;\n// const blockRule = /^(\\${1,2})\\n((?:\\\\[^]|[^\\\\])+?)\\n\\1(?:\\n|$)/;\n\nlet inlinePatterns = [];\nlet blockPatterns = [];\n\nfunction escapeRegex(string) {\n\treturn string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nfunction generateRegexRules(delimiters) {\n\tdelimiters.forEach((delimiter) => {\n\t\tconst { left, right, display } = delimiter;\n\t\t// Ensure regex-safe delimiters\n\t\tconst escapedLeft = escapeRegex(left);\n\t\tconst escapedRight = escapeRegex(right);\n\n\t\tif (!display) {\n\t\t\t// For inline delimiters, we match everything\n\t\t\tinlinePatterns.push(`${escapedLeft}((?:\\\\\\\\[^]|[^\\\\\\\\])+?)${escapedRight}`);\n\t\t} else {\n\t\t\t// Block delimiters doubles as inline delimiters when not followed by a newline\n\t\t\tinlinePatterns.push(`${escapedLeft}(?!\\\\n)((?:\\\\\\\\[^]|[^\\\\\\\\])+?)(?!\\\\n)${escapedRight}`);\n\t\t\tblockPatterns.push(`${escapedLeft}\\\\n((?:\\\\\\\\[^]|[^\\\\\\\\])+?)\\\\n${escapedRight}`);\n\t\t}\n\t});\n\n\t// Math formulas can end in special characters\n\tconst inlineRule = new RegExp(\n\t\t`^(${inlinePatterns.join('|')})(?=[\\\\s?。，!-\\/:-@[-\\`{-~]|$)`,\n\t\t'u'\n\t);\n\tconst blockRule = new RegExp(`^(${blockPatterns.join('|')})(?=[\\\\s?。，!-\\/:-@[-\\`{-~]|$)`, 'u');\n\n\treturn { inlineRule, blockRule };\n}\n\nconst { inlineRule, blockRule } = generateRegexRules(DELIMITER_LIST);\n\nexport default function (options = {}) {\n\treturn {\n\t\textensions: [inlineKatex(options), blockKatex(options)]\n\t};\n}\n\nfunction katexStart(src, displayMode: boolean) {\n\tlet ruleReg = displayMode ? blockRule : inlineRule;\n\n\tlet indexSrc = src;\n\n\twhile (indexSrc) {\n\t\tlet index = -1;\n\t\tlet startIndex = -1;\n\t\tlet startDelimiter = '';\n\t\tlet endDelimiter = '';\n\t\tfor (let delimiter of DELIMITER_LIST) {\n\t\t\tif (delimiter.display !== displayMode) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tstartIndex = indexSrc.indexOf(delimiter.left);\n\t\t\tif (startIndex === -1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindex = startIndex;\n\t\t\tstartDelimiter = delimiter.left;\n\t\t\tendDelimiter = delimiter.right;\n\t\t}\n\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if the delimiter is preceded by a special character.\n\t\t// If it does, then it's potentially a math formula.\n\t\tconst f = index === 0 || indexSrc.charAt(index - 1).match(/[\\s?。，!-\\/:-@[-`{-~]/);\n\t\tif (f) {\n\t\t\tconst possibleKatex = indexSrc.substring(index);\n\n\t\t\tif (possibleKatex.match(ruleReg)) {\n\t\t\t\treturn index;\n\t\t\t}\n\t\t}\n\n\t\tindexSrc = indexSrc.substring(index + startDelimiter.length).replace(endDelimiter, '');\n\t}\n}\n\nfunction katexTokenizer(src, tokens, displayMode: boolean) {\n\tlet ruleReg = displayMode ? blockRule : inlineRule;\n\tlet type = displayMode ? 'blockKatex' : 'inlineKatex';\n\n\tconst match = src.match(ruleReg);\n\n\tif (match) {\n\t\tconst text = match\n\t\t\t.slice(2)\n\t\t\t.filter((item) => item)\n\t\t\t.find((item) => item.trim());\n\n\t\treturn {\n\t\t\ttype,\n\t\t\traw: match[0],\n\t\t\ttext: text,\n\t\t\tdisplayMode\n\t\t};\n\t}\n}\n\nfunction inlineKatex(options) {\n\treturn {\n\t\tname: 'inlineKatex',\n\t\tlevel: 'inline',\n\t\tstart(src) {\n\t\t\treturn katexStart(src, false);\n\t\t},\n\t\ttokenizer(src, tokens) {\n\t\t\treturn katexTokenizer(src, tokens, false);\n\t\t},\n\t\trenderer(token) {\n\t\t\treturn `${token?.text ?? ''}`;\n\t\t}\n\t};\n}\n\nfunction blockKatex(options) {\n\treturn {\n\t\tname: 'blockKatex',\n\t\tlevel: 'block',\n\t\tstart(src) {\n\t\t\treturn katexStart(src, true);\n\t\t},\n\t\ttokenizer(src, tokens) {\n\t\t\treturn katexTokenizer(src, tokens, true);\n\t\t},\n\t\trenderer(token) {\n\t\t\treturn `${token?.text ?? ''}`;\n\t\t}\n\t};\n}\n","<script lang=\"ts\">\n\timport katex from 'katex';\n\timport 'katex/contrib/mhchem';\n\timport 'katex/dist/katex.min.css';\n\n\texport let content: string;\n\texport let displayMode: boolean = false;\n</script>\n\n{@html katex.renderToString(content, { displayMode, throwOnError: false })}\n","<script lang=\"ts\">\n\texport let id;\n\texport let token;\n\texport let onClick: Function = () => {};\n\n\tlet attributes: Record<string, string | undefined> = {};\n\n\tfunction extractAttributes(input: string): Record<string, string> {\n\t\tconst regex = /(\\w+)=\"([^\"]*)\"/g;\n\t\tlet match;\n\t\tlet attrs: Record<string, string> = {};\n\n\t\t// Loop through all matches and populate the attributes object\n\t\twhile ((match = regex.exec(input)) !== null) {\n\t\t\tattrs[match[1]] = match[2];\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\t// Helper function to return only the domain from a URL\n\tfunction getDomain(url: string): string {\n\t\tconst domain = url.replace('http://', '').replace('https://', '').split(/[/?#]/)[0];\n\t\treturn domain;\n\t}\n\n\t// Helper function to check if text is a URL and return the domain\n\tfunction formattedTitle(title: string): string {\n\t\tif (title.startsWith('http')) {\n\t\t\treturn getDomain(title);\n\t\t}\n\n\t\treturn title;\n\t}\n\n\t$: attributes = extractAttributes(token.text);\n</script>\n\n{#if attributes.title !== 'N/A'}\n\t<button\n\t\tclass=\"text-xs font-medium w-fit translate-y-[2px] px-2 py-0.5 dark:bg-white/5 dark:text-white/60 dark:hover:text-white bg-gray-50 text-black/60 hover:text-black transition rounded-lg\"\n\t\ton:click={() => {\n\t\t\tonClick(id, attributes.data);\n\t\t}}\n\t>\n\t\t<span class=\"line-clamp-1\">\n\t\t\t{attributes.title ? formattedTitle(attributes.title) : ''}\n\t\t</span>\n\t</button>\n{/if}\n","<script lang=\"ts\">\n\timport DOMPurify from 'dompurify';\n\timport { toast } from 'svelte-sonner';\n\n\timport type { Token } from 'marked';\n\timport { getContext } from 'svelte';\n\n\tconst i18n = getContext('i18n');\n\n\timport { WEBUI_BASE_URL } from '$lib/constants';\n\timport { copyToClipboard, unescapeHtml } from '$lib/utils';\n\n\timport Image from '$lib/components/common/Image.svelte';\n\timport KatexRenderer from './KatexRenderer.svelte';\n\timport Source from './Source.svelte';\n\n\texport let id: string;\n\texport let tokens: Token[];\n\texport let onSourceClick: Function = () => {};\n</script>\n\n{#each tokens as token}\n\t{#if token.type === 'escape'}\n\t\t{unescapeHtml(token.text)}\n\t{:else if token.type === 'html'}\n\t\t{@const html = DOMPurify.sanitize(token.text)}\n\t\t{#if html && html.includes('<video')}\n\t\t\t{@html html}\n\t\t{:else if token.text.includes(`<iframe src=\"${WEBUI_BASE_URL}/api/v1/files/`)}\n\t\t\t{@html `${token.text}`}\n\t\t{:else if token.text.includes(`<source_id`)}\n\t\t\t<Source {id} {token} onClick={onSourceClick} />\n\t\t{:else}\n\t\t\t{token.text}\n\t\t{/if}\n\t{:else if token.type === 'link'}\n\t\t{#if token.tokens}\n\t\t\t<a href={token.href} target=\"_blank\" rel=\"nofollow\" title={token.title}>\n\t\t\t\t<svelte:self id={`${id}-a`} tokens={token.tokens} {onSourceClick} />\n\t\t\t</a>\n\t\t{:else}\n\t\t\t<a href={token.href} target=\"_blank\" rel=\"nofollow\" title={token.title}>{token.text}</a>\n\t\t{/if}\n\t{:else if token.type === 'image'}\n\t\t<Image src={token.href} alt={token.text} />\n\t{:else if token.type === 'strong'}\n\t\t<strong><svelte:self id={`${id}-strong`} tokens={token.tokens} {onSourceClick} /></strong>\n\t{:else if token.type === 'em'}\n\t\t<em><svelte:self id={`${id}-em`} tokens={token.tokens} {onSourceClick} /></em>\n\t{:else if token.type === 'codespan'}\n\t\t<!-- svelte-ignore a11y-click-events-have-key-events -->\n\t\t<!-- svelte-ignore a11y-no-noninteractive-element-interactions -->\n\t\t<code\n\t\t\tclass=\"codespan cursor-pointer\"\n\t\t\ton:click={() => {\n\t\t\t\tcopyToClipboard(unescapeHtml(token.text));\n\t\t\t\ttoast.success($i18n.t('Copied to clipboard'));\n\t\t\t}}>{unescapeHtml(token.text)}</code\n\t\t>\n\t{:else if token.type === 'br'}\n\t\t<br />\n\t{:else if token.type === 'del'}\n\t\t<del><svelte:self id={`${id}-del`} tokens={token.tokens} {onSourceClick} /></del>\n\t{:else if token.type === 'inlineKatex'}\n\t\t{#if token.text}\n\t\t\t<KatexRenderer content={token.text} displayMode={false} />\n\t\t{/if}\n\t{:else if token.type === 'iframe'}\n\t\t<iframe\n\t\t\tsrc=\"{WEBUI_BASE_URL}/api/v1/files/{token.fileId}/content\"\n\t\t\ttitle={token.fileId}\n\t\t\twidth=\"100%\"\n\t\t\tframeborder=\"0\"\n\t\t\tonload=\"this.style.height=(this.contentWindow.document.body.scrollHeight+20)+'px';\"\n\t\t></iframe>\n\t{:else if token.type === 'text'}\n\t\t{token.raw}\n\t{/if}\n{/each}\n","<script lang=\"ts\">\n\timport DOMPurify from 'dompurify';\n\timport { createEventDispatcher, onMount, getContext } from 'svelte';\n\tconst i18n = getContext('i18n');\n\n\timport fileSaver from 'file-saver';\n\tconst { saveAs } = fileSaver;\n\n\timport { marked, type Token } from 'marked';\n\timport { unescapeHtml } from '$lib/utils';\n\n\timport { WEBUI_BASE_URL } from '$lib/constants';\n\n\timport CodeBlock from '$lib/components/chat/Messages/CodeBlock.svelte';\n\timport MarkdownInlineTokens from '$lib/components/chat/Messages/Markdown/MarkdownInlineTokens.svelte';\n\timport KatexRenderer from './KatexRenderer.svelte';\n\timport Collapsible from '$lib/components/common/Collapsible.svelte';\n\timport Tooltip from '$lib/components/common/Tooltip.svelte';\n\timport ArrowDownTray from '$lib/components/icons/ArrowDownTray.svelte';\n\n\tconst dispatch = createEventDispatcher();\n\n\texport let id: string;\n\texport let tokens: Token[];\n\texport let top = true;\n\texport let attributes = {};\n\n\texport let save = false;\n\n\texport let onTaskClick: Function = () => {};\n\texport let onSourceClick: Function = () => {};\n\n\tconst headerComponent = (depth: number) => {\n\t\treturn 'h' + depth;\n\t};\n\n\tconst exportTableToCSVHandler = (token, tokenIdx = 0) => {\n\t\tconsole.log('Exporting table to CSV');\n\n\t\t// Extract header row text and escape for CSV.\n\t\tconst header = token.header.map((headerCell) => `\"${headerCell.text.replace(/\"/g, '\"\"')}\"`);\n\n\t\t// Create an array for rows that will hold the mapped cell text.\n\t\tconst rows = token.rows.map((row) =>\n\t\t\trow.map((cell) => {\n\t\t\t\t// Map tokens into a single text\n\t\t\t\tconst cellContent = cell.tokens.map((token) => token.text).join('');\n\t\t\t\t// Escape double quotes and wrap the content in double quotes\n\t\t\t\treturn `\"${cellContent.replace(/\"/g, '\"\"')}\"`;\n\t\t\t})\n\t\t);\n\n\t\t// Combine header and rows\n\t\tconst csvData = [header, ...rows];\n\n\t\t// Join the rows using commas (,) as the separator and rows using newline (\\n).\n\t\tconst csvContent = csvData.map((row) => row.join(',')).join('\\n');\n\n\t\t// Log rows and CSV content to ensure everything is correct.\n\t\tconsole.log(csvData);\n\t\tconsole.log(csvContent);\n\n\t\t// To handle Unicode characters, you need to prefix the data with a BOM:\n\t\tconst bom = '\\uFEFF'; // BOM for UTF-8\n\n\t\t// Create a new Blob prefixed with the BOM to ensure proper Unicode encoding.\n\t\tconst blob = new Blob([bom + csvContent], { type: 'text/csv;charset=UTF-8' });\n\n\t\t// Use FileSaver.js's saveAs function to save the generated CSV file.\n\t\tsaveAs(blob, `table-${id}-${tokenIdx}.csv`);\n\t};\n</script>\n\n<!-- {JSON.stringify(tokens)} -->\n{#each tokens as token, tokenIdx (tokenIdx)}\n\t{#if token.type === 'hr'}\n\t\t<hr class=\" border-gray-100 dark:border-gray-850\" />\n\t{:else if token.type === 'heading'}\n\t\t<svelte:element this={headerComponent(token.depth)} dir=\"auto\">\n\t\t\t<MarkdownInlineTokens id={`${id}-${tokenIdx}-h`} tokens={token.tokens} {onSourceClick} />\n\t\t</svelte:element>\n\t{:else if token.type === 'code'}\n\t\t{#if token.raw.includes('```')}\n\t\t\t<CodeBlock\n\t\t\t\tid={`${id}-${tokenIdx}`}\n\t\t\t\t{token}\n\t\t\t\tlang={token?.lang ?? ''}\n\t\t\t\tcode={token?.text ?? ''}\n\t\t\t\t{attributes}\n\t\t\t\t{save}\n\t\t\t\tonCode={(value) => {\n\t\t\t\t\tdispatch('code', value);\n\t\t\t\t}}\n\t\t\t\tonSave={(e) => {\n\t\t\t\t\tdispatch('update', {\n\t\t\t\t\t\traw: token.raw,\n\t\t\t\t\t\toldContent: token.text,\n\t\t\t\t\t\tnewContent: value\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t/>\n\t\t{:else}\n\t\t\t{token.text}\n\t\t{/if}\n\t{:else if token.type === 'table'}\n\t\t<div class=\"relative w-full group\">\n\t\t\t<div class=\"scrollbar-hidden relative overflow-x-auto max-w-full rounded-lg\">\n\t\t\t\t<table\n\t\t\t\t\tclass=\" w-full text-sm text-left text-gray-500 dark:text-gray-400 max-w-full rounded-xl\"\n\t\t\t\t>\n\t\t\t\t\t<thead\n\t\t\t\t\t\tclass=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-850 dark:text-gray-400 border-none\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<tr class=\"\">\n\t\t\t\t\t\t\t{#each token.header as header, headerIdx}\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tscope=\"col\"\n\t\t\t\t\t\t\t\t\tclass=\"px-3! py-1.5! cursor-pointer border border-gray-100 dark:border-gray-850\"\n\t\t\t\t\t\t\t\t\tstyle={token.align[headerIdx] ? '' : `text-align: ${token.align[headerIdx]}`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div class=\"flex flex-col gap-1.5 text-left\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"shrink-0 break-normal\">\n\t\t\t\t\t\t\t\t\t\t\t<MarkdownInlineTokens\n\t\t\t\t\t\t\t\t\t\t\t\tid={`${id}-${tokenIdx}-header-${headerIdx}`}\n\t\t\t\t\t\t\t\t\t\t\t\ttokens={header.tokens}\n\t\t\t\t\t\t\t\t\t\t\t\t{onSourceClick}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{#each token.rows as row, rowIdx}\n\t\t\t\t\t\t\t<tr class=\"bg-white dark:bg-gray-900 dark:border-gray-850 text-xs\">\n\t\t\t\t\t\t\t\t{#each row ?? [] as cell, cellIdx}\n\t\t\t\t\t\t\t\t\t<td\n\t\t\t\t\t\t\t\t\t\tclass=\"px-3! py-1.5! text-gray-900 dark:text-white w-max border border-gray-100 dark:border-gray-850\"\n\t\t\t\t\t\t\t\t\t\tstyle={token.align[cellIdx] ? '' : `text-align: ${token.align[cellIdx]}`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div class=\"flex flex-col break-normal\">\n\t\t\t\t\t\t\t\t\t\t\t<MarkdownInlineTokens\n\t\t\t\t\t\t\t\t\t\t\t\tid={`${id}-${tokenIdx}-row-${rowIdx}-${cellIdx}`}\n\t\t\t\t\t\t\t\t\t\t\t\ttokens={cell.tokens}\n\t\t\t\t\t\t\t\t\t\t\t\t{onSourceClick}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\n\t\t\t<div class=\" absolute top-1 right-1.5 z-20 invisible group-hover:visible\">\n\t\t\t\t<Tooltip content={$i18n.t('Export to CSV')}>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"p-1 rounded-lg bg-transparent transition\"\n\t\t\t\t\t\ton:click={(e) => {\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\texportTableToCSVHandler(token, tokenIdx);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ArrowDownTray className=\" size-3.5\" strokeWidth=\"1.5\" />\n\t\t\t\t\t</button>\n\t\t\t\t</Tooltip>\n\t\t\t</div>\n\t\t</div>\n\t{:else if token.type === 'blockquote'}\n\t\t<blockquote dir=\"auto\">\n\t\t\t<svelte:self id={`${id}-${tokenIdx}`} tokens={token.tokens} {onTaskClick} {onSourceClick} />\n\t\t</blockquote>\n\t{:else if token.type === 'list'}\n\t\t{#if token.ordered}\n\t\t\t<ol start={token.start || 1}>\n\t\t\t\t{#each token.items as item, itemIdx}\n\t\t\t\t\t<li dir=\"auto\" class=\"text-start\">\n\t\t\t\t\t\t{#if item?.task}\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tclass=\" translate-y-[1px] -translate-x-1\"\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tchecked={item.checked}\n\t\t\t\t\t\t\t\ton:change={(e) => {\n\t\t\t\t\t\t\t\t\tonTaskClick({\n\t\t\t\t\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t\t\t\t\ttoken: token,\n\t\t\t\t\t\t\t\t\t\ttokenIdx: tokenIdx,\n\t\t\t\t\t\t\t\t\t\titem: item,\n\t\t\t\t\t\t\t\t\t\titemIdx: itemIdx,\n\t\t\t\t\t\t\t\t\t\tchecked: e.target.checked\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/if}\n\n\t\t\t\t\t\t<svelte:self\n\t\t\t\t\t\t\tid={`${id}-${tokenIdx}-${itemIdx}`}\n\t\t\t\t\t\t\ttokens={item.tokens}\n\t\t\t\t\t\t\ttop={token.loose}\n\t\t\t\t\t\t\t{onTaskClick}\n\t\t\t\t\t\t\t{onSourceClick}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ol>\n\t\t{:else}\n\t\t\t<ul>\n\t\t\t\t{#each token.items as item, itemIdx}\n\t\t\t\t\t<li dir=\"auto\" class=\"text-start\">\n\t\t\t\t\t\t{#if item?.task}\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tclass=\" translate-y-[1px] -translate-x-1\"\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tchecked={item.checked}\n\t\t\t\t\t\t\t\ton:change={(e) => {\n\t\t\t\t\t\t\t\t\tonTaskClick({\n\t\t\t\t\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t\t\t\t\ttoken: token,\n\t\t\t\t\t\t\t\t\t\ttokenIdx: tokenIdx,\n\t\t\t\t\t\t\t\t\t\titem: item,\n\t\t\t\t\t\t\t\t\t\titemIdx: itemIdx,\n\t\t\t\t\t\t\t\t\t\tchecked: e.target.checked\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/if}\n\n\t\t\t\t\t\t<svelte:self\n\t\t\t\t\t\t\tid={`${id}-${tokenIdx}-${itemIdx}`}\n\t\t\t\t\t\t\ttokens={item.tokens}\n\t\t\t\t\t\t\ttop={token.loose}\n\t\t\t\t\t\t\t{onTaskClick}\n\t\t\t\t\t\t\t{onSourceClick}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t{/if}\n\t{:else if token.type === 'details'}\n\t\t<Collapsible\n\t\t\ttitle={token.summary}\n\t\t\tattributes={token?.attributes}\n\t\t\tclassName=\"w-full space-y-1\"\n\t\t\tdir=\"auto\"\n\t\t>\n\t\t\t<div class=\" mb-1.5\" slot=\"content\">\n\t\t\t\t<svelte:self\n\t\t\t\t\tid={`${id}-${tokenIdx}-d`}\n\t\t\t\t\ttokens={marked.lexer(token.text)}\n\t\t\t\t\tattributes={token?.attributes}\n\t\t\t\t\t{onTaskClick}\n\t\t\t\t\t{onSourceClick}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</Collapsible>\n\t{:else if token.type === 'html'}\n\t\t{@const html = DOMPurify.sanitize(token.text)}\n\t\t{#if html && html.includes('<video')}\n\t\t\t{@html html}\n\t\t{:else if token.text.includes(`<iframe src=\"${WEBUI_BASE_URL}/api/v1/files/`)}\n\t\t\t{@html `${token.text}`}\n\t\t{:else}\n\t\t\t{token.text}\n\t\t{/if}\n\t{:else if token.type === 'iframe'}\n\t\t<iframe\n\t\t\tsrc=\"{WEBUI_BASE_URL}/api/v1/files/{token.fileId}/content\"\n\t\t\ttitle={token.fileId}\n\t\t\twidth=\"100%\"\n\t\t\tframeborder=\"0\"\n\t\t\tonload=\"this.style.height=(this.contentWindow.document.body.scrollHeight+20)+'px';\"\n\t\t></iframe>\n\t{:else if token.type === 'paragraph'}\n\t\t<p dir=\"auto\">\n\t\t\t<MarkdownInlineTokens\n\t\t\t\tid={`${id}-${tokenIdx}-p`}\n\t\t\t\ttokens={token.tokens ?? []}\n\t\t\t\t{onSourceClick}\n\t\t\t/>\n\t\t</p>\n\t{:else if token.type === 'text'}\n\t\t{#if top}\n\t\t\t<p dir=\"auto\">\n\t\t\t\t{#if token.tokens}\n\t\t\t\t\t<MarkdownInlineTokens id={`${id}-${tokenIdx}-t`} tokens={token.tokens} {onSourceClick} />\n\t\t\t\t{:else}\n\t\t\t\t\t{unescapeHtml(token.text)}\n\t\t\t\t{/if}\n\t\t\t</p>\n\t\t{:else if token.tokens}\n\t\t\t<MarkdownInlineTokens\n\t\t\t\tid={`${id}-${tokenIdx}-p`}\n\t\t\t\ttokens={token.tokens ?? []}\n\t\t\t\t{onSourceClick}\n\t\t\t/>\n\t\t{:else}\n\t\t\t{unescapeHtml(token.text)}\n\t\t{/if}\n\t{:else if token.type === 'inlineKatex'}\n\t\t{#if token.text}\n\t\t\t<KatexRenderer content={token.text} displayMode={token?.displayMode ?? false} />\n\t\t{/if}\n\t{:else if token.type === 'blockKatex'}\n\t\t{#if token.text}\n\t\t\t<KatexRenderer content={token.text} displayMode={token?.displayMode ?? false} />\n\t\t{/if}\n\t{:else if token.type === 'space'}\n\t\t<div class=\"my-2\" />\n\t{:else}\n\t\t{console.log('Unknown token', token)}\n\t{/if}\n{/each}\n","<script>\n\timport { marked } from 'marked';\n\timport { replaceTokens, processResponseContent } from '$lib/utils';\n\timport { user } from '$lib/stores';\n\n\timport markedExtension from '$lib/utils/marked/extension';\n\timport markedKatexExtension from '$lib/utils/marked/katex-extension';\n\n\timport MarkdownTokens from './Markdown/MarkdownTokens.svelte';\n\timport { createEventDispatcher } from 'svelte';\n\n\tconst dispatch = createEventDispatcher();\n\n\texport let id;\n\texport let content;\n\texport let model = null;\n\texport let save = false;\n\n\texport let sourceIds = [];\n\n\texport let onSourceClick = () => {};\n\texport let onTaskClick = () => {};\n\n\tlet tokens = [];\n\n\tconst options = {\n\t\tthrowOnError: false\n\t};\n\n\tmarked.use(markedKatexExtension(options));\n\tmarked.use(markedExtension(options));\n\n\t$: (async () => {\n\t\tif (content) {\n\t\t\ttokens = marked.lexer(\n\t\t\t\treplaceTokens(processResponseContent(content), sourceIds, model?.name, $user?.name)\n\t\t\t);\n\t\t}\n\t})();\n</script>\n\n{#key id}\n\t<MarkdownTokens\n\t\t{tokens}\n\t\t{id}\n\t\t{save}\n\t\t{onTaskClick}\n\t\t{onSourceClick}\n\t\ton:update={(e) => {\n\t\t\tdispatch('update', e.detail);\n\t\t}}\n\t\ton:code={(e) => {\n\t\t\tdispatch('code', e.detail);\n\t\t}}\n\t/>\n{/key}\n"],"names":["value","uuidv4","unescapeHtml","inlineRule","blockRule"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEkB,wBAAA;AAEb,MAAA;AAEA,MAAA;AA4BJ,YAAA,MAAA;AACC,aAAS,WAAA;AAAA;sCAQK,eAAa,CAAA,CAAA,IAAA,MAAA,UAAA,MAAA,QAAA,CAAA,CAAA,IAAA,EAAA;;;QC1CjB,YAAY,SAAA,IAAA;QACZ,cAAc,MAAA,IAAA;;;AAOX,SAAA,0EAAA,cAAA,gBAAA,+DAEP,WAAS,CAAA,CAAA;;;;;;;ACPF,MAAA,EAAA,MAAM,GAAE,IAAA;AACR,MAAA,EAAA,WAAW,GAAE,IAAA;AACb,MAAA,EAAA,WAAW,MAAK,IAAA;AAaV,wBAAqB;;;;;;;;;;;;;;ACd5B,aAAW,MAAM;AASnB,MAAA,EAAA,KAAA,IAAA;QACA,OAAO,MAAA,IAAA;QACP,OAAO,MAAA,IAAA;MAEd,oBAAoB;MAEjB,kBAAkB;;;;;;;;;;;AAEtB,YACF,MAAM,MAAM,iBAAiB,qBAC5B,MAAM,QAAQ,MAAM,KAAK,YAAc,EAAA,SAAS,MAAM;AAErD,cACF,MAAM,MAAM,cAAc,SAAS,aAAa,KAChD,MAAM,MAAM,cAAc,SAAS,OAAO,KAC1C,MAAM,MAAM,cAAc,SAAS,UAAU,KAC5C,MAAM,QAAQ,4CAA4C,KAAK,MAAM,IAAI;;;;;mBAsDtC;AAAA;;;;;;;;;;;AAkBT,iBAAA,wQAAA,OAAA,MAAM,QAAQ,MAAM,CAM5B,qBAAA,WAAW,wLAgCH,EAAA,iBAAA,mBAAA,OAAA,OAAA,EAAA,SAAA,UAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA,uKAAA,KAAK,kDAC4B,eAAe,KAAK,IAAI,CAAA,CAAA;AAAA,iCAIzD,EAAA,IAAA,MAAM,MAAM,MAAM,qDAEd,aAAa,MAAM,MAAM,MAAM,WAAW,EAAE,CAAA,CAAA,wEAAA,mBAAA,MAAA,MAAA,EAAA,SAAA,UAAA,CAAA,GAAA,IAAA,CAAA,CAAA,CAAA;AAAA,iGAUpD;;;cAGgB,SAAA,oBACH,gHACA;AAAA;;;;yEAGG;;2BAMW,kBAAiB;AAAA;;AAAjB,0CAAiB;;;;;;;;sFAcpD,QAEU,UAAA,cAAA,SAAA,MAAM,MAAI,CAAA,CAAA,GAAA,cAAA,OAAA,GACT,kBAAkB,UAAU,KAAK,EAAE,YAAA,CAAA,CAAA,mEAGzC;;;sBAGM,kBAAkB,UAAU,KAAK,EAAE;AAAA,cACjC,UAAA,KAAK;AAAA,wBACL;AAAA;;;gBAKT,sFAAA,OAAA,MAAM,MAAM,MAAM,WAAW,YAAY,CAAA,QAAA,EAAA;AAAA;;;;;;SCvKpD,YAAY,UAAA;QACd,kBAAmB,CAAA,QAAQ,SAAS,QAAQ,MAAM;AACjD,SAAA,gBAAgB,KAAK,SAAO,SAAS,cAAc,SAAS,GAAG,CAAA;;;;AAzBjE,QAAA,OAAO,WAAW,MAAM;;AACb,wBAAA;QAEN,YAAY,OAAA,IAAA;QACZ,iBAAiB,sEAAA,IAAA;QACjB,MAAqB,KAAA,IAAA;QAErB,cAAc,MAAA,IAAA;QACd,UAAU,MAAA,IAAA;QAEV,OAAO,KAAA,IAAA;QACP,OAAO,MAAA,IAAA;QACP,QAAQ,MAAA,IAAA;AAER,MAAA,EAAA,KAAA,IAAA;AACA,MAAA,EAAA,KAAA,IAAA;AACA,MAAA,EAAA,KAAA,IAAA;MAIP,YAAY;AAcC,cAAY,IAAI,IAAI,UAAU;;;;;;;;;;;;;;;;;;oBAG3C;;oBACsB,WAAS,KAAA;AAAA;;AAAT,sBAAS;;;;;;;;;gEAIN,WAAS,IAAA,IAAA,8BAAA,OAA2B,gBAAiB,IAAA,IAAA,MAAA,OAAA,QAC/E,eACA,uDAyBG;MACY,YAAY,IAAI,IAAI,4EAA4E;AAAA;2BAC1G,UACA,GAAA,YAAY,IAAI,04CAyClB,6JAGF,IAAI,CAAA,+EAIA,YAAY,IAAI,cACnB,MAAM,EAAE,OAAO,CAAA,CAAA,KACP,GAAA,SAAS,mBACjB,MAAM,EAAE,MAAM,CAAA,CAAA,KACN,GAAA,SAAS,kBACjB,MAAM,EAAE,UAAU,CAAA,CAAA,KACV,GAAA,SAAS,yBACjB,MAAM,EAAE,YAAY,CAAA,CAAA,KAEkB,yCAAA,OAAA,IAAI,oBAEvC,OACsB,4BAAA,OAAA,eAAe,IAAI,CAAA,CAAA;;;iBAK9B;AAAA;;;;;;mKAGV,uMAKyC,IAAI,CAAA,iEAAA,OACM,eAAe,IAAI,CAAA,CAAA;AAAA;;WAM1E;;;;;;QChKM,OAAO,MAAA,IAAA;QACP,MAAM,GAAA,IAAA;QACN,MAAM,GAAA,IAAA;MAIb,iBAAiB;QAkBf,gBAAiB,WAAA;AAClB,QAAA,MAAM,QAAQ,UAAA;AACjB,cAAQ,IAAI,QAAQ;AACpB,aAAO;AAAA;;AAkBT,YAAA,MAAA;AACC,WAAO;AAAA;;;;;QAXD,QAAQ,gBAAA;AACd,eAAS,KAAK,YAAY,cAAc;AACxC,aAAO,iBAAiB,WAAW,aAAa;AAChD,eAAS,KAAK,MAAM,WAAW;AAAA;;YAgB5B,uMAIQ,gBAAc,CAAA,CAAA,84BAAA,cAAA,OAAA,KAAA,CAAA,CAAA,GAAA,cAAA,OAAA,KAAA,CAAA,CAAA;;;QCzDf,MAAM,GAAA,IAAA;QACN,MAAM,GAAA,IAAA;QAEN,YAAY,8CAAA,IAAA;QACZ,iBAAiB,aAAA,IAAA;MAExB,OAAO;MAGP,mBAAmB;;;;;;;;;;;AAFpB,WAAO,IAAI,WAAW,GAAG,OAAO,cAAc,GAAG,GAAG,KAAK;kDAMrD,WAAS,CAAA,CAAA,sBAAA,cAAA,OAMN,MAAI,CAAA,CAAA,GAAA,cAAA,OAAA,KAAA,CAAA,CAAA,GAAA,cAAA,SAAe,gBAAc,CAAA,CAAA,gDAAA,mBAAA,cAAA,cAAA,EAAA;AAAA;MAGI,EAAA,KAAA,iBAAvB,iBAAgB;AAAA;;AAAhB,6BAAgB;;;;;;;;;;;;;QCvB7B,YAAY,SAAA,IAAA;AACZ,MAAA,EAAA,MAAA,GAAS,cAAc,sBAAA,IAAA;;;;;IAK7B,QAAQ,QACP,cAAc,wBACjB,IAAI,WAAW,cAAc,KAC5B,IAAI,WAAW,kCAAkC,KACjD,IAAI,WAAW,OAAO,KACtB,IAAI,WAAW,GAAG,IAClB;;0BAEK,WAAS,IAAA,IAAA,+CAAA;;;;ACCD,wBAAA;AACX,QAAA,OAAO,WAAW,MAAM;;QAEnB,cAAc,GAAA,IAAA;QACd,OAAAA,SAAQ,GAAA,IAAA;AAER,MAAA,EAAA,SAAA,MAAA;AAAA;AACA,MAAA,EAAA,WAAA,MAAA;AAAA;MAEP,SAAS;AAMP,QAAA,cAAA,MAAA;QACD,WAAWA,QAAA;AACd,eAASA;AAAA;;QASA,KAAK,GAAA,IAAA;QACL,OAAO,GAAA,IAAA;AAEd,MAAA;AAES,QAAA,QAAA,MAAA;AACZ,eAAW,MAAA;AAAA;MAIR,cAAkB,IAAA;MAClB,iBAAqB,IAAA;AAEzB,YAAU,KACT,oBAAoB,GAAA;AAAA,IACnB,MAAM;AAAA,IACN,YAAA,CAAa,OAAO,IAAI;AAAA,IACxB,OAAA;oBACe,qBAAqB,EAAE,KAAM,OAAM,EAAE,IAAA,CAAA;AAAA;;AAIhD,QAAA,UAAA,YAAA;AACC,UAAA,WAAW,UAAU,KAAM,OAAM,EAAE,MAAM,SAAS,IAAI,CAAA;iBAC/C,UAAU;;AAGX,QAAA,0BAAA,YAAA;AAsBL,WAAA;AAAA;AAGJ;AAAA,IACH;AAAA,IACA,OAAO,GAAM,CAAA,EAAA,KAAK,OAAO,KAAK,oBAAoB,aAAa,CAAA;AAAA,IAC/D,WAAW,GAAG,MAAM;AAAA,IACpB,YAAY,yBAAyB;AAAA,IACrC,WAAW,eAAe,GAAI,OAAA;UACzB,EAAE,YAAA;AACL,iBAAS,EAAE,MAAM,IAAI,SAAA;AACrB,iBAAS,MAAM;AAAA;;IAGjB,YAAY,GAAA,EAAA;AAAA,IACZ,eAAe,GAAA,EAAA;AAAA;AAOV,QAAA,cAAA,YAAA;UACC,WAAiB,MAAA;QACnB,YAAY,YAAA;AACf,iBAAW,SAAA;AAAA,QACV,SAAS,eAAe,YAAY,QAAQ;AAAA;;;;;;;;;;;;AA1FxC,QAAAA,QAAA;AACN;;;;AAiFM,QAAA,MAAA;AACN;;;;+CAwFsB,IAAE,IAAA,CAAA;;;QCvMd,YAAY,SAAA,IAAA;QACZ,cAAc,IAAA,IAAA;;;AAOX,SAAA,0EAAA,cAAA,gBAAA,+DAEP,WAAS,CAAA,CAAA;;;QCVL,YAAY,SAAA,IAAA;QACZ,cAAc,IAAA,IAAA;;;AAOX,SAAA,0EAAA,cAAA,gBAAA,+DAEP,WAAS,CAAA,CAAA;;;;ACDV,QAAA,OAAO,WAAW,MAAM;;QAUnB,YAAY,GAAA,IAAA;QACZ,MAAM,GAAA,IAAA;QACN,UAAU,GAAA,IAAA;AAIjB,MAAA;AACA,MAAA;;;;;AAsBgD,SAAA,eAAA,cAAA,OAAA,0CAArC,oBAAkB,CAAA,CAAA,mEAAA,cAAA,QACjB,cACR,CAAA,CAAA,2BAAA,GAAG,+BAGN,8IAGgB,MAAM,EAAE,iBAAiB,EAAA,GAAA,CAAA,GAAA;AAAA;;;6EAWzB,MAAM,EAAE,YAAY,EAAA,GAAA,CAAA,GAAA;AAAA;;;6EAWpB,MAAM,EAAE,mBAAmB,EAAA,GAAA,CAAA,GAAA;AAAA;;;;;;;;;AC9D1C,QAAA,OAAO,WAAW,MAAM;;QAEnB,KAAK,GAAA,IAAA;QAEL,SAAU,OAAA;AAAA;QACV,SAAU,OAAA;AAAA;QAEV,OAAO,MAAA,IAAA;QACP,MAAM,KAAA,IAAA;AAEN,MAAA,EAAA,MAAA,IAAA;QACA,OAAO,GAAA,IAAA;QACP,OAAO,GAAA,IAAA;AACP,MAAA,EAAA,aAAA,GAAA,IAAA;QAEA,YAAY,OAAA,IAAA;QACZ,kBAAkB,GAAA,IAAA;QAClB,yBAAyB,QAAA,IAAA;MAIhC,QAAQ;AAKN,QAAA,aAAA,MAAA;AACL,YAAQ;AAAA;MAGL,SAAS;MAET,cAAc;MAKd,SAAS;MACT,SAAS;MACT,SAAS;MACT,QAAQ;MAGR,QAAQ;AAEN,QAAA,WAAA,MAAA;AACL,YAAQ;AAER,WAAO;AACP,WAAO,IAAI;AAEX;AAAA;AACC,gBAAQ;AAAA;MACN;AAAA;;QAYE,kBAAmB,SAAA;AAElB,UAAA,eAAA;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;aAGQ,UAAU,cAAA;AACd,UAAA,IAAI,SAAS,MAAM,GAAA;AACf,eAAA;AAAA;;AAKF,WAAA;AAAA;AAoMF,QAAA,qBAAA,YAAA;;AAEM,UAAA,MAAA,QAAQ,MAAM,IAAI,GAAA;gBACnB,IAAc,IAAA,MAAA,QAAQ,OAAkB,WAAAC,GAAA,CAAA,IAAY,IAAI;AAChE,sBAAc;AAAA;IAEP,SAAA,OAAA;AACR,cAAQ,IAAI,UAAU,KAAK;AAAA;;AAIvB,QAAA,SAAA,YAAA;QACD,SAAS,cAAc,OAAO,OAAO,IAAI,QAAQ,EAAE,SAAS,KAAK,GAAA;;AAE7D,cAAA,mBAAA;AAAA;;;AAqBH,QAAA,qBAAA,MAAA;QACD,YAAY,QAAA;YAETC,gBAAgB,UAAA;cACf,WAAW,SAAS,cAAc,UAAU;AAClD,iBAAS,YAAY;eACd,SAAS;AAAA;;cAKV,kBAAkBA,cAAa,WAAW,MAAM;cAGhD,SAAS,KAAK,MAAM,eAAe;AAGzC,iBAAS,OAAO;AAChB,iBAAS,OAAO;AAChB,iBAAS,OAAO;AAAA,MACR,SAAA,OAAA;AACR,gBAAQ,MAAM,UAAU,KAAK;AAAA;;;AA0BhC,YAAA,MAAA;AAAA;;;;;;;;;;;;;;AAjWO,QAAA,MAAA;AACN;;;;AAiSM,QAAA,OAAA;AACF,UAAA,KAAK,UAAU,KAAK,MAAM,KAAK,UAAU,MAAM,GAAA;AAClD,iBAAS;AAAA;;;;AAIJ,QAAA,QAAA;AACN;;;;AAGE,WAAA,EAAS,MAAM,KAAA,CAAA;AAAA;;AAEX,QAAA,YAAA;AACN;;;;;kDA0DqB,WAAS,IAAA,IAAA,2BAAA,eACzB,SAAS,eACR;;;;WAGE;AAAA,MACI,SAAA,OAAO;AAAA;;;uCAGK,IAAI,CAAA,QAAA,mGAIzB,IAAI,CAAA,sBAAA,YAAA,OAIU,wBAGT,IAAA,IAAA,yFAAA,8DAAA,KAAK,YAAW,MAAO,YAAY,KAAK,YAAW,MAAO,QAAS,SAAS,MAAM,gBAAgB,IAAI,UAGhG,6KAOJ,MAAM,EAAE,KAAK,CAAA,CAAA,6BAKf,+KAKF,QAAQ,MAAM,EAAE,OAAO,IAAI,MAAM,EAAE,MAAM,CAAA,CAAA,cAMtB,EAAA,kKAAA,OAA6B,MAAM,EAAE,MAAM,4DAMjD,MAAI,IAAA,IAAA,yBAAA;AAAA,IAAsB,kBACxC,kBACa,UAAU,UAAU,SAChC,KACA;AAAA;;;;aAII;AAAA;;;AAIN;;gBAEU,CAAAF,WAAK;AACf,gBAAQA;AAAA;;;;6CAMM,IAAE,IAAA,CAAA,6GAID,UAAU,UAAU,UAAU,iHAUxC,GAAA,UAAU,SAII,uHAAA,aAAA,OAAA,QAAQ,MAAM,IAAI,GAAG,SAAS,MAAA,aAE3C,IAAE,IAAA,IAAA,kBAAA,KAAA,OAEJ,UAAU,MAAM,CAAA,iBAIf,EAAA,IAAA,UAAU,6GAGR,2CACqB,KAAK,UAAU,MAAM,CAAA,EAAA,CAAA;;ACtfvD,SAAS,uBAAuB,KAAa,SAAiB,UAA0B;AACvF,MAAI,QAAQ;AACZ,MAAI,QAAQ,QAAQ;AACpB,SAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ;AACvC,QAAI,IAAI,WAAW,SAAS,KAAK,GAAG;AACnC;AAAA,IACU,WAAA,IAAI,WAAW,UAAU,KAAK,GAAG;AAC3C;AAAA,IACD;AACA,QAAI,QAAQ,GAAG;AACd;AAAA,IACD;AAAA,EACD;AACA,SAAO,UAAU,IAAI,QAAQ,SAAS,SAAS;AAChD;AAGA,SAAS,gBAAgB,KAAwC;AAChE,QAAM,aAAwC,CAAA;AAC9C,QAAM,YAAY;AACd,MAAA;AACJ,UAAQ,QAAQ,UAAU,KAAK,GAAG,OAAO,MAAM;AAC9C,eAAW,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC;AAAA,EAC/B;AACO,SAAA;AACR;AAEA,SAAS,iBAAiB,KAAa;AAEtC,QAAM,eAAe;AACrB,QAAM,eAAe;AAEf,QAAA,eAAe,aAAa,KAAK,GAAG;AAC1C,MAAI,cAAc;AACjB,UAAM,WAAW,uBAAuB,KAAK,YAAY,YAAY;AACrE,QAAI,aAAa,GAAI;AAErB,UAAM,YAAY,IAAI,MAAM,GAAG,QAAQ;AACjC,UAAA,aAAa,aAAa,CAAC;AAC3B,UAAA,aAAa,gBAAgB,UAAU;AAE7C,QAAI,UAAU,UAAU,MAAM,WAAW,QAAQ,GAAG,EAAE;AACtD,QAAI,UAAU;AAER,UAAA,eAAe,aAAa,KAAK,OAAO;AAC9C,QAAI,cAAc;AACP,gBAAA,aAAa,CAAC,EAAE,KAAK;AAC/B,gBAAU,QAAQ,MAAM,aAAa,CAAC,EAAE,MAAM,EAAE;IACjD;AAEO,WAAA;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,MACL;AAAA,MACA,MAAM;AAAA,MACN;AAAA;AAAA,IAAA;AAAA,EAEF;AACD;AAEA,SAAS,aAAa,KAAa;AAClC,SAAO,IAAI,MAAM,YAAY,IAAI,IAAI;AACtC;AAEA,SAAS,gBAAgB,OAAY;AAC9B,QAAA,mBAAmB,MAAM,aAC5B,OAAO,QAAQ,MAAM,UAAU,EAC9B,IAAI,CAAC,CAAC,KAAKA,MAAK,MAAM,GAAG,GAAG,KAAKA,MAAK,GAAG,EACzC,KAAK,GAAG,IACT;AAEH,SAAO,YAAY,gBAAgB;AAAA,IAChC,MAAM,UAAU,YAAY,MAAM,OAAO,eAAe,EAAE;AAAA,IAC1D,MAAM,IAAI;AAAA;AAEd;AAGA,SAAS,mBAAmB;AACpB,SAAA;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,WAAW;AAAA,IACX,UAAU;AAAA,EAAA;AAEZ;AAEyB,SAAA,gBAAA,UAAU,CAAA,GAAI;AAC/B,SAAA;AAAA,IACN,YAAY,CAAC,iBAAwB,CAAC;AAAA,EAAA;AAExC;AC3FA,MAAM,iBAAiB;AAAA,EACtB,EAAE,MAAM,MAAM,OAAO,MAAM,SAAS,KAAK;AAAA,EACzC,EAAE,MAAM,KAAK,OAAO,KAAK,SAAS,MAAM;AAAA,EACxC,EAAE,MAAM,SAAS,OAAO,KAAK,SAAS,MAAM;AAAA,EAC5C,EAAE,MAAM,SAAS,OAAO,KAAK,SAAS,MAAM;AAAA,EAC5C,EAAE,MAAM,OAAO,OAAO,OAAO,SAAS,MAAM;AAAA,EAC5C,EAAE,MAAM,OAAO,OAAO,OAAO,SAAS,KAAK;AAAA,EAC3C,EAAE,MAAM,qBAAqB,OAAO,mBAAmB,SAAS,KAAK;AACtE;AAUA,IAAI,iBAAiB,CAAA;AACrB,IAAI,gBAAgB,CAAA;AAEpB,SAAS,YAAY,QAAQ;AACrB,SAAA,OAAO,QAAQ,0BAA0B,MAAM;AACvD;AAEA,SAAS,mBAAmB,YAAY;AAC5B,aAAA,QAAQ,CAAC,cAAc;AACjC,UAAM,EAAE,MAAM,OAAO,QAAA,IAAY;AAE3B,UAAA,cAAc,YAAY,IAAI;AAC9B,UAAA,eAAe,YAAY,KAAK;AAEtC,QAAI,CAAC,SAAS;AAEb,qBAAe,KAAK,GAAG,WAAW,0BAA0B,YAAY,EAAE;AAAA,IAAA,OACpE;AAEN,qBAAe,KAAK,GAAG,WAAW,wCAAwC,YAAY,EAAE;AACxF,oBAAc,KAAK,GAAG,WAAW,gCAAgC,YAAY,EAAE;AAAA,IAChF;AAAA,EAAA,CACA;AAGD,QAAMG,cAAa,IAAI;AAAA,IACtB,KAAK,eAAe,KAAK,GAAG,CAAC;AAAA,IAC7B;AAAA,EAAA;AAEKC,QAAAA,aAAY,IAAI,OAAO,KAAK,cAAc,KAAK,GAAG,CAAC,gCAAiC,GAAG;AAE7F,SAAO,EAAE,YAAAD,aAAY,WAAAC,WAAU;AAChC;AAEA,MAAM,EAAE,YAAY,UAAU,IAAI,mBAAmB,cAAc;AAE1C,SAAA,qBAAA,UAAU,CAAA,GAAI;AAC/B,SAAA;AAAA,IACN,YAAY,CAAC,YAAmB,GAAG,WAAkB,CAAC;AAAA,EAAA;AAExD;AAEA,SAAS,WAAW,KAAK,aAAsB;AAC1C,MAAA,UAAU,cAAc,YAAY;AAExC,MAAI,WAAW;AAEf,SAAO,UAAU;AAChB,QAAI,QAAQ;AACZ,QAAI,aAAa;AACjB,QAAI,iBAAiB;AACrB,QAAI,eAAe;AACnB,aAAS,aAAa,gBAAgB;AACjC,UAAA,UAAU,YAAY,aAAa;AACtC;AAAA,MACD;AAEa,mBAAA,SAAS,QAAQ,UAAU,IAAI;AAC5C,UAAI,eAAe,IAAI;AACtB;AAAA,MACD;AAEQ,cAAA;AACR,uBAAiB,UAAU;AAC3B,qBAAe,UAAU;AAAA,IAC1B;AAEA,QAAI,UAAU,IAAI;AACjB;AAAA,IACD;AAIM,UAAA,IAAI,UAAU,KAAK,SAAS,OAAO,QAAQ,CAAC,EAAE,MAAM,sBAAsB;AAChF,QAAI,GAAG;AACA,YAAA,gBAAgB,SAAS,UAAU,KAAK;AAE1C,UAAA,cAAc,MAAM,OAAO,GAAG;AAC1B,eAAA;AAAA,MACR;AAAA,IACD;AAEW,eAAA,SAAS,UAAU,QAAQ,eAAe,MAAM,EAAE,QAAQ,cAAc,EAAE;AAAA,EACtF;AACD;AAEA,SAAS,eAAe,KAAK,QAAQ,aAAsB;AACtD,MAAA,UAAU,cAAc,YAAY;AACpC,MAAA,OAAO,cAAc,eAAe;AAElC,QAAA,QAAQ,IAAI,MAAM,OAAO;AAE/B,MAAI,OAAO;AACV,UAAM,OAAO,MACX,MAAM,CAAC,EACP,OAAO,CAAC,SAAS,IAAI,EACrB,KAAK,CAAC,SAAS,KAAK,KAAM,CAAA;AAErB,WAAA;AAAA,MACN;AAAA,MACA,KAAK,MAAM,CAAC;AAAA,MACZ;AAAA,MACA;AAAA,IAAA;AAAA,EAEF;AACD;AAEA,SAAS,YAAY,SAAS;AACtB,SAAA;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM,KAAK;AACH,aAAA,WAAW,KAAK,KAAK;AAAA,IAC7B;AAAA,IACA,UAAU,KAAK,QAAQ;AACf,aAAA,eAAe,KAAK,QAAQ,KAAK;AAAA,IACzC;AAAA,IACA,SAAS,OAAO;AACR,aAAA,GAAG,OAAO,QAAQ,EAAE;AAAA,IAC5B;AAAA,EAAA;AAEF;AAEA,SAAS,WAAW,SAAS;AACrB,SAAA;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM,KAAK;AACH,aAAA,WAAW,KAAK,IAAI;AAAA,IAC5B;AAAA,IACA,UAAU,KAAK,QAAQ;AACf,aAAA,eAAe,KAAK,QAAQ,IAAI;AAAA,IACxC;AAAA,IACA,SAAS,OAAO;AACR,aAAA,GAAG,OAAO,QAAQ,EAAE;AAAA,IAC5B;AAAA,EAAA;AAEF;;ACxJY,MAAA,EAAA,QAAA,IAAA;QACA,cAAuB,MAAA,IAAA;;;mCAG5B,MAAM,eAAe,WAAW,aAAa,cAAc,OAAK,CAAA;;SCF7D,kBAAkB,OAAA;QACpB,QAAQ;AACV,MAAA;AACA,MAAA,QAAA,CAAA;UAGI,QAAQ,MAAM,KAAK,KAAK,OAAO,MAAA;AACtC,UAAM,MAAM,CAAC,CAAK,IAAA,MAAM,CAAC;AAAA;AAGnB,SAAA;;SAIC,UAAU,KAAA;AACZ,QAAA,SAAS,IAAI,QAAQ,WAAW,EAAE,EAAE,QAAQ,YAAY,EAAE,EAAE,MAAM,OAAO,EAAE,CAAC;AAC3E,SAAA;;SAIC,eAAe,OAAA;AACnB,MAAA,MAAM,WAAW,MAAM,GAAA;AACnB,WAAA,UAAU,KAAK;AAAA;AAGhB,SAAA;;;AA/BG,MAAA,EAAA,GAAA,IAAA;AACA,MAAA,EAAA,MAAA,IAAA;AACA,MAAA,EAAA,UAAA,MAAA;AAAA;AAEP,MAAA,aAAA,CAAA;;;;AA8BD,eAAa,kBAAkB,MAAM,IAAI;YAGxC,WAAW,UAAU,8OAQtB,WAAW,QAAQ,eAAe,WAAW,KAAK,IAAI,EAAE,CAAA;;;;ACvCrD,QAAA,OAAO,WAAW,MAAM;;AASnB,MAAA,EAAA,GAAA,IAAA;AACA,MAAA,EAAA,OAAA,IAAA;AACA,MAAA,EAAA,gBAAA,MAAA;AAAA;;;;;iBAGL,QAAM,WAAA;cACP,MAAM,SAAS,qBAClB,aAAa,MAAM,IAAI,CAAA,CAAA,QACf,MAAM,SAAS;AAChB,UAAA,OAAO,UAAU,SAAS,MAAM,IAAI;AACvC,aAAA,IAAA,QAAQ,KAAK,SAAS,QAAQ,8BAC3B,IAAI,0BACF,GAAA,MAAM,KAAK,yBAAyB,cAAc,gBAAA,IACjD,0BAAA,GAAA,MAAM,IAAI,EAAA,6BACX,MAAM,KAAK,SAAQ,YAAA,qFACE,cAAa,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA,KAE1C,GAAA,OAAA,MAAM,IAAI,CAAA,EAAA,EAAA,EAAA;AAAA,cAEH,MAAM,SAAS,SACnB,GAAA,MAAM,SACD,KAAA,cAAA,QAAA,MAAM,MAA4C,CAAA,CAAA,kCAAA,cAAA,SAAA,MAAM,OAAK,CAAA,CAAA,IAAA,mBAAA,sBAAA,aAAA,EAAA;AAAA;;eACjD,EAAE;AAAA,QAAc,QAAA,MAAM;AAAA;;;;0CAGlC,MAAM,MAA4C,CAAA,CAAA,kCAAA,cAAA,SAAA,MAAM,OAAK,CAAA,CAAA,IAAA,OAAG,MAAM,IAAI,CAAA,MAAA,QAE3E,MAAM,SAAS,UACZ,GAAA,mBAAA,OAAA,OAAA,EAAA,SAAA,UAAA,EAAA,KAAA,MAAM,MAAW,KAAA,MAAM,KAAI,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA,QAC9B,MAAM,SAAS;;;eACI,EAAE;AAAA,QAAmB,QAAA,MAAM;AAAA;;;;sBAC9C,MAAM,SAAS;;;eACA,EAAE;AAAA,QAAe,QAAA,MAAM;AAAA;;;;kBACtC,MAAM,SAAS,+DAQnB,aAAa,MAAM,IAAI,CAAA,CAAA,eAEnB,MAAM,SAAS,mBAEf,MAAM,SAAS;;;eACC,EAAE;AAAA,QAAgB,QAAA,MAAM;AAAA;;;;mBACxC,MAAM,SAAS,gBACnB,GAAA,MAAM,2FACc,MAAM,MAAI,aAAe,MAAK,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA,eAE9C,MAAM,SAAS,WAEjB,gBAAA,OAAA,kDAA8B,MAAM,QACnC,IAAA,IAAA,UAAA,IAAA,cAAA,SAAA,MAAM,QAAM,CAAA,CAAA,gIAKX,GAAA,MAAM,SAAS,SACvB,GAAA,OAAA,MAAM,GAAG,CAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AAAA;;;;ACzEL,QAAA,OAAO,WAAW,MAAM;;QAiBxB,WAAW;AAEN,MAAA,EAAA,GAAA,IAAA;AACA,MAAA,EAAA,OAAA,IAAA;QACA,MAAM,KAAA,IAAA;AACN,MAAA,EAAA,aAAA,GAAA,IAAA;QAEA,OAAO,MAAA,IAAA;AAEP,MAAA,EAAA,cAAA,MAAA;AAAA;AACA,MAAA,EAAA,gBAAA,MAAA;AAAA;QAEL,kBAAmB,WAAA;WACjB,MAAM;AAAA;;;;;;;;;kBAyCR,QAAM,CAAA,OAAA,aAAA;cACP,MAAM,SAAS,gEAEV,MAAM,SAAS;uBACF,gBAAgB,MAAM,KAAK,CAAA,eAAA,QAAA,GAAA;;;UACnB,IAAA,GAAA,EAAE,IAAI,QAAQ;AAAA,UAAc,QAAA,MAAM;AAAA;;;;;OAD1C,gBAAgB,MAAM,KAAK,CAAA,CAAA,QAGxC,MAAM,SAAS,SACnB,GAAA,MAAM,IAAI,SAAS,KAAK;;;QAEpB,IAAA,GAAA,EAAE,IAAI,QAAQ;AAAA;cAEf,OAAO,QAAQ;AAAA,cACf,OAAO,QAAQ;AAAA;;gBAGZ,CAAAJ,WAAK;AACb,mBAAS,QAAQA,MAAK;AAAA;gBAEd,OAAC;AACT,mBAAS,UAAQ;AAAA,YAChB,KAAK,MAAM;AAAA,YACX,YAAY,MAAM;AAAA,YAClB,YAAY;AAAA;;;;;UAKd,GAAA,OAAA,MAAM,IAAI,CAAA,EAAA,QAEH,MAAM,SAAS,UAUZ,yUAAA,KAAA,MAAM,QAAM,CAAA,QAAA,cAAA;;;QAIV,MAAM,MAAM,SAAS,IAAI,oBAAoB,MAAM,MAAM,SAAS,CAAA;AAAA;;;;iBAK/D,EAAE,IAAI,QAAQ,WAAW,SAAS;AAAA,UACjC,QAAA,OAAO;AAAA;;;;;IAUd,CAAA,CAAA,yBAAA,KAAA,MAAM,MAAI,CAAA,KAAA,WAAA;wFAER,OAAG,CAAA,GAAA,CAAA,MAAA,YAAA;;;UAGD,MAAM,MAAM,OAAO,IAAI,oBAAoB,MAAM,MAAM,OAAO,CAAA;AAAA;;;;YAI5D,IAAA,GAAA,EAAE,IAAI,QAAQ,QAAQ,MAAM,IAAI,OAAO;AAAA,YACtC,QAAA,KAAK;AAAA;;;;;;+KAaH,MAAM,EAAE,eAAe,EAAA,GAAA,CAAA,GAAA;AAAA;;;;;;;;;;;2BAalC,MAAM,SAAS;;;QAEH,IAAA,GAAA,EAAE,IAAI,QAAQ;AAAA,QAAY,QAAA,MAAM;AAAA;;;;;2BAE5C,MAAM,SAAS,SACnB,GAAA,MAAM,UACC,MAAA,cAAA,SAAA,MAAM,SAAS,GAClB,CAAA,CAAA,IAAA,KAAA,MAAM,OAAK,CAAA,MAAA,YAAA;AAEX,aAAA,qCAAA,MAAM,OAIA,mEAAA,KAAK,UAAO,YAAA,EAAA;;;iBAef,EAAE,IAAI,QAAQ,IAAI,OAAO;AAAA,UACxB,QAAA,KAAK;AAAA,UACR,KAAA,MAAM;AAAA;;;;;;iBASP,OAAA,KAAA,MAAM,OAAK,CAAA,MAAA,YAAA;AAEX,aAAA,qCAAA,MAAM,OAIA,mEAAA,KAAK,UAAO,YAAA,EAAA;;;iBAef,EAAE,IAAI,QAAQ,IAAI,OAAO;AAAA,UACxB,QAAA,KAAK;AAAA,UACR,KAAA,MAAM;AAAA;;;;;;sBAQP,MAAM,SAAS;;;QAEhB,OAAA,MAAM;AAAA,QACD,YAAA,OAAO;AAAA;;;;;;;;;cAMV,IAAA,GAAA,EAAE,IAAI,QAAQ;AAAA,cACb,QAAA,OAAO,MAAM,MAAM,IAAI;AAAA,cACnB,YAAA,OAAO;AAAA;;;;;;;;aAMb,MAAM,SAAS;AAChB,UAAA,OAAO,UAAU,SAAS,MAAM,IAAI;AACvC,aAAA,IAAA,QAAQ,KAAK,SAAS,QAAQ,8BAC3B,IAAI,0BACF,GAAA,MAAM,KAAK,yBAAyB,cAAc,gBAAA,IACjD,0BAAA,GAAA,MAAM,IAAI,EAAA,0BAEnB,GAAA,OAAA,MAAM,IAAI,CAAA,EAAA,EAAA;AAAA,cAEH,MAAM,SAAS,WAEjB,gBAAA,OAAA,kDAA8B,MAAM,QACnC,IAAA,IAAA,UAAA,IAAA,cAAA,SAAA,MAAM,QAAM,CAAA,CAAA,mIAKX,MAAM,SAAS;;;QAGf,IAAA,GAAA,EAAE,IAAI,QAAQ;AAAA,QACb,QAAA,MAAM,UAAM,CAAA;AAAA;;;;kBAIb,MAAM,SAAS,YACnB,MAEE,iBAAA,MAAM;;;QACmB,IAAA,GAAA,EAAE,IAAI,QAAQ;AAAA,QAAc,QAAA,MAAM;AAAA;;;;oBAE9D,aAAa,MAAM,IAAI,CAAA,CAAA,EAAA,UAGjB,GAAA,MAAM;;;QAEP,IAAA,GAAA,EAAE,IAAI,QAAQ;AAAA,QACb,QAAA,MAAM,UAAM,CAAA;AAAA;;;;oBAIpB,aAAa,MAAM,IAAI,CAAA,CAAA,EAAA,EAAA,QAEhB,MAAM,SAAS,gBACnB,GAAA,MAAM;;;QACc,SAAA,MAAM;AAAA,qBAAmB,OAAO,eAAe;AAAA;;;oBAE/D,MAAM,SAAS,eACnB,GAAA,MAAM;;;QACc,SAAA,MAAM;AAAA,qBAAmB,OAAO,eAAe;AAAA;;;oBAE/D,MAAM,SAAS,uCAGvB,GAAA,OAAA,QAAQ,IAAI,iBAAiB,KAAK,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AAAA;;;;;AC5SnB,wBAAqB;QAE3B,GAAE,IAAA;QACF,QAAO,IAAA;AACP,MAAA,EAAA,QAAQ,KAAI,IAAA;AACZ,MAAA,EAAA,OAAO,MAAK,IAAA;QAEZ,YAAS,GAAA,IAAA;QAET,gBAAa,MAAA;AAAA;QACb,cAAW,MAAA;AAAA;MAElB,SAAM,CAAA;QAEJ,UAAO,EACZ,cAAc;AAGf,SAAO,IAAI,qBAAqB,OAAO,CAAA;AACvC,SAAO,IAAI,gBAAgB,OAAO,CAAA;;;;;;;;;;UAG7B,SAAO;AACV,iBAAS,OAAO,MACf,cAAc,uBAAuB,OAAO,GAAG,WAAW,OAAO,MAAM,OAAO,IAAI,CAAA;AAAA;;;;;;;;;;;;;;;;;"}