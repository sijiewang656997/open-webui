{"version":3,"file":"index8.js","sources":["../../../../src/lib/apis/chats/index.ts"],"sourcesContent":["import { WEBUI_API_BASE_URL } from '$lib/constants';\nimport { getTimeRange } from '$lib/utils';\n\nexport const createNewChat = async (token: string, chat: object) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/new`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tauthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tchat: chat\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const importChat = async (\n\ttoken: string,\n\tchat: object,\n\tmeta: object | null,\n\tpinned?: boolean,\n\tfolderId?: string | null\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/import`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tauthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tchat: chat,\n\t\t\tmeta: meta ?? {},\n\t\t\tpinned: pinned,\n\t\t\tfolder_id: folderId\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getChatList = async (token: string = '', page: number | null = null) => {\n\tlet error = null;\n\tconst searchParams = new URLSearchParams();\n\n\tif (page !== null) {\n\t\tsearchParams.append('page', `${page}`);\n\t}\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/?${searchParams.toString()}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.map((chat) => ({\n\t\t...chat,\n\t\ttime_range: getTimeRange(chat.updated_at)\n\t}));\n};\n\nexport const getChatListByUserId = async (token: string = '', userId: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/list/user/${userId}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.map((chat) => ({\n\t\t...chat,\n\t\ttime_range: getTimeRange(chat.updated_at)\n\t}));\n};\n\nexport const getArchivedChatList = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/archived`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getAllChats = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/all`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getChatListBySearchText = async (token: string, text: string, page: number = 1) => {\n\tlet error = null;\n\n\tconst searchParams = new URLSearchParams();\n\tsearchParams.append('text', text);\n\tsearchParams.append('page', `${page}`);\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/search?${searchParams.toString()}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.map((chat) => ({\n\t\t...chat,\n\t\ttime_range: getTimeRange(chat.updated_at)\n\t}));\n};\n\nexport const getChatsByFolderId = async (token: string, folderId: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/folder/${folderId}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getAllArchivedChats = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/all/archived`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getAllUserChats = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/all/db`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getAllTags = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/all/tags`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getPinnedChatList = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/pinned`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.map((chat) => ({\n\t\t...chat,\n\t\ttime_range: getTimeRange(chat.updated_at)\n\t}));\n};\n\nexport const getChatListByTagName = async (token: string = '', tagName: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/tags`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tname: tagName\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.map((chat) => ({\n\t\t...chat,\n\t\ttime_range: getTimeRange(chat.updated_at)\n\t}));\n};\n\nexport const getChatById = async (token: string, id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err.detail;\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getChatByShareId = async (token: string, share_id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/share/${share_id}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getChatPinnedStatusById = async (token: string, id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}/pinned`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const toggleChatPinnedStatusById = async (token: string, id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}/pin`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const cloneChatById = async (token: string, id: string, title?: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}/clone`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\t...(title && { title: title })\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const cloneSharedChatById = async (token: string, id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}/clone/shared`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const shareChatById = async (token: string, id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}/share`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const updateChatFolderIdById = async (token: string, id: string, folderId?: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}/folder`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tfolder_id: folderId\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const archiveChatById = async (token: string, id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}/archive`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const deleteSharedChatById = async (token: string, id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}/share`, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const updateChatById = async (token: string, id: string, chat: object) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tchat: chat\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const deleteChatById = async (token: string, id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}`, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err.detail;\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getTagsById = async (token: string, id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}/tags`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const addTagById = async (token: string, id: string, tagName: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}/tags`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tname: tagName\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err.detail;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const deleteTagById = async (token: string, id: string, tagName: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}/tags`, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tname: tagName\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\nexport const deleteTagsById = async (token: string, id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}/tags/all`, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const deleteAllChats = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/`, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err.detail;\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const archiveAllChats = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_API_BASE_URL}/chats/archive/all`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.then((json) => {\n\t\t\treturn json;\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err.detail;\n\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n"],"names":["res"],"mappings":"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"}