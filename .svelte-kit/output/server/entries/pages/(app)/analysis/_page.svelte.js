import { c as create_ssr_component, b as subscribe, p as getContext, f as escape, v as validate_component, a as add_attribute, e as each } from "../../../../chunks/ssr.js";
import "../../../../chunks/Toaster.svelte_svelte_type_style_lang.js";
import { w as writable } from "../../../../chunks/index2.js";
import { S as Spinner } from "../../../../chunks/Spinner.js";
import { l as userAPIKey } from "../../../../chunks/index3.js";
import "../../../../chunks/client.js";
import "docx";
import "pizzip";
import "docxtemplater";
import "file-saver";
const css = {
  code: ".page-container.svelte-126e3bb{min-height:calc(100vh - 100px)}.chart-content.svelte-126e3bb{background:white;border-radius:8px;margin-bottom:24px;position:relative}@keyframes svelte-126e3bb-popup-fade-in{from{opacity:0;transform:translateY(-10px)}to{opacity:1;transform:translateY(0)}}@media(max-width: 640px){}@keyframes svelte-126e3bb-fade-in{from{opacity:0;transform:translateY(-10px)}to{opacity:1;transform:translateY(0)}}@keyframes svelte-126e3bb-spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes svelte-126e3bb-slide-down{from{opacity:0;transform:scaleY(0.95)}to{opacity:1;transform:scaleY(1)}}",
  map: '{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { toast } from \\"svelte-sonner\\";\\nimport { getContext, onMount } from \\"svelte\\";\\nimport Spinner from \\"$lib/components/common/Spinner.svelte\\";\\nimport { userAPIKey, showSidebar } from \\"$lib/stores\\";\\nimport { page } from \\"$app/stores\\";\\nimport { writable } from \\"svelte/store\\";\\nimport { downloadWordDocument, createSimpleWordDocument } from \\"$lib/utils/docUtils\\";\\nimport { createDocxTemplateReport, downloadDocxDocument } from \\"$lib/utils/docxTemplateUtils\\";\\nimport { WEBUI_BASE_URL } from \\"$lib/constants\\";\\nimport { getApiConfig } from \\"$lib/utils/api-config\\";\\nconst i18n = getContext(\\"i18n\\");\\nconst analysisModal = writable({\\n  isOpen: false,\\n  title: \\"\\",\\n  content: \\"\\",\\n  isLoading: false,\\n  company: \\"\\",\\n  account: \\"\\",\\n  isEditing: false,\\n  editText: \\"\\"\\n});\\nfunction openAnalysisModal(title, company, account) {\\n  analysisModal.update((state) => ({\\n    ...state,\\n    isOpen: true,\\n    title,\\n    isLoading: true,\\n    company,\\n    account,\\n    isEditing: false,\\n    editText: \\"\\"\\n  }));\\n}\\nfunction closeAnalysisModal() {\\n  analysisModal.update((state) => ({\\n    ...state,\\n    isOpen: false\\n  }));\\n}\\nfunction toggleEditMode() {\\n  analysisModal.update((state) => {\\n    const editText = state.isEditing ? state.editText : state.content.replace(/<br>/g, \\"\\\\n\\");\\n    return {\\n      ...state,\\n      isEditing: !state.isEditing,\\n      editText\\n    };\\n  });\\n}\\nfunction saveAnalysisEdit() {\\n  analysisModal.update((state) => {\\n    if (!state.isEditing) return state;\\n    const newContent = formatAnalysisText(state.editText);\\n    if (state.company && state.account && selectedMonth) {\\n      const monthKey = `${state.company}-${state.account}-${selectedMonth}`;\\n      const generalKey = `${state.company}-${state.account}`;\\n      analysisText = {\\n        ...analysisText,\\n        [monthKey]: state.editText,\\n        [generalKey]: state.editText\\n      };\\n      updateGraphNodeAnalysis(state.company, state.account, state.editText).then(() => {\\n        toast.success($i18n.t(\\"Analysis saved\\"));\\n      }).catch((error) => {\\n        console.error(\\"Error saving analysis:\\", error);\\n        toast.error($i18n.t(\\"Failed to save analysis\\"));\\n      });\\n    }\\n    return {\\n      ...state,\\n      content: newContent,\\n      isEditing: false\\n    };\\n  });\\n}\\nlet apiConfig = {\\n  baseUrl: WEBUI_BASE_URL,\\n  userToken: \\"\\",\\n  languageLocal: \\"en\\"\\n};\\nconst apiBaseUrl = WEBUI_BASE_URL;\\nlet loading = false;\\nlet data = null;\\nlet accountTree = null;\\nlet expandedCompanies = {};\\nlet expandedCategories = {};\\nlet selectedMonth = null;\\nlet monthOptions = [];\\nlet threshold = 10;\\nlet sortBy = \\"date\\";\\nlet sortDirection = \\"desc\\";\\nlet analysisText = {};\\nlet currentView = \\"main\\";\\nlet transactions = [];\\nlet transactionTitle = \\"\\";\\nlet chartData = null;\\nlet chartTitle = \\"\\";\\nlet currentAnalysisKey = null;\\nlet analysisInputText = \\"\\";\\nlet isGeneratingAnalysis = false;\\n$: console.log(\\"expandedCompanies changed:\\", expandedCompanies);\\n$: console.log(\\"expandedCategories changed:\\", Object.keys(expandedCategories).length, \\"categories\\");\\n$: expandedCompaniesState = Date.now().toString();\\nlet expandedInitialized = false;\\n$: if (data && data.companies && !expandedInitialized) {\\n  console.log(\\"Initializing expanded states (one-time)\\");\\n  expandedInitialized = true;\\n  const firstCompany = Object.keys(data.companies)[0];\\n  if (firstCompany) {\\n    console.log(\\"Automatically expanding first company:\\", firstCompany);\\n    const newExpandedCompanies = { ...expandedCompanies };\\n    newExpandedCompanies[firstCompany] = true;\\n    expandedCompanies = newExpandedCompanies;\\n  }\\n}\\nlet lastProcessedEvent = {\\n  month: null,\\n  company: null,\\n  account: null,\\n  timestamp: 0\\n};\\nlet isProcessingEvent = false;\\nonMount(async () => {\\n  console.log(\\"Current user language:\\", $i18n.language);\\n  console.log(\\"Current user API key:\\", $userAPIKey);\\n  try {\\n    apiConfig = await getApiConfig(i18n);\\n    console.log(\\"API config initialized:\\", apiConfig);\\n  } catch (error) {\\n    console.error(\\"Failed to initialize API config:\\", error);\\n  }\\n  console.log(\\"Component mounted, loading account tree...\\");\\n  loadAccountTree();\\n  document.addEventListener(\\"select-month\\", (event) => {\\n    console.log(\\"Custom select-month event received:\\", event.detail);\\n    if (isProcessingEvent) {\\n      console.log(\\"Already processing an event, skipping new event\\");\\n      return;\\n    }\\n    if (event.detail) {\\n      const { month, company, account } = event.detail;\\n      console.log(\\"Extracted values from event:\\", {\\n        month,\\n        company: company || \\"null/undefined\\",\\n        account: account || \\"null/undefined\\",\\n        typeofCompany: typeof company,\\n        typeofAccount: typeof account\\n      });\\n      const now = Date.now();\\n      const isSameEvent = lastProcessedEvent.month === month && lastProcessedEvent.company === company && lastProcessedEvent.account === account && now - lastProcessedEvent.timestamp < 500;\\n      if (isSameEvent) {\\n        console.log(\\"Ignoring duplicate event within debounce period\\");\\n        return;\\n      }\\n      isProcessingEvent = true;\\n      lastProcessedEvent = { month, company, account, timestamp: now };\\n      if (month) {\\n        console.log(\\"Setting selected month to:\\", month);\\n        selectedMonth = month;\\n        isGeneratingAnalysis = true;\\n        setTimeout(async () => {\\n          try {\\n            if (company && account && company !== \\"undefined\\" && account !== \\"undefined\\") {\\n              console.log(\\"Using company/account from event:\\", company, account);\\n              const analysisKey = `${company}-${account}-${month}`;\\n              const generalKey = `${company}-${account}`;\\n              console.log(\\"Analysis keys to check:\\", {\\n                analysisKey,\\n                generalKey,\\n                hasMonthSpecificAnalysis: !!analysisText[analysisKey],\\n                hasGeneralAnalysis: !!analysisText[generalKey]\\n              });\\n              await fetchAutoAnalysis(company, account);\\n            } else if (chartData && chartData.company && chartData.account) {\\n              console.log(\\"Using company/account from chartData:\\", chartData.company, chartData.account);\\n              const analysisKey = `${chartData.company}-${chartData.account}-${month}`;\\n              const generalKey = `${chartData.company}-${chartData.account}`;\\n              console.log(\\"Analysis keys to check:\\", {\\n                analysisKey,\\n                generalKey,\\n                hasMonthSpecificAnalysis: !!analysisText[analysisKey],\\n                hasGeneralAnalysis: !!analysisText[generalKey]\\n              });\\n              await fetchAutoAnalysis(chartData.company, chartData.account);\\n            } else {\\n              console.error(\\"Cannot fetch analysis: missing company or account information\\", {\\n                fromEvent: { company, account },\\n                fromChartData: chartData ? {\\n                  company: chartData.company,\\n                  account: chartData.account\\n                } : \\"chartData is null\\",\\n                chartData\\n              });\\n              isGeneratingAnalysis = false;\\n            }\\n          } finally {\\n            console.log(\\"Finished processing select-month event\\");\\n            isProcessingEvent = false;\\n          }\\n        }, 50);\\n      } else {\\n        isProcessingEvent = false;\\n      }\\n    } else {\\n      isProcessingEvent = false;\\n    }\\n  });\\n  setTimeout(() => {\\n    const monthSelector = document.getElementById(\\"monthSelector\\");\\n    if (monthSelector) {\\n      console.log(\\"Adding event listener to month selector\\");\\n      monthSelector.addEventListener(\\"change\\", (event) => {\\n        if (currentView === \\"chart\\" && chartData) {\\n          console.log(\\"Month selector changed, updating chart\\");\\n          setTimeout(() => initChart(), 50);\\n        }\\n      });\\n    }\\n  }, 500);\\n  if (typeof window !== \\"undefined\\" && !window.hasOwnProperty(\\"Chart\\")) {\\n    const script = document.createElement(\\"script\\");\\n    script.src = \\"https://cdn.jsdelivr.net/npm/chart.js\\";\\n    script.async = true;\\n    document.head.appendChild(script);\\n  }\\n  const observer = new MutationObserver((mutations) => {\\n    mutations.forEach((mutation) => {\\n      if (mutation.type === \\"attributes\\" && mutation.attributeName === \\"data-ready\\") {\\n        const canvas = document.getElementById(\\"trendChart\\");\\n        if (canvas && canvas.getAttribute(\\"data-ready\\") === \\"true\\") {\\n          initChart();\\n        }\\n      }\\n    });\\n  });\\n  setTimeout(() => {\\n    const canvas = document.getElementById(\\"trendChart\\");\\n    if (canvas) {\\n      observer.observe(canvas, { attributes: true });\\n      if (canvas.getAttribute(\\"data-ready\\") === \\"true\\") {\\n        initChart();\\n      }\\n    }\\n  }, 200);\\n});\\nasync function loadAccountTree() {\\n  try {\\n    loading = true;\\n    console.log(\\"=== REQUEST ===\\");\\n    console.log(`URL: ${apiBaseUrl}/proxy/api/account_tree`);\\n    console.log(\\"Method: GET\\");\\n    console.log(\\"Headers:\\", {\\n      \\"Content-Type\\": \\"application/json\\",\\n      \\"Accept-Language\\": apiConfig.languageLocal,\\n      \\"Authorization\\": `Bearer ${apiConfig.userToken}`\\n    });\\n    console.log(\\"\\\\n\\");\\n    const response = await fetch(`${apiBaseUrl}/proxy/api/account_tree`, {\\n      method: \\"GET\\",\\n      headers: {\\n        \\"Content-Type\\": \\"application/json\\",\\n        \\"Accept-Language\\": apiConfig.languageLocal,\\n        \\"Authorization\\": `Bearer ${apiConfig.userToken}`\\n      }\\n    });\\n    console.log(\\"=== RESPONSE ===\\");\\n    console.log(\\"Status:\\", response.status);\\n    console.log(\\"Headers:\\", Object.fromEntries([...response.headers.entries()]));\\n    const result = await response.json();\\n    console.log(\\"Body:\\", result);\\n    console.log(\\"\\\\n\\");\\n    if (result.success && result.data) {\\n      console.log(\\"Account tree loaded successfully\\");\\n      accountTree = result.data;\\n      initializeExpandedStates(accountTree);\\n      await fetchData();\\n    } else {\\n      console.error(\\"Account tree response indicates failure:\\", result.error || \\"Unknown error\\");\\n      accountTree = null;\\n    }\\n  } catch (error) {\\n    console.error(\\"Error loading account tree:\\", error);\\n    toast.error($i18n.t(\\"Failed to load account tree\\"));\\n    accountTree = null;\\n  } finally {\\n    loading = false;\\n  }\\n}\\nfunction initializeExpandedStates(tree) {\\n  if (!tree) return;\\n  const rootKeys = Object.keys(tree);\\n  expandedCompanies = {};\\n  expandedCategories = {};\\n  if (rootKeys.length > 0) {\\n    rootKeys.forEach((company) => {\\n      expandedCompanies[company] = true;\\n      const topLevelNodes = Object.keys(tree);\\n      topLevelNodes.forEach((topNodeKey) => {\\n        const topNode = tree[topNodeKey];\\n        if (topNode && typeof topNode === \\"object\\") {\\n          const topPath = `${company}/${topNodeKey}`;\\n          expandedCategories[topPath] = true;\\n          if (topNode.children) {\\n            Object.entries(topNode.children).forEach(([categoryKey, category]) => {\\n              const categoryName = category?.name || categoryKey;\\n              const shouldExpand = categoryName.includes(\\"Operating\\") || categoryName.includes(\\"Profit\\") || categoryName.includes(\\"Revenue\\") || categoryName.includes(\\"Sales\\") || categoryName.includes(\\"Costs\\") || categoryName.includes(\\"Expenses\\");\\n              if (shouldExpand) {\\n                const categoryPath = `${company}/${topNodeKey}/${categoryKey}`;\\n                expandedCategories[categoryPath] = true;\\n                console.log(`Auto-expanded category: ${categoryName}, Path: ${categoryPath}`);\\n              }\\n            });\\n          }\\n        }\\n      });\\n    });\\n    console.log(\\"Initialized expanded states:\\", {\\n      companies: Object.keys(expandedCompanies),\\n      categories: Object.keys(expandedCategories).length\\n    });\\n  }\\n}\\nfunction isAccountNode(node) {\\n  if (!node || !node.name) return false;\\n  const name = node.name;\\n  if (/^\\\\d/.test(name)) return true;\\n  if (/\\\\(A\\\\d+\\\\)/.test(name) || /\\\\[A\\\\d+\\\\]/.test(name)) return true;\\n  if (node.accounts && Array.isArray(node.accounts) && node.accounts.length > 0) return true;\\n  if (node.level >= 2 && (!node.children || Object.keys(node.children).length === 0)) {\\n    const accountTerms = [\\"account\\", \\"acct\\", \\"a/c\\", \\"\\\\u79D1\\\\u76EE\\", \\"\\\\u8D26\\\\u6237\\"];\\n    return accountTerms.some((term) => name.toLowerCase().includes(term));\\n  }\\n  return false;\\n}\\nasync function fetchData() {\\n  if (!accountTree) {\\n    console.log(\\"fetchData: No account tree available, returning early\\");\\n    return Promise.resolve();\\n  }\\n  try {\\n    const url = selectedMonth ? `${apiBaseUrl}/proxy/api/is_analysis?month=${selectedMonth}` : `${apiBaseUrl}/proxy/api/is_analysis`;\\n    console.log(\\"=== REQUEST ===\\");\\n    console.log(`URL: ${url}`);\\n    console.log(\\"Method: GET\\");\\n    console.log(\\"Headers:\\", {\\n      \\"Content-Type\\": \\"application/json\\",\\n      \\"Accept-Language\\": apiConfig.languageLocal,\\n      \\"Authorization\\": `Bearer ${apiConfig.userToken}`\\n    });\\n    console.log(\\"\\\\n\\");\\n    const response = await fetch(url, {\\n      method: \\"GET\\",\\n      headers: {\\n        \\"Content-Type\\": \\"application/json\\",\\n        \\"Accept-Language\\": apiConfig.languageLocal,\\n        \\"Authorization\\": `Bearer ${apiConfig.userToken}`\\n      }\\n    });\\n    console.log(\\"=== RESPONSE ===\\");\\n    console.log(\\"Status:\\", response.status);\\n    console.log(\\"Headers:\\", Object.fromEntries([...response.headers.entries()]));\\n    const result = await response.json();\\n    console.log(\\"Body:\\", result);\\n    console.log(\\"\\\\n\\");\\n    if (result.success && result.data) {\\n      console.log(\\"IS analysis data loaded successfully\\");\\n      data = processDataWithTree(result.data);\\n      monthOptions = result.data.monthOptions || [];\\n      if (!selectedMonth) {\\n        selectedMonth = result.data.selectedMonth;\\n      }\\n      console.log(\\"Selected month:\\", selectedMonth);\\n      console.log(\\"Available months:\\", monthOptions);\\n      console.log(\\"Processed data:\\", data);\\n      return Promise.resolve();\\n    } else {\\n      console.error(\\"IS analysis response indicates failure:\\", result.error || \\"Unknown error\\");\\n      throw new Error(result.error || \\"Invalid data structure received\\");\\n    }\\n  } catch (error) {\\n    console.error(\\"Error loading IS analysis data:\\", error);\\n    toast.error($i18n.t(\\"Failed to load analysis data\\"));\\n    return Promise.reject(error);\\n  }\\n}\\nfunction processDataWithTree(rawData) {\\n  if (!accountTree) return { companies: {} };\\n  try {\\n    const processedData = { companies: {} };\\n    console.log(\\"Processing data with account tree:\\", {\\n      companiesCount: Object.keys(rawData.companies || {}).length,\\n      hasAccountTree: !!accountTree\\n    });\\n    Object.entries(rawData.companies || {}).forEach(([company, companyData]) => {\\n      processedData.companies[company] = {\\n        accounts: {},\\n        categories: structureAccountTree(getAccountTreeRoot()),\\n        currentTotal: 0,\\n        previousTotal: 0\\n      };\\n      console.log(\\"Processing company data:\\", {\\n        company,\\n        accountsCount: Object.keys(companyData.accounts || {}).length\\n      });\\n      Object.entries(companyData.accounts || {}).forEach(([account, accountData]) => {\\n        const categoryPath = findAccountCategory(\\n          account,\\n          accountData.name,\\n          getAccountTreeRoot()\\n        );\\n        console.log(\\"Account category path found:\\", {\\n          account,\\n          accountName: accountData.name,\\n          categoryPath: categoryPath || \\"Not found\\"\\n        });\\n        if (categoryPath) {\\n          processedData.companies[company].accounts[account] = {\\n            ...accountData,\\n            categoryPath\\n          };\\n        } else {\\n          console.log(\\"No category path found for account\\", {\\n            account,\\n            accountName: accountData.name\\n          });\\n        }\\n      });\\n      resetAllCategoryTotals(processedData.companies[company].categories);\\n      const accountValues = [];\\n      Object.entries(companyData.accounts || {}).forEach(([account, accountData]) => {\\n        const categoryPath = findAccountCategory(\\n          account,\\n          accountData.name,\\n          getAccountTreeRoot()\\n        );\\n        if (categoryPath) {\\n          accountValues.push({\\n            account,\\n            accountName: accountData.name,\\n            categoryPath,\\n            currentTotal: accountData.currentTotal || 0,\\n            previousTotal: accountData.previousTotal || 0\\n          });\\n        }\\n      });\\n      accountValues.sort((a, b) => b.categoryPath.length - a.categoryPath.length);\\n      accountValues.forEach(({ account, accountName, categoryPath, currentTotal, previousTotal }) => {\\n        updateCategoryTotals(\\n          processedData.companies[company].categories,\\n          categoryPath,\\n          currentTotal,\\n          previousTotal\\n        );\\n      });\\n      rollUpCategoryTotals(processedData.companies[company].categories);\\n    });\\n    console.log(\\"Processed data structure:\\", processedData);\\n    return processedData;\\n  } catch (error) {\\n    console.error(\\"Error processing data with tree:\\", error);\\n    return { companies: {} };\\n  }\\n}\\nfunction getAccountTreeRoot() {\\n  if (!accountTree || typeof accountTree !== \\"object\\") {\\n    console.error(\\"Invalid account tree structure\\", { tree: accountTree });\\n    return null;\\n  }\\n  const rootKeys = Object.keys(accountTree);\\n  if (rootKeys.length === 0) {\\n    console.error(\\"Account tree has no root nodes\\", { tree: accountTree });\\n    return null;\\n  }\\n  const mergedRootNode = {\\n    name: \\"Root\\",\\n    level: 0,\\n    children: {}\\n  };\\n  rootKeys.forEach((rootKey) => {\\n    if (accountTree[rootKey]) {\\n      mergedRootNode.children[rootKey] = accountTree[rootKey];\\n    }\\n  });\\n  console.log(\\"Using merged root node for account tree:\\", {\\n    rootKeys,\\n    childrenCount: Object.keys(mergedRootNode.children).length,\\n    childrenNames: Object.keys(mergedRootNode.children).join(\\", \\")\\n  });\\n  return mergedRootNode;\\n}\\nfunction structureAccountTree(node) {\\n  if (!node) {\\n    console.error(\\"Invalid node provided to structureAccountTree\\");\\n    return {\\n      name: \\"Unknown\\",\\n      level: 1,\\n      currentTotal: 0,\\n      previousTotal: 0,\\n      children: {}\\n    };\\n  }\\n  const result = {\\n    name: node.name || \\"Unknown\\",\\n    level: node.level || 1,\\n    currentTotal: 0,\\n    previousTotal: 0,\\n    children: {}\\n  };\\n  if (node.children) {\\n    Object.entries(node.children).forEach(([key, child]) => {\\n      result.children[key] = structureAccountTree(child);\\n    });\\n  }\\n  return result;\\n}\\nfunction findAccountCategory(account, accountName, node, path = []) {\\n  if (!node) return null;\\n  const nodeName = node.name || \\"\\";\\n  const nodeAccountParts = nodeName.split(\\" \\");\\n  const nodeAccountNumber = nodeAccountParts[0];\\n  console.log(\\"Searching for account in tree:\\", {\\n    searchingFor: {\\n      account,\\n      accountName\\n    },\\n    currentNode: {\\n      nodeName,\\n      nodeAccountNumber,\\n      level: node.level\\n    },\\n    currentPath: path\\n  });\\n  if (nodeAccountNumber === account || nodeName === account) {\\n    const foundPath = [...path, nodeName];\\n    console.log(\\"Found exact account match:\\", {\\n      account,\\n      foundPath\\n    });\\n    return foundPath;\\n  }\\n  if (nodeName.includes(account) || accountName && nodeName.includes(accountName)) {\\n    const foundPath = [...path, nodeName];\\n    console.log(\\"Found account number/name in node name:\\", {\\n      account,\\n      nodeName,\\n      foundPath\\n    });\\n    return foundPath;\\n  }\\n  if (node.accounts && Array.isArray(node.accounts)) {\\n    const hasAccountInArray = node.accounts.some(\\n      (a) => a === account || a.startsWith(account + \\" \\") || accountName && a.includes(accountName)\\n    );\\n    if (hasAccountInArray) {\\n      const foundPath = [...path, nodeName];\\n      console.log(\\"Found account in accounts array:\\", {\\n        account,\\n        foundPath\\n      });\\n      return foundPath;\\n    }\\n  }\\n  if (node.children) {\\n    for (const [key, child] of Object.entries(node.children)) {\\n      const newPath = path.length === 0 && node.level === 0 ? [] : [...path, nodeName];\\n      const found = findAccountCategory(account, accountName, child, newPath);\\n      if (found) {\\n        console.log(\\"Found account in child node:\\", {\\n          account,\\n          childKey: key,\\n          childLevel: child.level,\\n          foundPath: found\\n        });\\n        return found;\\n      }\\n    }\\n  }\\n  return null;\\n}\\nfunction resetAllCategoryTotals(category) {\\n  if (!category) return;\\n  category.currentTotal = 0;\\n  category.previousTotal = 0;\\n  if (category.children) {\\n    Object.values(category.children).forEach((child) => {\\n      resetAllCategoryTotals(child);\\n    });\\n  }\\n}\\nfunction updateCategoryTotals(categories, path, currentAmount, previousAmount) {\\n  let current = categories;\\n  let multiplier = 1;\\n  console.log(\\"Updating category totals:\\", {\\n    path,\\n    currentAmount,\\n    previousAmount,\\n    rootNodeName: categories?.name\\n  });\\n  if (!path || path.length === 0) {\\n    console.log(\\"Empty path provided to updateCategoryTotals\\");\\n    return;\\n  }\\n  let startIndex = 0;\\n  if (path[0] === categories?.name) {\\n    console.log(\\"First path element matches root node name, skipping:\\", {\\n      rootNodeName: categories.name,\\n      firstPathElement: path[0]\\n    });\\n    startIndex = 1;\\n  }\\n  for (let i = startIndex; i < path.length; i++) {\\n    const category = path[i];\\n    if (!category) {\\n      console.log(\\"Undefined category in path\\", { index: i, path });\\n      continue;\\n    }\\n    if (category.startsWith(\\"-\\")) {\\n      multiplier *= -1;\\n      console.log(\\"Negating values for category:\\", {\\n        category,\\n        multiplier\\n      });\\n    }\\n    const categoryKey = category.startsWith(\\"-\\") ? category : category;\\n    if (current.children && (current.children[category] || current.children[categoryKey])) {\\n      const childCategory = current.children[category] || current.children[categoryKey];\\n      if (i === path.length - 1) {\\n        childCategory.currentTotal += currentAmount * multiplier;\\n        childCategory.previousTotal += previousAmount * multiplier;\\n        console.log(\\"Updated leaf node totals:\\", {\\n          category,\\n          newTotals: {\\n            currentTotal: childCategory.currentTotal,\\n            previousTotal: childCategory.previousTotal\\n          },\\n          addedAmount: {\\n            current: currentAmount * multiplier,\\n            previous: previousAmount * multiplier\\n          }\\n        });\\n      }\\n      current = childCategory;\\n    } else {\\n      console.log(\\"Category not found in children\\", {\\n        category,\\n        pathIndex: i,\\n        availableChildren: current.children ? Object.keys(current.children) : \\"none\\"\\n      });\\n      return;\\n    }\\n  }\\n}\\nfunction rollUpCategoryTotals(category) {\\n  if (!category) {\\n    console.log(\\"Null category in rollUpCategoryTotals\\");\\n    return { current: 0, previous: 0 };\\n  }\\n  let currentTotal = 0;\\n  let previousTotal = 0;\\n  if (!category.children || Object.keys(category.children).length === 0) {\\n    currentTotal = category.currentTotal;\\n    previousTotal = category.previousTotal;\\n    return { current: currentTotal, previous: previousTotal };\\n  }\\n  Object.entries(category.children).forEach(([key, child]) => {\\n    const childTotals = rollUpCategoryTotals(child);\\n    const multiplier = key.startsWith(\\"-\\") || child.name && child.name.startsWith(\\"-\\") ? -1 : 1;\\n    currentTotal += childTotals.current * multiplier;\\n    previousTotal += childTotals.previous * multiplier;\\n  });\\n  category.currentTotal = currentTotal;\\n  category.previousTotal = previousTotal;\\n  return { current: currentTotal, previous: previousTotal };\\n}\\nfunction toggleCompany(company) {\\n  if (!company) {\\n    console.error(\\"Invalid company name in toggleCompany\\");\\n    return;\\n  }\\n  console.log(\\"Toggling company:\\", company, \\"Current state:\\", expandedCompanies[company]);\\n  const newExpandedCompanies = { ...expandedCompanies };\\n  newExpandedCompanies[company] = !expandedCompanies[company];\\n  expandedCompanies = newExpandedCompanies;\\n  console.log(\\"New expanded state for company:\\", company, expandedCompanies[company]);\\n  expandedCompaniesState = Date.now().toString();\\n  setTimeout(() => {\\n    const mainContainer = document.querySelector(\'[data-tree-container=\\"true\\"]\');\\n    if (mainContainer) {\\n      mainContainer.innerHTML = renderTreeStructure();\\n    } else {\\n      console.error(\\"Analysis content container not found\\");\\n    }\\n  }, 10);\\n}\\nfunction toggleCategory(categoryPath) {\\n  if (!categoryPath || categoryPath === \\"Unknown\\" || categoryPath === \\"undefined\\") {\\n    console.error(\\"Invalid category path in toggleCategory:\\", categoryPath);\\n    return;\\n  }\\n  console.log(\\"Toggling category:\\", categoryPath, \\"Current state:\\", expandedCategories[categoryPath]);\\n  const newExpandedCategories = { ...expandedCategories };\\n  newExpandedCategories[categoryPath] = !expandedCategories[categoryPath];\\n  expandedCategories = newExpandedCategories;\\n  console.log(\\"New expanded state for category:\\", categoryPath, expandedCategories[categoryPath]);\\n  expandedCompaniesState = Date.now().toString();\\n  setTimeout(() => {\\n    const mainContainer = document.querySelector(\'[data-tree-container=\\"true\\"]\');\\n    if (mainContainer) {\\n      mainContainer.innerHTML = renderTreeStructure();\\n    } else {\\n      console.error(\\"Analysis content container not found\\");\\n    }\\n  }, 10);\\n}\\nfunction handleThresholdChange(event) {\\n  const value = event.target.value.replace(/^0+/, \\"\\") || \\"0\\";\\n  threshold = Number(value);\\n}\\nfunction handleMonthChange(event) {\\n  selectedMonth = event.target.value;\\n  console.log(\\"Month changed to:\\", selectedMonth);\\n  loading = true;\\n  fetchData().then(() => {\\n    console.log(\\"Data fetched for new month, updating UI\\");\\n    expandedCompaniesState = Date.now().toString();\\n    if (currentView === \\"chart\\" && chartData) {\\n      console.log(\\"Updating chart with new month:\\", selectedMonth);\\n      setTimeout(() => initChart(), 50);\\n    }\\n    loading = false;\\n  });\\n}\\nasync function fetchTransactions(company, account, month, isPrevious = false) {\\n  try {\\n    const url = `${apiBaseUrl}/proxy/api/transactions?company=${encodeURIComponent(company)}&account=${encodeURIComponent(account)}&month=${encodeURIComponent(month)}`;\\n    console.log(\\"=== REQUEST ===\\");\\n    console.log(`URL: ${url}`);\\n    console.log(\\"Method: GET\\");\\n    console.log(\\"Headers:\\", {\\n      \\"Content-Type\\": \\"application/json\\",\\n      \\"Accept-Language\\": apiConfig.languageLocal,\\n      \\"Authorization\\": `Bearer ${apiConfig.userToken}`\\n    });\\n    console.log(\\"\\\\n\\");\\n    const response = await fetch(url, {\\n      method: \\"GET\\",\\n      headers: {\\n        \\"Content-Type\\": \\"application/json\\",\\n        \\"Accept-Language\\": apiConfig.languageLocal,\\n        \\"Authorization\\": `Bearer ${apiConfig.userToken}`\\n      }\\n    });\\n    console.log(\\"=== RESPONSE ===\\");\\n    console.log(\\"Status:\\", response.status);\\n    console.log(\\"Headers:\\", Object.fromEntries([...response.headers.entries()]));\\n    const result = await response.json();\\n    console.log(\\"Body:\\", result);\\n    console.log(\\"\\\\n\\");\\n    if (result.success && result.data) {\\n      transactions = result.data.transactions;\\n      transactionTitle = `${company} - ${account} - ${month} ${isPrevious ? \\"(Previous)\\" : \\"(Current)\\"}`;\\n      currentView = \\"transactions\\";\\n    } else {\\n      console.error(\\"Transactions response indicates failure:\\", result.error || \\"Unknown error\\");\\n      throw new Error(result.error || \\"Failed to load transactions\\");\\n    }\\n  } catch (error) {\\n    console.error(\\"Error loading transactions:\\", error);\\n    toast.error($i18n.t(\\"Failed to load transactions\\"));\\n  }\\n}\\nasync function handleAccountClick(company, account, accountName) {\\n  console.log(\\"handleAccountClick called with:\\", {\\n    company,\\n    account,\\n    accountName\\n  });\\n  try {\\n    const url = `${apiBaseUrl}/proxy/api/account_trend?company=${encodeURIComponent(company)}&account=${encodeURIComponent(account)}`;\\n    console.log(\\"=== REQUEST ===\\");\\n    console.log(`URL: ${url}`);\\n    console.log(\\"Method: GET\\");\\n    console.log(\\"Headers:\\", {\\n      \\"Content-Type\\": \\"application/json\\",\\n      \\"Accept-Language\\": apiConfig.languageLocal,\\n      \\"Authorization\\": `Bearer ${apiConfig.userToken}`\\n    });\\n    console.log(\\"\\\\n\\");\\n    const response = await fetch(url, {\\n      method: \\"GET\\",\\n      headers: {\\n        \\"Content-Type\\": \\"application/json\\",\\n        \\"Accept-Language\\": apiConfig.languageLocal,\\n        \\"Authorization\\": `Bearer ${apiConfig.userToken}`\\n      }\\n    });\\n    console.log(\\"=== RESPONSE ===\\");\\n    console.log(\\"Status:\\", response.status);\\n    console.log(\\"Headers:\\", Object.fromEntries([...response.headers.entries()]));\\n    const result = await response.json();\\n    console.log(\\"Body:\\", result);\\n    console.log(\\"\\\\n\\");\\n    if (result.success && result.data) {\\n      chartData = {\\n        ...result.data,\\n        company,\\n        account\\n      };\\n      console.log(\\"ChartData set with explicit company/account:\\", chartData);\\n      chartTitle = `${company} - ${account} - ${accountName}`;\\n      currentView = \\"chart\\";\\n      if (!analysisText[`${company}-${account}`]) {\\n        fetchAutoAnalysis(company, account);\\n      }\\n    } else {\\n      console.error(\\"Account trend response indicates failure:\\", result.error || \\"Unknown error\\");\\n      throw new Error(result.error || \\"Failed to load trend data\\");\\n    }\\n  } catch (error) {\\n    console.error(\\"Error loading trend data:\\", error);\\n    toast.error($i18n.t(\\"Failed to load trend data\\"));\\n  }\\n}\\nfunction handleAnalysisEdit(company, account) {\\n  console.log(\\"Handling analysis edit for:\\", company, account);\\n  const monthKey = `${company}-${account}-${selectedMonth}`;\\n  const generalKey = `${company}-${account}`;\\n  currentAnalysisKey = monthKey;\\n  analysisInputText = analysisText[monthKey] || analysisText[generalKey] || \\"\\";\\n  console.log(\\"Current analysis text:\\", analysisInputText);\\n  currentView = \\"analysis\\";\\n  if (!analysisInputText) {\\n    console.log(\\"No existing analysis found, fetching auto analysis\\");\\n    fetchAutoAnalysis(company, account);\\n  }\\n}\\n$: analysisContentTimestamp = Date.now();\\n$: if (selectedMonth && chartData) {\\n  console.log(\\"Reactive update triggered for analysis UI with selected month:\\", selectedMonth);\\n  analysisContentTimestamp = Date.now();\\n  if (currentView === \\"chart\\") {\\n    console.log(\\"Updating chart for new selected month:\\", selectedMonth);\\n    setTimeout(() => initChart(), 50);\\n  }\\n}\\n$: if (Object.keys(analysisText).length > 0) {\\n  console.log(\\"Analysis data updated, refreshing UI\\");\\n  analysisContentTimestamp = Date.now();\\n}\\n$: if (selectedMonth && currentView === \\"chart\\") {\\n  console.log(\\"Selected month changed to:\\", selectedMonth);\\n  setTimeout(() => {\\n    if (document.getElementById(\\"trendChart\\")) {\\n      console.log(\\"Re-initializing chart with new month:\\", selectedMonth);\\n      initChart();\\n    }\\n  }, 50);\\n}\\nasync function fetchAutoAnalysis(company, account) {\\n  console.log(\\"Fetching auto analysis for:\\", company, account, \\"with selected month:\\", selectedMonth);\\n  if (!company || !account || company === \\"undefined\\" || account === \\"undefined\\") {\\n    console.error(\\"Invalid company or account for auto analysis:\\", { company, account });\\n    toast.error($i18n.t(\\"Missing company or account information\\"));\\n    analysisModal.update((state) => ({\\n      ...state,\\n      isLoading: false,\\n      content: `<p class=\\"text-red-500\\">${$i18n.t(\\"Missing company or account information\\")}</p>`\\n    }));\\n    return;\\n  }\\n  if (!selectedMonth) {\\n    console.error(\\"Missing selected month for analysis\\");\\n    toast.error($i18n.t(\\"Missing month information\\"));\\n    analysisModal.update((state) => ({\\n      ...state,\\n      isLoading: false,\\n      content: `<p class=\\"text-red-500\\">${$i18n.t(\\"Missing month information\\")}</p>`\\n    }));\\n    return;\\n  }\\n  if (!data?.companies?.[company]?.accounts?.[account]) {\\n    console.debug(\\"Data for auto analysis not available yet:\\", {\\n      company,\\n      account,\\n      dataAvailable: !!data,\\n      companiesAvailable: data ? Object.keys(data.companies || {}) : [],\\n      accountsAvailable: data?.companies?.[company] ? Object.keys(data.companies[company].accounts || {}) : []\\n    });\\n    const accountName = account;\\n    openAnalysisModal(`${company} - ${account} - ${accountName}`, company, account);\\n    const fakeAccountData = {\\n      name: accountName,\\n      currentTotal: 0,\\n      previousTotal: 0,\\n      months: [{ previousMonth: \\"\\" }]\\n    };\\n    try {\\n      await proceedWithAnalysis(company, account, fakeAccountData);\\n    } catch (error) {\\n      console.debug(\\"Error in analysis with fallback data:\\", error);\\n      analysisModal.update((state) => ({\\n        ...state,\\n        isLoading: false,\\n        content: `<p>${$i18n.t(\\"Analysis data not available for this account yet. Please try again later.\\")}</p>`\\n      }));\\n    }\\n    return;\\n  }\\n  const accountData = data.companies[company].accounts[account];\\n  openAnalysisModal(`${company} - ${account} - ${accountData.name}`, company, account);\\n  await proceedWithAnalysis(company, account, accountData);\\n}\\nasync function proceedWithAnalysis(company, account, accountData) {\\n  const timeout = setTimeout(() => {\\n    analysisModal.update((state) => {\\n      if (state.isLoading) {\\n        console.log(\\"Analysis request timed out after 15 seconds\\");\\n        toast.error($i18n.t(\\"Analysis request timed out. Please try again.\\"));\\n        return {\\n          ...state,\\n          isLoading: false,\\n          content: `<p class=\\"text-red-500\\">${$i18n.t(\\"Analysis request timed out. Please try again.\\")}</p>`\\n        };\\n      }\\n      return state;\\n    });\\n  }, 15e3);\\n  try {\\n    console.log(\\"Account data for analysis:\\", accountData);\\n    const requestData = {\\n      company,\\n      account,\\n      accountName: accountData.name,\\n      currentMonth: selectedMonth,\\n      previousMonth: accountData.months?.[0]?.previousMonth,\\n      changePercentage: (accountData.currentTotal - accountData.previousTotal) / Math.abs(accountData.previousTotal || 1) * 100\\n      // Use 1 as fallback to avoid division by zero\\n    };\\n    console.log(\\"Auto analysis request data:\\", requestData);\\n    const controller = new AbortController();\\n    const abortTimeout = setTimeout(() => controller.abort(), 1e4);\\n    let response;\\n    let result;\\n    try {\\n      response = await fetch(`${apiBaseUrl}/proxy/api/auto_analysis`, {\\n        method: \\"POST\\",\\n        headers: {\\n          \\"Content-Type\\": \\"application/json\\",\\n          \\"Accept-Language\\": apiConfig.languageLocal,\\n          \\"Authorization\\": `Bearer ${apiConfig.userToken}`\\n        },\\n        body: JSON.stringify(requestData),\\n        signal: controller.signal\\n      });\\n      clearTimeout(abortTimeout);\\n      console.log(\\"Auto analysis response status:\\", response.status);\\n      if (!response.ok) {\\n        throw new Error(`Server responded with ${response.status}: ${response.statusText}`);\\n      }\\n      result = await response.json();\\n      console.log(\\"Auto analysis response data:\\", result);\\n    } catch (fetchError) {\\n      if (fetchError.name === \\"AbortError\\") {\\n        console.error(\\"Analysis request aborted due to timeout\\");\\n        toast.error($i18n.t(\\"Analysis request timed out\\"));\\n        analysisModal.update((state) => ({\\n          ...state,\\n          isLoading: false,\\n          content: `<p class=\\"text-red-500\\">${$i18n.t(\\"Analysis request timed out\\")}</p>`\\n        }));\\n      } else {\\n        console.error(\\"Error during fetch:\\", fetchError);\\n        toast.error($i18n.t(\\"Error communicating with server\\"));\\n        analysisModal.update((state) => ({\\n          ...state,\\n          isLoading: false,\\n          content: `<p class=\\"text-red-500\\">${$i18n.t(\\"Error communicating with server\\")}</p>`\\n        }));\\n      }\\n      clearTimeout(timeout);\\n      return;\\n    }\\n    if (result && result.success) {\\n      console.log(\\"Auto analysis generated successfully\\");\\n      const analysisContent = typeof result.analysis === \\"string\\" ? result.analysis : String(result.analysis || \\"\\");\\n      const analysisKey = `${company}-${account}-${selectedMonth}`;\\n      analysisText = {\\n        ...analysisText,\\n        [analysisKey]: analysisContent,\\n        // Also store in the general format for backward compatibility\\n        [`${company}-${account}`]: analysisContent\\n      };\\n      console.log(\\"Analysis stored with keys:\\", {\\n        monthSpecificKey: analysisKey,\\n        generalKey: `${company}-${account}`\\n      });\\n      analysisModal.update((state) => ({\\n        ...state,\\n        isLoading: false,\\n        content: formatAnalysisText(analysisContent),\\n        editText: analysisContent\\n        // Also set the editText field for easier editing\\n      }));\\n      analysisInputText = analysisContent;\\n      currentAnalysisKey = analysisKey;\\n    } else {\\n      console.error(\\"Auto analysis response indicates failure:\\", result?.error || \\"Unknown error\\");\\n      toast.error($i18n.t(\\"Failed to generate analysis\\"));\\n      analysisModal.update((state) => ({\\n        ...state,\\n        isLoading: false,\\n        content: `<p class=\\"text-red-500\\">${$i18n.t(\\"Failed to generate analysis\\")}</p>`\\n      }));\\n      const analysisKey = `${company}-${account}-${selectedMonth}`;\\n      const generalKey = `${company}-${account}`;\\n      analysisInputText = analysisText[analysisKey] || analysisText[generalKey] || \\"\\";\\n      currentAnalysisKey = analysisKey;\\n    }\\n  } catch (error) {\\n    console.error(\\"Error generating analysis:\\", error);\\n    toast.error($i18n.t(\\"Error generating analysis\\"));\\n    analysisModal.update((state) => ({\\n      ...state,\\n      isLoading: false,\\n      content: `<p class=\\"text-red-500\\">${$i18n.t(\\"Error generating analysis\\")}</p>`\\n    }));\\n    const analysisKey = `${company}-${account}-${selectedMonth}`;\\n    const generalKey = `${company}-${account}`;\\n    analysisInputText = analysisText[analysisKey] || analysisText[generalKey] || \\"\\";\\n    currentAnalysisKey = analysisKey;\\n  } finally {\\n    clearTimeout(timeout);\\n  }\\n}\\nasync function handleAnalysisSave() {\\n  if (!currentAnalysisKey) return;\\n  const parts = currentAnalysisKey.split(\\"-\\");\\n  const company = parts[0];\\n  const account = parts[1];\\n  const month = parts.length > 2 ? parts.slice(2).join(\\"-\\") : selectedMonth;\\n  try {\\n    const monthKey = `${company}-${account}-${month}`;\\n    const generalKey = `${company}-${account}`;\\n    analysisText = {\\n      ...analysisText,\\n      [monthKey]: analysisInputText,\\n      [generalKey]: analysisInputText\\n    };\\n    await updateGraphNodeAnalysis(company, account, analysisInputText);\\n    currentView = \\"main\\";\\n    toast.success($i18n.t(\\"Analysis saved\\"));\\n  } catch (error) {\\n    console.error(\\"Error saving analysis:\\", error);\\n    toast.error($i18n.t(\\"Failed to save analysis\\"));\\n  }\\n}\\nasync function updateGraphNodeAnalysis(company, account, analysisText2) {\\n  try {\\n    const accountData = data.companies[company].accounts[account];\\n    const response = await fetch(`${apiBaseUrl}/proxy/api/update_graph_analysis`, {\\n      method: \\"POST\\",\\n      headers: {\\n        \\"Content-Type\\": \\"application/json\\",\\n        \\"Accept-Language\\": apiConfig.languageLocal,\\n        \\"Authorization\\": `Bearer ${apiConfig.userToken}`\\n      },\\n      body: JSON.stringify({\\n        company,\\n        account,\\n        accountName: accountData.name,\\n        currentMonth: selectedMonth,\\n        llm_analysis: analysisText2\\n      })\\n    });\\n    const result = await response.json();\\n    if (!result.success) {\\n      throw new Error(result.error || \\"Failed to update graph analysis\\");\\n    }\\n  } catch (error) {\\n    console.error(\\"Error updating graph node analysis:\\", error);\\n    throw error;\\n  }\\n}\\nasync function handleDownloadTemplate() {\\n  try {\\n    const response = await fetch(`${apiBaseUrl}/proxy/api/download_account_tree_template`, {\\n      method: \\"GET\\",\\n      headers: {\\n        \\"Content-Type\\": \\"application/json\\",\\n        \\"Accept-Language\\": apiConfig.languageLocal,\\n        \\"Authorization\\": `Bearer ${apiConfig.userToken}`\\n      }\\n    });\\n    if (!response.ok) {\\n      throw new Error(\\"Failed to download template\\");\\n    }\\n    const blob = await response.blob();\\n    const url = window.URL.createObjectURL(blob);\\n    const a = document.createElement(\\"a\\");\\n    a.style.display = \\"none\\";\\n    a.href = url;\\n    a.download = \\"account_tree_template.xlsx\\";\\n    document.body.appendChild(a);\\n    a.click();\\n    setTimeout(() => {\\n      window.URL.revokeObjectURL(url);\\n      document.body.removeChild(a);\\n    }, 100);\\n    toast.success($i18n.t(\\"Template downloaded\\"));\\n  } catch (error) {\\n    console.error(\\"Error downloading template:\\", error);\\n    toast.error($i18n.t(\\"Failed to download template\\"));\\n  }\\n}\\nfunction formatNumber(num) {\\n  if (num === null || num === void 0) return \\"-\\";\\n  return new Intl.NumberFormat(\\"en-US\\", {\\n    minimumFractionDigits: 0,\\n    maximumFractionDigits: 0\\n  }).format(num);\\n}\\nfunction formatPercentage(num) {\\n  if (num === null || num === void 0) return \\"-\\";\\n  return `${num > 0 ? \\"+\\" : \\"\\"}${num.toFixed(1)}%`;\\n}\\nfunction isSignificantChange(percentageChange) {\\n  if (!percentageChange) return false;\\n  return Math.abs(percentageChange) >= threshold;\\n}\\nfunction renderIqrFlag(iqrFlag) {\\n  if (iqrFlag === 1) return `<span title=\\"${$i18n.t(\\"Above normal range\\")}\\">\\\\u{1F6A9} +</span>`;\\n  if (iqrFlag === -1) return `<span title=\\"${$i18n.t(\\"Below normal range\\")}\\">\\\\u{1F6A9} -</span>`;\\n  if (iqrFlag === 0) return `<span title=\\"${$i18n.t(\\"Within normal range\\")}\\">\\\\u2550</span>`;\\n  return \\"-\\";\\n}\\nfunction renderTableHeader() {\\n  return `\\n      <div class=\\"table-header w-full grid grid-cols-5 text-sm font-semibold py-2 px-3 bg-blue-100 dark:bg-blue-900/30 border-b border-blue-200 dark:border-blue-900/50 rounded-t-lg\\">\\n        <div class=\\"col-span-1\\">${$i18n.t(\\"Account\\")}</div>\\n        <div class=\\"text-right pr-4\\">${$i18n.t(\\"Current\\")}</div>\\n        <div class=\\"text-right pr-4\\">${$i18n.t(\\"Previous\\")}</div>\\n        <div class=\\"text-right pr-4\\">${$i18n.t(\\"Variance\\")}</div>\\n        <div class=\\"text-right pr-4\\">${$i18n.t(\\"Change %\\")}</div>\\n      </div>\\n    `;\\n}\\nfunction renderAccount(company, account, accountName, accountData) {\\n  const changePercentage = accountData.previousTotal !== 0 ? (accountData.currentTotal - accountData.previousTotal) / Math.abs(accountData.previousTotal) * 100 : 0;\\n  const significant = isSignificantChange(changePercentage);\\n  return `\\n      <div class=\\"account-row w-full grid grid-cols-5 text-sm py-2 px-3 border-b border-blue-100 dark:border-blue-900/20 hover:bg-blue-50 dark:hover:bg-blue-900/10 ${significant ? \\"bg-yellow-50 dark:bg-yellow-900/10\\" : \\"\\"}\\">\\n        <div class=\\"flex items-center\\" style=\\"padding-left: 16px;\\">\\n          <span class=\\"font-mono text-xs mr-2 text-gray-500 dark:text-gray-400\\">${account}</span>\\n          <span class=\\"cursor-pointer hover:text-blue-600 dark:hover:text-blue-400\\" \\n             data-action=\\"account-click\\" \\n             data-company=\\"${company}\\" \\n             data-account=\\"${account}\\" \\n             data-name=\\"${accountName}\\">\\n            ${accountName}\\n          </span>\\n        </div>\\n        <div class=\\"text-right pr-4 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400\\" \\n           data-action=\\"transactions\\" \\n           data-company=\\"${company}\\" \\n           data-account=\\"${account}\\" \\n           data-month=\\"${selectedMonth}\\">\\n          ${formatNumber(accountData.currentTotal)}\\n        </div>\\n        <div class=\\"text-right pr-4 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400\\" \\n           data-action=\\"transactions-prev\\" \\n           data-company=\\"${company}\\" \\n           data-account=\\"${account}\\" \\n           data-month=\\"${accountData.months?.[0]?.previousMonth || \\"\\"}\\">\\n          ${formatNumber(accountData.previousTotal)}\\n        </div>\\n        <div class=\\"text-right pr-4\\">\\n          ${formatNumber(accountData.currentTotal - accountData.previousTotal)}\\n        </div>\\n        <div class=\\"text-right pr-4 ${significant ? \\"text-red-600 dark:text-red-400 font-semibold\\" : \\"\\"}\\">\\n          ${formatPercentage(changePercentage)}\\n          <i class=\\"edit-icon ml-2 cursor-pointer\\" \\n             data-action=\\"show-analysis\\" \\n             data-company=\\"${company}\\" \\n             data-account=\\"${account}\\"\\n             data-name=\\"${accountName}\\"\\n             title=\\"${$i18n.t(\\"View Analysis\\")}\\">\\n            \\\\u{1F50D}\\n          </i>\\n        </div>\\n      </div>\\n    `;\\n}\\nfunction renderCategoriesFromData(companyKey, category, level, path) {\\n  if (!category) return \\"\\";\\n  let html = \\"\\";\\n  const categoryName = category.name || \\"\\";\\n  if (!categoryName) {\\n    console.error(\\"Category has no name:\\", category);\\n    return \\"\\";\\n  }\\n  if (level === 0 && categoryName === \\"Root\\") {\\n    console.log(\\"Rendering root node children as categories:\\", categoryName);\\n    if (category.children) {\\n      const sortedChildren = Object.entries(category.children).sort((a, b) => {\\n        const aName = a[1].name || a[0];\\n        const bName = b[1].name || b[0];\\n        if (aName.includes(\\"Operating Profit\\") || aName.includes(\\"Profit\\")) return -1;\\n        if (bName.includes(\\"Operating Profit\\") || bName.includes(\\"Profit\\")) return 1;\\n        if (aName.includes(\\"Operating Costs\\") || aName.includes(\\"Costs\\")) return 1;\\n        if (bName.includes(\\"Operating Costs\\") || bName.includes(\\"Costs\\")) return -1;\\n        return String(aName).localeCompare(String(bName));\\n      });\\n      sortedChildren.forEach(([childKey, childNode]) => {\\n        console.log(`Rendering top-level category: ${childKey}`);\\n        html += renderCategoriesFromData(companyKey, childNode, level + 1, [...path, categoryName]);\\n      });\\n    }\\n    return html;\\n  }\\n  if (level !== 0 && (categoryName === \\"\\\\u5229\\\\u6DA6\\" || categoryName.toLowerCase() === \\"profit\\")) {\\n    console.log(\\"Bypassing profit/loss node:\\", categoryName);\\n    if (category.children) {\\n      Object.entries(category.children).forEach(([childKey, childNode]) => {\\n        html += renderCategoriesFromData(companyKey, childNode, level + 1, [...path, categoryName]);\\n      });\\n    }\\n    return html;\\n  }\\n  if (isAccountNode(category)) {\\n    console.log(\\"Rendering account node:\\", categoryName);\\n    const accountCode = categoryName.split(\\" \\")[0];\\n    const accountName = categoryName.substring(accountCode.length + 1).trim();\\n    const accountData = data?.companies?.[companyKey]?.accounts?.[accountCode] || {\\n      currentTotal: category.currentTotal || 0,\\n      previousTotal: category.previousTotal || 0\\n    };\\n    return renderAccount(companyKey, accountCode, accountName, accountData);\\n  }\\n  const categoryPath = [...path, categoryName].join(\\"/\\");\\n  const isExpanded = !!expandedCategories[categoryPath];\\n  const displayName = categoryName.startsWith(\\"-\\") ? categoryName.substring(1) : categoryName;\\n  console.log(`Rendering category: ${categoryName}, Path: ${categoryPath}, Level: ${level}`);\\n  const currentTotal = category.currentTotal || 0;\\n  const previousTotal = category.previousTotal || 0;\\n  const changePercentage = previousTotal !== 0 && previousTotal != null ? (currentTotal - previousTotal) / Math.abs(previousTotal) * 100 : 0;\\n  html += `\\n      <div class=\\"category-section\\">\\n        <div \\n          class=\\"category-header w-full grid grid-cols-5 text-sm py-2 px-3 \\n          ${level > 0 ? \\"bg-blue-50/70 dark:bg-blue-900/20\\" : \\"bg-blue-100 dark:bg-blue-900/30\\"} \\n          cursor-pointer hover:bg-blue-100 dark:hover:bg-blue-900/40 border-b border-blue-200 dark:border-blue-900/30\\"\\n          data-action=\\"toggle-category\\" \\n          data-path=\\"${categoryPath}\\"\\n          style=\\"padding-left: ${level * 20 + 12}px\\">\\n          <div class=\\"flex items-center\\">\\n            <div class=\\"toggle-icon mr-2 text-blue-600 dark:text-blue-400\\">${isExpanded ? \\"\\\\u25BC\\" : \\"\\\\u25B6\\"}</div>\\n            <div class=\\"font-medium text-blue-800 dark:text-blue-300\\">${displayName}</div>\\n          </div>\\n          <div class=\\"text-right pr-4\\">${formatNumber(currentTotal)}</div>\\n          <div class=\\"text-right pr-4\\">${formatNumber(previousTotal)}</div>\\n          <div class=\\"text-right pr-4\\">${formatNumber(currentTotal - previousTotal)}</div>\\n          <div class=\\"text-right pr-4 ${isSignificantChange(changePercentage) ? \\"text-red-600 dark:text-red-400 font-semibold\\" : \\"\\"}\\">\\n            ${formatPercentage(changePercentage)}\\n          </div>\\n        </div>\\n    `;\\n  if (isExpanded && category.children) {\\n    html += `<div class=\\"category-content\\">`;\\n    try {\\n      const sortedChildren = Object.entries(category.children).sort((a, b) => {\\n        const aIsAccount = isAccountNode(a[1]);\\n        const bIsAccount = isAccountNode(b[1]);\\n        if (aIsAccount && !bIsAccount) return 1;\\n        if (!aIsAccount && bIsAccount) return -1;\\n        const aName = a[1].name || a[0];\\n        const bName = b[1].name || b[0];\\n        return String(aName).localeCompare(String(bName));\\n      });\\n      sortedChildren.forEach(([childKey, childNode]) => {\\n        if (!childNode) return;\\n        html += renderCategoriesFromData(companyKey, childNode, level + 1, [...path, categoryName]);\\n      });\\n    } catch (error) {\\n      console.error(\\"Error rendering category children:\\", error);\\n      html += `<div class=\\"error p-2 text-red-500\\">Error rendering children: ${error.message || \\"Unknown error\\"}</div>`;\\n    }\\n    html += `</div>`;\\n  }\\n  html += `</div>`;\\n  return html;\\n}\\nfunction renderCompany(companyKey, companyData) {\\n  if (!companyData) {\\n    console.error(\\"Invalid company data:\\", companyKey);\\n    return \\"\\";\\n  }\\n  console.log(\\"Rendering company:\\", companyKey, companyData);\\n  const isExpanded = !!expandedCompanies[companyKey];\\n  let html = `\\n      <div class=\\"company-section mb-4\\">\\n        <div class=\\"company-header flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-900/50 rounded-t-lg cursor-pointer transition duration-150 hover:bg-blue-100 dark:hover:bg-blue-900/50\\"\\n             data-action=\\"toggle-company\\" \\n             data-company=\\"${companyKey}\\">\\n          <div class=\\"flex items-center\\">\\n            <div class=\\"toggle-icon mr-2 text-blue-600 dark:text-blue-400\\">${isExpanded ? \\"\\\\u25BC\\" : \\"\\\\u25B6\\"}</div>\\n            <div class=\\"font-bold text-blue-800 dark:text-blue-300\\">${companyKey}</div>\\n          </div>\\n        </div>\\n    `;\\n  if (isExpanded) {\\n    html += `\\n        <div class=\\"company-content\\">\\n          <div class=\\"company-data border border-blue-200 dark:border-blue-900/50 rounded-b-lg bg-white dark:bg-gray-800\\">\\n            ${renderTableHeader()}\\n    `;\\n    if (companyData.categories) {\\n      html += renderCategoriesFromData(companyKey, companyData.categories, 0, []);\\n    }\\n    html += `\\n        </div>\\n      </div>\\n    `;\\n  }\\n  html += `</div>`;\\n  return html;\\n}\\nfunction renderTreeStructure() {\\n  if (!accountTree || !data) {\\n    console.log(\\"Cannot render tree: missing accountTree or data\\");\\n    return \\"\\";\\n  }\\n  let html = \\"\\";\\n  console.log(\\"Rendering tree structure with data:\\", data);\\n  Object.entries(data.companies || {}).forEach(([companyKey, companyData]) => {\\n    html += renderCompany(companyKey, companyData);\\n  });\\n  return html;\\n}\\nfunction handleModalClick(e) {\\n  const target = e.target;\\n  const actionElement = target.closest(\\"[data-action]\\");\\n  if (!actionElement) return;\\n  const action = actionElement.dataset.action;\\n  console.log(\\"Modal action clicked:\\", action, actionElement.dataset);\\n  switch (action) {\\n    case \\"toggle-company\\":\\n      const company = actionElement.dataset.company;\\n      if (!company) {\\n        console.error(\\"No company key provided in toggle-company action\\");\\n        return;\\n      }\\n      console.log(\\"Toggle company clicked for:\\", company);\\n      toggleCompany(company);\\n      break;\\n    case \\"toggle-category\\":\\n      const path = actionElement.dataset.path;\\n      if (!path) {\\n        console.error(\\"No path provided in toggle-category action\\");\\n        return;\\n      }\\n      console.log(\\"Toggle category path:\\", path);\\n      toggleCategory(path);\\n      break;\\n    case \\"select-month\\":\\n      const month = actionElement.dataset.month;\\n      if (month && chartData) {\\n        console.log(\\"Month selected:\\", month);\\n        selectedMonth = month;\\n        const analysisKey = `${chartData.company}-${chartData.account}-${month}`;\\n        const generalKey2 = `${chartData.company}-${chartData.account}`;\\n        if (!analysisText[analysisKey] && !analysisText[generalKey2]) {\\n          fetchAutoAnalysis(chartData.company, chartData.account);\\n        }\\n      }\\n      break;\\n    case \\"close-popup\\":\\n      selectedMonth = null;\\n      break;\\n    case \\"account-click\\":\\n      const clickCompany = actionElement.dataset.company;\\n      const clickAccount = actionElement.dataset.account;\\n      const clickName = actionElement.dataset.name;\\n      console.log(\\"Account click action with data:\\", {\\n        company: clickCompany,\\n        account: clickAccount,\\n        name: clickName\\n      });\\n      if (!clickCompany || !clickAccount) {\\n        console.error(\\"Missing company or account data for account-click action\\");\\n        return;\\n      }\\n      handleAccountClick(clickCompany, clickAccount, clickName);\\n      break;\\n    case \\"transactions\\":\\n      const txCompany = actionElement.dataset.company;\\n      const txAccount = actionElement.dataset.account;\\n      const txMonth = actionElement.dataset.month;\\n      fetchTransactions(txCompany, txAccount, txMonth);\\n      break;\\n    case \\"transactions-prev\\":\\n      const txPrevCompany = actionElement.dataset.company;\\n      const txPrevAccount = actionElement.dataset.account;\\n      let txPrevMonth = actionElement.dataset.month;\\n      if (!txPrevMonth) {\\n        if (selectedMonth) {\\n          const [year, month2] = selectedMonth.split(\\"-\\").map(Number);\\n          let prevMonth = month2 - 1;\\n          let prevYear = year;\\n          if (prevMonth === 0) {\\n            prevMonth = 12;\\n            prevYear--;\\n          }\\n          txPrevMonth = `${prevYear}-${prevMonth.toString().padStart(2, \\"0\\")}`;\\n          console.log(\\"Calculated previous month:\\", txPrevMonth);\\n        } else {\\n          txPrevMonth = selectedMonth;\\n        }\\n      }\\n      if (txPrevMonth) {\\n        fetchTransactions(txPrevCompany, txPrevAccount, txPrevMonth, true);\\n      }\\n      break;\\n    case \\"show-analysis\\":\\n      const analysisCompany = actionElement.dataset.company;\\n      const analysisAccount = actionElement.dataset.account;\\n      const analysisName = actionElement.dataset.name;\\n      console.log(\\"Show analysis for:\\", analysisCompany, analysisAccount, analysisName);\\n      const title = `${analysisCompany} - ${analysisAccount} - ${analysisName}`;\\n      const monthKey = `${analysisCompany}-${analysisAccount}-${selectedMonth}`;\\n      const generalKey = `${analysisCompany}-${analysisAccount}`;\\n      if (analysisText[monthKey] || analysisText[generalKey]) {\\n        const content = formatAnalysisText(analysisText[monthKey] || analysisText[generalKey]);\\n        const rawText = analysisText[monthKey] || analysisText[generalKey] || \\"\\";\\n        analysisModal.update((state) => ({\\n          ...state,\\n          isOpen: true,\\n          title,\\n          content,\\n          isLoading: false,\\n          company: analysisCompany || \\"\\",\\n          account: analysisAccount || \\"\\",\\n          isEditing: false,\\n          editText: rawText\\n        }));\\n      } else {\\n        fetchAutoAnalysis(analysisCompany, analysisAccount);\\n      }\\n      break;\\n    case \\"generate-analysis\\":\\n      const genCompany = actionElement.dataset.company;\\n      const genAccount = actionElement.dataset.account;\\n      const genMonth = actionElement.dataset.month;\\n      currentAnalysisKey = `${genCompany}-${genAccount}-${genMonth}`;\\n      fetchAutoAnalysis(genCompany, genAccount);\\n      break;\\n  }\\n}\\nfunction navigateBack() {\\n  console.log(\\"Navigating back from view:\\", currentView);\\n  currentView = \\"main\\";\\n}\\nfunction initChart() {\\n  if (typeof window === \\"undefined\\") return;\\n  const chartElement = document.getElementById(\\"trendChart\\");\\n  if (!chartElement || !chartData) return;\\n  const company = chartElement.getAttribute(\\"data-company\\");\\n  const account = chartElement.getAttribute(\\"data-account\\");\\n  console.log(\\"Chart initialization with data attributes:\\", {\\n    company,\\n    account,\\n    hasChartData: !!chartData,\\n    dataReady: chartElement.getAttribute(\\"data-ready\\"),\\n    selectedMonth\\n  });\\n  if (typeof Chart === \\"undefined\\") {\\n    console.log(\\"Chart.js not loaded yet, trying again in 100ms\\");\\n    setTimeout(initChart, 100);\\n    return;\\n  }\\n  try {\\n    const ctx = chartElement.getContext(\\"2d\\");\\n    if (!ctx) return;\\n    if (window.trendChartInstance) {\\n      console.log(\\"Destroying previous chart instance\\");\\n      window.trendChartInstance.destroy();\\n    }\\n    const dataPoints = chartData.months.map((month, index) => ({\\n      month,\\n      value: chartData.values[index] || 0,\\n      dateValue: month.split(\\"-\\").map(Number).reduce((y, m) => y * 100 + m, 0),\\n      originalIndex: index\\n      // Store original index for reference\\n    })).sort((a, b) => a.dateValue - b.dateValue);\\n    const labels = dataPoints.map((p) => p.month);\\n    const values = dataPoints.map((p) => p.value);\\n    const pointColors = labels.map((month, i) => {\\n      if (selectedMonth === month) return \\"#8b5cf6\\";\\n      if (!selectedMonth && i === labels.length - 1) return \\"#3b82f6\\";\\n      const monthKey = `${chartData.company}-${chartData.account}-${month}`;\\n      const generalKey = `${chartData.company}-${chartData.account}`;\\n      const hasAnalysis = analysisText[monthKey] || analysisText[generalKey];\\n      return hasAnalysis ? \\"#60a5fa\\" : \\"#94a3b8\\";\\n    });\\n    const gradient = ctx.createLinearGradient(0, 0, 800, 0);\\n    gradient.addColorStop(0, \\"rgba(59, 130, 246, 0.8)\\");\\n    gradient.addColorStop(1, \\"rgba(139, 92, 246, 0.8)\\");\\n    console.log(\\"Creating chart with following configuration:\\", {\\n      labels,\\n      company,\\n      account,\\n      selectedMonth,\\n      canvasDataAttributes: {\\n        company: chartElement.getAttribute(\\"data-company\\"),\\n        account: chartElement.getAttribute(\\"data-account\\")\\n      },\\n      pointColors\\n    });\\n    const pointRadius = labels.map(\\n      (month) => month === selectedMonth ? 8 : 6\\n    );\\n    const pointHoverRadius = labels.map(\\n      (month) => month === selectedMonth ? 10 : 8\\n    );\\n    window.trendChartInstance = new Chart(ctx, {\\n      type: \\"line\\",\\n      data: {\\n        labels,\\n        datasets: [{\\n          label: \\"Monthly Values\\",\\n          data: values,\\n          borderColor: gradient,\\n          backgroundColor: gradient,\\n          pointBackgroundColor: pointColors,\\n          pointBorderColor: labels.map(\\n            (month) => month === selectedMonth ? \\"#ffffff\\" : \\"#ffffff\\"\\n          ),\\n          pointBorderWidth: labels.map(\\n            (month) => month === selectedMonth ? 2 : 1.5\\n          ),\\n          pointRadius,\\n          pointHoverRadius,\\n          borderWidth: 3,\\n          tension: 0.1,\\n          fill: false\\n        }]\\n      },\\n      options: {\\n        responsive: true,\\n        maintainAspectRatio: false,\\n        animation: {\\n          duration: 500\\n        },\\n        plugins: {\\n          legend: {\\n            display: false\\n          },\\n          tooltip: {\\n            callbacks: {\\n              label: function(context) {\\n                return new Intl.NumberFormat().format(context.parsed.y);\\n              },\\n              title: function(tooltipItems) {\\n                return tooltipItems[0].label;\\n              }\\n            },\\n            backgroundColor: \\"rgba(0, 0, 0, 0.7)\\",\\n            titleFont: {\\n              size: 14,\\n              weight: \\"bold\\"\\n            },\\n            bodyFont: {\\n              size: 13\\n            },\\n            padding: 10,\\n            displayColors: false\\n          }\\n        },\\n        scales: {\\n          x: {\\n            ticks: {\\n              callback: function(value, index) {\\n                const monthStr = labels[index].split(\\"-\\")[1];\\n                return monthStr || \\"\\";\\n              },\\n              maxRotation: 0,\\n              color: function(context) {\\n                const month = labels[context.index];\\n                return month === selectedMonth ? \\"#8b5cf6\\" : void 0;\\n              },\\n              font: {\\n                size: 10,\\n                weight: function(context) {\\n                  const month = labels[context.index];\\n                  return month === selectedMonth ? \\"bold\\" : \\"normal\\";\\n                }\\n              }\\n            },\\n            grid: {\\n              display: false\\n            }\\n          },\\n          y: {\\n            beginAtZero: true,\\n            ticks: {\\n              callback: function(value) {\\n                return new Intl.NumberFormat().format(value);\\n              },\\n              font: {\\n                size: 10\\n              }\\n            },\\n            grid: {\\n              color: \\"rgba(0, 0, 0, 0.05)\\"\\n            }\\n          }\\n        },\\n        onClick: function(event, elements) {\\n          if (elements.length === 0) {\\n            console.log(\\"Chart background clicked, clearing selected month\\");\\n            selectedMonth = null;\\n            setTimeout(() => initChart(), 50);\\n            return;\\n          }\\n          const index = elements[0].index;\\n          const month = labels[index];\\n          console.log(\\"Chart point clicked:\\", {\\n            month,\\n            index,\\n            chartDataCompany: chartData?.company,\\n            chartDataAccount: chartData?.account\\n          });\\n          selectedMonth = month;\\n          setTimeout(() => initChart(), 50);\\n          const canvas = document.getElementById(\\"trendChart\\");\\n          const canvasCompany = canvas ? canvas.getAttribute(\\"data-company\\") : null;\\n          const canvasAccount = canvas ? canvas.getAttribute(\\"data-account\\") : null;\\n          const modalTitle = chartTitle + ` - ${month}`;\\n          const analysisKey = `${canvasCompany}-${canvasAccount}-${month}`;\\n          const generalKey = `${canvasCompany}-${canvasAccount}`;\\n          if (analysisText[analysisKey] || analysisText[generalKey]) {\\n            const content = formatAnalysisText(analysisText[analysisKey] || analysisText[generalKey]);\\n            const rawText = analysisText[analysisKey] || analysisText[generalKey] || \\"\\";\\n            analysisModal.update((state) => ({\\n              ...state,\\n              isOpen: true,\\n              title: modalTitle,\\n              content,\\n              isLoading: false,\\n              company: canvasCompany || \\"\\",\\n              account: canvasAccount || \\"\\",\\n              isEditing: false,\\n              editText: rawText\\n            }));\\n          } else {\\n            if (canvasCompany && canvasAccount) {\\n              fetchAutoAnalysis(canvasCompany, canvasAccount);\\n            }\\n          }\\n          const selectEvent = new CustomEvent(\\"select-month\\", {\\n            detail: {\\n              month,\\n              company: canvasCompany,\\n              account: canvasAccount\\n            }\\n          });\\n          console.log(\\"Dispatching select-month event with:\\", {\\n            month,\\n            company: canvasCompany,\\n            account: canvasAccount\\n          });\\n          document.dispatchEvent(selectEvent);\\n        }\\n      }\\n    });\\n    console.log(\\"Chart initialized successfully\\");\\n  } catch (error) {\\n    console.error(\\"Error initializing chart:\\", error);\\n  }\\n}\\nfunction renderTimeline() {\\n  if (!chartData || !chartData.months || chartData.months.length === 0) {\\n    console.log(\\"No chart data available\\");\\n    return \\"\\";\\n  }\\n  const refreshTimestamp = analysisContentTimestamp;\\n  console.log(\\"Rendering timeline with data:\\", {\\n    company: chartData.company,\\n    account: chartData.account,\\n    months: chartData.months.length,\\n    refreshTimestamp,\\n    selectedMonth,\\n    isGeneratingAnalysis\\n  });\\n  const companyValue = chartData.company || \\"\\";\\n  const accountValue = chartData.account || \\"\\";\\n  console.log(\\"Setting chart data attributes:\\", {\\n    company: companyValue,\\n    account: accountValue\\n  });\\n  let html = \'<div class=\\"chart-visualization relative bg-gradient-to-b from-blue-100/50 to-purple-100/30 dark:from-blue-900/20 dark:to-purple-900/10 p-6 pt-8 pb-12 rounded-xl shadow-sm border border-blue-100 dark:border-blue-900/30 mb-6\\">\';\\n  html += `<h3 class=\\"text-lg font-medium mb-4 text-gray-700 dark:text-gray-300\\">${$i18n.t(\\"Monthly Trend\\")}</h3>`;\\n  html += \'<div class=\\"chart-container h-64 relative\\">\';\\n  html += `<canvas id=\\"trendChart\\" width=\\"800\\" height=\\"250\\" data-company=\\"${companyValue}\\" data-account=\\"${accountValue}\\" data-ready=\\"true\\"></canvas>`;\\n  html += \\"</div>\\";\\n  if (selectedMonth) {\\n    const monthIndex = chartData.months.findIndex((m) => m === selectedMonth);\\n    const monthValue = monthIndex !== -1 ? chartData.values[monthIndex] : null;\\n    let previousMonth = null;\\n    let previousValue = null;\\n    let percentChange = null;\\n    const sortedMonths = [...chartData.months].map((month2, idx) => ({\\n      month: month2,\\n      value: chartData.values[idx],\\n      date: new Date(month2.split(\\"-\\")[0], parseInt(month2.split(\\"-\\")[1]) - 1)\\n    })).sort((a, b) => a.date.getTime() - b.date.getTime());\\n    const currentMonthIdx = sortedMonths.findIndex((m) => m.month === selectedMonth);\\n    if (currentMonthIdx > 0) {\\n      previousMonth = sortedMonths[currentMonthIdx - 1].month;\\n      previousValue = sortedMonths[currentMonthIdx - 1].value;\\n      if (previousValue && previousValue !== 0) {\\n        percentChange = (monthValue - previousValue) / Math.abs(previousValue) * 100;\\n      }\\n    }\\n    const [year, month] = selectedMonth.split(\\"-\\");\\n    const formattedMonth = `${month}/${year}`;\\n    html += \'<div class=\\"selected-month-indicator flex flex-col md:flex-row justify-between items-start md:items-center mt-4 p-4 bg-white dark:bg-gray-800 rounded-lg border border-blue-100 dark:border-blue-900/30 shadow-sm animate-fade-in\\">\';\\n    html += \'<div class=\\"flex items-center mb-3 md:mb-0\\">\';\\n    html += \'<div class=\\"w-3 h-3 rounded-full bg-purple-500 mr-2\\"></div>\';\\n    html += `<span class=\\"font-medium text-gray-700 dark:text-gray-300\\">${formattedMonth}</span>`;\\n    html += \\"</div>\\";\\n    html += \'<div class=\\"flex flex-col items-end\\">\';\\n    html += `<div class=\\"text-xl font-bold\\">${formatNumber(monthValue)}</div>`;\\n    if (percentChange !== null) {\\n      const changeClass = percentChange >= 0 ? \\"text-green-600 dark:text-green-400\\" : \\"text-red-600 dark:text-red-400\\";\\n      html += `<div class=\\"text-sm ${changeClass}\\">`;\\n      html += `${percentChange >= 0 ? \\"+\\" : \\"\\"}${percentChange.toFixed(1)}% vs ${previousMonth.split(\\"-\\")[1]}/${previousMonth.split(\\"-\\")[0]}`;\\n      html += \\"</div>\\";\\n    }\\n    html += \\"</div>\\";\\n    html += \\"</div>\\";\\n  }\\n  html += \\"</div>\\";\\n  return html;\\n}\\n$: if (chartData && currentView === \\"chart\\") {\\n  console.log(\\"chartData changed, scheduling chart initialization\\");\\n  if (!chartData.company || !chartData.account) {\\n    console.warn(\\"chartData missing company or account:\\", chartData);\\n    if (chartTitle) {\\n      const parts = chartTitle.split(\\" - \\");\\n      if (parts.length >= 2) {\\n        chartData = {\\n          ...chartData,\\n          company: parts[0],\\n          account: parts[1]\\n        };\\n        console.log(\\"Fixed chartData by extracting from title:\\", chartData);\\n      }\\n    }\\n  }\\n  setTimeout(() => {\\n    initChart();\\n  }, 200);\\n}\\nfunction formatAnalysisText(text) {\\n  if (!text) return \\"\\";\\n  const textStr = String(text);\\n  return textStr.replace(/\\\\n/g, \\"<br>\\");\\n}\\nasync function downloadWordReport() {\\n  try {\\n    console.log(\\"[DEBUG] Starting Word document download\\");\\n    let analysisContent = \\"\\";\\n    let title = \\"\\";\\n    if ($analysisModal.isOpen) {\\n      console.log(\\"[DEBUG] Getting content from modal\\");\\n      analysisContent = $analysisModal.editText || \\"\\";\\n      title = $analysisModal.title || \\"Analysis Report\\";\\n      if (!analysisContent && $analysisModal.content) {\\n        analysisContent = $analysisModal.content.replace(/<br>/g, \\"\\\\n\\").replace(/<[^>]*>/g, \\"\\");\\n      }\\n    } else if (analysisInputText) {\\n      console.log(\\"[DEBUG] Using input text\\");\\n      analysisContent = analysisInputText;\\n      title = currentAnalysisKey || \\"Analysis Report\\";\\n    }\\n    if (!analysisContent) {\\n      console.error(\\"[DEBUG] No analysis content available\\");\\n      toast.error($i18n.t(\\"No analysis content to download\\"));\\n      return;\\n    }\\n    console.log(\\"[DEBUG] Creating document with Docxtemplater\\");\\n    console.log(\\"[DEBUG] Content length:\\", analysisContent.length);\\n    console.log(\\"[DEBUG] Title:\\", title);\\n    const safeTitle = (title || \\"analysis\\").replace(/[^a-z0-9]/gi, \\"_\\").toLowerCase();\\n    const timestamp = (/* @__PURE__ */ new Date()).toISOString().replace(/[-:.]/g, \\"\\").substring(0, 14);\\n    const filename = `${safeTitle}_${timestamp}.docx`;\\n    try {\\n      const blob = await createDocxTemplateReport(analysisContent, title);\\n      downloadDocxDocument(blob, filename);\\n    } catch (docxTemplaterError) {\\n      console.error(\\"[DEBUG] Docxtemplater failed, falling back to simple document:\\", docxTemplaterError);\\n      const blob = await createSimpleWordDocument(analysisContent, title);\\n      downloadWordDocument(blob, filename);\\n    }\\n    console.log(\\"[DEBUG] Download complete\\");\\n    toast.success($i18n.t(\\"Report downloaded successfully\\"));\\n  } catch (error) {\\n    console.error(\\"[DEBUG] Error downloading Word report:\\", error);\\n    toast.error($i18n.t(\\"Failed to download report: \\") + (error.message || \\"Unknown error\\"));\\n  }\\n}\\nfunction toggleSidebar() {\\n  showSidebar.update((value) => !value);\\n}\\n<\/script>\\n\\n<!-- Analysis Modal -->\\n{#if $analysisModal.isOpen}\\n<div class=\\"fixed inset-0 z-50 flex items-center justify-center bg-black/60\\" on:click|self={closeAnalysisModal}>\\n  <div class=\\"w-full max-w-2xl bg-white dark:bg-gray-900 rounded-xl p-6 max-h-[80vh] overflow-auto\\">\\n    <div class=\\"flex justify-between items-center mb-4\\">\\n      <h2 class=\\"text-xl font-bold\\">{$analysisModal.title}</h2>\\n      <button \\n        class=\\"p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full\\"\\n        on:click={closeAnalysisModal}\\n      >\\n        <svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"h-5 w-5\\" viewBox=\\"0 0 20 20\\" fill=\\"currentColor\\">\\n          <path fill-rule=\\"evenodd\\" d=\\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\\" clip-rule=\\"evenodd\\" />\\n        </svg>\\n      </button>\\n    </div>\\n    \\n    {#if $analysisModal.isLoading}\\n      <div class=\\"flex justify-center items-center py-8\\">\\n        <Spinner className=\\"size-8\\" />\\n        <p class=\\"ml-3 text-gray-600 dark:text-gray-400\\">{$i18n.t(\'Generating analysis...\')}</p>\\n      </div>\\n    {:else if $analysisModal.isEditing}\\n      <!-- Editing Mode -->\\n      <div class=\\"mb-4\\">\\n        <textarea\\n          class=\\"w-full h-64 px-3 py-2 text-sm rounded border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800\\"\\n          bind:value={$analysisModal.editText}\\n          placeholder={$i18n.t(\'Enter your analysis here...\')}\\n        ></textarea>\\n      </div>\\n      \\n      <div class=\\"flex justify-end space-x-3\\">\\n        <button \\n          class=\\"px-4 py-2 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition\\"\\n          on:click={toggleEditMode}\\n        >\\n          {$i18n.t(\'Cancel\')}\\n        </button>\\n        <button \\n          class=\\"px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition\\"\\n          on:click={saveAnalysisEdit}\\n        >\\n          {$i18n.t(\'Save\')}\\n        </button>\\n      </div>\\n    {:else}\\n      <!-- Viewing Mode -->\\n      <div class=\\"analysis-content prose dark:prose-invert max-w-none\\">\\n        {#each ($analysisModal.content || \'\').split(\';\') as line}\\n          <p class=\\"mb-1\\">{@html line}</p>\\n        {/each}\\n      </div>\\n      \\n      <div class=\\"mt-4 flex justify-end space-x-3\\">\\n        <button \\n          class=\\"px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition flex items-center\\"\\n          on:click={async () => {\\n            try {\\n              // Disable button during download (via CSS)\\n              const button = event.currentTarget;\\n              button.classList.add(\'opacity-50\', \'pointer-events-none\');\\n              button.innerHTML = `<svg class=\\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\\" xmlns=\\"http://www.w3.org/2000/svg\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\"><circle class=\\"opacity-25\\" cx=\\"12\\" cy=\\"12\\" r=\\"10\\" stroke=\\"currentColor\\" stroke-width=\\"4\\"></circle><path class=\\"opacity-75\\" fill=\\"currentColor\\" d=\\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\\"></path></svg> ${$i18n.t(\'Downloading...\')}`;\\n              \\n              await downloadWordReport();\\n              \\n              // Re-enable button after download\\n              setTimeout(() => {\\n                button.classList.remove(\'opacity-50\', \'pointer-events-none\');\\n                button.innerHTML = `<svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"h-5 w-5 mr-2\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\" stroke=\\"currentColor\\"><path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\\" /></svg> ${$i18n.t(\'Download Report\')}`;\\n              }, 1000);\\n            } catch (e) {\\n              console.error(\'Error in download button click handler:\', e);\\n              toast.error($i18n.t(\'Download failed: \') + (e.message || \'\'));\\n              \\n              // Re-enable button after error\\n              const button = event.currentTarget;\\n              button.classList.remove(\'opacity-50\', \'pointer-events-none\');\\n              button.innerHTML = `<svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"h-5 w-5 mr-2\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\" stroke=\\"currentColor\\"><path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\\" /></svg> ${$i18n.t(\'Download Report\')}`;\\n            }\\n          }}\\n        >\\n          <svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"h-5 w-5 mr-2\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\" stroke=\\"currentColor\\">\\n            <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\\" />\\n          </svg>\\n          {$i18n.t(\'Download Report\')}\\n        </button>\\n        \\n        <button \\n          class=\\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition\\"\\n          on:click={toggleEditMode}\\n        >\\n          {$i18n.t(\'Edit Analysis\')}\\n        </button>\\n      </div>\\n    {/if}\\n  </div>\\n</div>\\n{/if}\\n\\n<svelte:head>\\n  <title>Account Analysis</title>\\n</svelte:head>\\n\\n<div class=\\"page-container w-full max-w-7xl mx-auto px-4 py-6\\">\\n  {#if currentView === \'main\'}\\n    <div class=\\"flex justify-between items-center mb-6\\">\\n      <button\\n        class=\\"cursor-pointer p-[7px] flex rounded-xl hover:bg-gray-100 dark:hover:bg-gray-900 transition\\"\\n        on:click={toggleSidebar}\\n        aria-label=\\"Toggle Sidebar\\"\\n      >\\n        <div class=\\"m-auto self-center\\">\\n          <svg\\n            xmlns=\\"http://www.w3.org/2000/svg\\"\\n            fill=\\"none\\"\\n            viewBox=\\"0 0 24 24\\"\\n            stroke-width=\\"2\\"\\n            stroke=\\"currentColor\\"\\n            class=\\"size-5\\"\\n          >\\n            <path\\n              stroke-linecap=\\"round\\"\\n              stroke-linejoin=\\"round\\"\\n              d=\\"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25H12\\"\\n            />\\n          </svg>\\n        </div>\\n      </button>\\n      <h1 class=\\"text-2xl font-bold text-blue-800 dark:text-blue-300\\">{$i18n.t(\'Account Analysis\')}</h1>\\n      <div class=\\"flex items-center space-x-2\\">\\n        <!-- Language dropdown removed -->\\n      </div>\\n    </div>\\n\\n    {#if loading}\\n      <div class=\\"flex justify-center items-center h-64\\">\\n        <Spinner className=\\"size-8\\" />\\n      </div>\\n    {:else if !accountTree}\\n      <div class=\\"text-center py-12 bg-white dark:bg-gray-800 rounded-lg shadow\\">\\n        <svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"h-12 w-12 mx-auto mb-4 text-gray-400\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\" stroke=\\"currentColor\\">\\n          <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\\" />\\n        </svg>\\n        <p class=\\"text-lg font-medium\\">{$i18n.t(\'Account Tree Missing\')}</p>\\n        <p class=\\"text-sm mt-1 mb-4\\">{$i18n.t(\'To use the Account Analysis feature, you need to upload an account tree file first.\')}</p>\\n        \\n        <div class=\\"flex justify-center space-x-3\\">\\n          <button \\n            class=\\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition flex items-center\\"\\n            on:click={handleDownloadTemplate}\\n          >\\n            <svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"h-5 w-5 mr-2\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\" stroke=\\"currentColor\\">\\n              <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\\" />\\n            </svg>\\n            {$i18n.t(\'Download Template\')}\\n          </button>\\n          \\n          <label \\n            class=\\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition cursor-pointer flex items-center\\"\\n          >\\n            <svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"h-5 w-5 mr-2\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\" stroke=\\"currentColor\\">\\n              <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\\" />\\n            </svg>\\n            {$i18n.t(\'Upload Account Tree\')}\\n            <input\\n              type=\\"file\\"\\n              class=\\"hidden\\"\\n              accept=\\".xlsx,.xls,.csv\\"\\n              on:change={(e) => {\\n                if (e.target.files && e.target.files.length > 0) {\\n                  const formData = new FormData();\\n                  formData.append(\'file\', e.target.files[0]);\\n                  \\n                  fetch(`${apiBaseUrl}/proxy/api/upload_account_tree`, {\\n                    method: \'POST\',\\n                    headers: {\\n                      \'Authorization\': `Bearer ${apiConfig.userToken}`\\n                    },\\n                    body: formData\\n                  })\\n                  .then(response => response.json())\\n                  .then(result => {\\n                    if (result.success) {\\n                      toast.success($i18n.t(\'Account tree uploaded successfully\'));\\n                      loadAccountTree();\\n                    } else {\\n                      toast.error(result.error || $i18n.t(\'Upload failed\'));\\n                    }\\n                  })\\n                  .catch(error => {\\n                    console.error(\'Error uploading account tree:\', error);\\n                    toast.error($i18n.t(\'Upload failed\'));\\n                  });\\n                }\\n              }}\\n            />\\n          </label>\\n        </div>\\n      </div>\\n    {:else if data}\\n      <div class=\\"mb-6\\">\\n        <div class=\\"controls-section mb-6 p-4 rounded-lg bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-900/50 shadow-sm\\">\\n          <div class=\\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\\">\\n            <div class=\\"flex items-center\\">\\n              <span class=\\"mr-2 text-sm font-medium text-gray-700 dark:text-gray-300\\">{$i18n.t(\'Significance Threshold\')}:</span>\\n              <input\\n                type=\\"number\\"\\n                bind:value={threshold}\\n                min=\\"0\\"\\n                max=\\"100\\"\\n                class=\\"w-16 h-8 px-3 py-1 text-sm border border-blue-200 dark:border-blue-800 rounded-md bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\\"\\n                on:change={handleThresholdChange}\\n              /> <span class=\\"ml-1 text-sm text-gray-700 dark:text-gray-300\\">%</span>\\n            </div>\\n            \\n            <div class=\\"ml-auto\\">\\n              <select\\n                id=\\"monthSelector\\"\\n                bind:value={selectedMonth}\\n                class=\\"h-8 px-3 py-1 min-w-[130px] border border-blue-200 dark:border-blue-800 rounded-md bg-white dark:bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\\"\\n                on:change={handleMonthChange}\\n              >\\n                {#each monthOptions as month}\\n                  <option value={month}>{month}</option>\\n                {/each}\\n              </select>\\n            </div>\\n          </div>\\n        </div>\\n        \\n        <!-- Hidden state to force re-render -->\\n        <div class=\\"hidden\\">{expandedCompaniesState}</div>\\n        \\n        <!-- Companies Display with Loading Overlay -->\\n        <div class=\\"analysis-content rounded-lg border border-blue-200 dark:border-blue-800 overflow-hidden bg-white dark:bg-gray-800 shadow-md shadow-blue-100 dark:shadow-none relative\\" \\n             data-tree-container=\\"true\\"\\n             on:click={handleModalClick}>\\n          <!-- Loading overlay -->\\n          {#if loading}\\n            <div class=\\"absolute inset-0 bg-white/60 dark:bg-gray-900/60 flex items-center justify-center z-10\\">\\n              <div class=\\"flex flex-col items-center\\">\\n                <Spinner className=\\"size-10\\" />\\n                <p class=\\"mt-2 text-gray-600 dark:text-gray-400\\">{$i18n.t(\'Loading...\')}</p>\\n              </div>\\n            </div>\\n          {/if}\\n          \\n          {@html renderTreeStructure()}\\n        </div>\\n      </div>\\n    {:else}\\n      <div class=\\"flex justify-center items-center h-64\\">\\n        <Spinner className=\\"size-8\\" />\\n        <div class=\\"ml-3\\">Loading account data...</div>\\n      </div>\\n    {/if}\\n  {:else if currentView === \'transactions\'}\\n    <!-- Transactions view -->\\n    <div class=\\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow\\">\\n      <div class=\\"flex justify-between items-center mb-6\\">\\n        <div class=\\"flex items-center\\">\\n          <button \\n            class=\\"mr-2 p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\\"\\n            on:click={navigateBack}\\n          >\\n            <svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"h-5 w-5\\" viewBox=\\"0 0 20 20\\" fill=\\"currentColor\\">\\n              <path fill-rule=\\"evenodd\\" d=\\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\\" clip-rule=\\"evenodd\\" />\\n            </svg>\\n          </button>\\n          <h2 class=\\"text-xl font-bold\\">{transactionTitle}</h2>\\n        </div>\\n      </div>\\n      \\n      <!-- Transaction summary -->\\n      <div class=\\"transaction-summary mb-6 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3\\">\\n        {#if transactions.length > 0}\\n          {@const uniqueDocuments = [...new Set(transactions.map(t => t.document))]}\\n          <div class=\\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\\">\\n            <div class=\\"text-xs text-blue-600 dark:text-blue-400\\">{$i18n.t(\'Total Transactions\')}</div>\\n            <div class=\\"text-xl font-bold\\">{uniqueDocuments.length}</div>\\n          </div>\\n          \\n          {@const totalDebit = transactions.reduce((sum, t) => sum + (t.debit || 0), 0)}\\n          <div class=\\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\\">\\n            <div class=\\"text-xs text-green-600 dark:text-green-400\\">{$i18n.t(\'Total Debits\')}</div>\\n            <div class=\\"text-xl font-bold\\">{formatNumber(totalDebit)}</div>\\n          </div>\\n          \\n          {@const totalCredit = transactions.reduce((sum, t) => sum + (t.credit || 0), 0)}\\n          <div class=\\"p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\\">\\n            <div class=\\"text-xs text-red-600 dark:text-red-400\\">{$i18n.t(\'Total Credits\')}</div>\\n            <div class=\\"text-xl font-bold\\">{formatNumber(totalCredit)}</div>\\n          </div>\\n          \\n          <div class=\\"p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg\\">\\n            <div class=\\"text-xs text-purple-600 dark:text-purple-400\\">{$i18n.t(\'Net Amount\')}</div>\\n            <div class=\\"text-xl font-bold\\">{formatNumber(totalDebit - totalCredit)}</div>\\n          </div>\\n        {/if}\\n      </div>\\n      \\n      <div class=\\"overflow-x-auto\\">\\n        <table class=\\"w-full text-sm\\">\\n          <thead class=\\"bg-gray-50 dark:bg-gray-700 text-gray-500 dark:text-gray-300\\">\\n            <tr>\\n              <th class=\\"px-4 py-2 text-left\\">{$i18n.t(\'Date\')}</th>\\n              <th class=\\"px-4 py-2 text-left\\">{$i18n.t(\'Journal Entry\')}</th>\\n              <th class=\\"px-4 py-2 text-left\\">{$i18n.t(\'Account\')}</th>\\n              <th class=\\"px-4 py-2 text-left\\">{$i18n.t(\'Note\')}</th>\\n              <th class=\\"px-4 py-2 text-right\\">{$i18n.t(\'Debit\')}</th>\\n              <th class=\\"px-4 py-2 text-right\\">{$i18n.t(\'Credit\')}</th>\\n              <th class=\\"px-4 py-2 text-center\\">{$i18n.t(\'Flags\')}</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            {#each transactions as transaction}\\n            <tr class=\\"border-t border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800/50\\">\\n              <td class=\\"px-4 py-2\\">{transaction.postingDate}</td>\\n              <td class=\\"px-4 py-2 font-medium\\">{transaction.document}</td>\\n              <td class=\\"px-4 py-2\\">\\n                <div class=\\"font-mono text-xs\\">{transaction.account}</div>\\n                <div>{transaction.accountName}</div>\\n              </td>\\n              <td class=\\"px-4 py-2\\">{transaction.text}</td>\\n              <td class=\\"px-4 py-2 text-right\\">\\n                {#if transaction.debit}\\n                  <span class=\\"font-medium\\">{formatNumber(transaction.debit)}</span>\\n                {/if}\\n              </td>\\n              <td class=\\"px-4 py-2 text-right\\">\\n                {#if transaction.credit}\\n                  <span class=\\"font-medium\\">{formatNumber(transaction.credit)}</span>\\n                {/if}\\n              </td>\\n              <td class=\\"px-4 py-2 text-center\\">\\n                {#if transaction.isRecurring}\\n                  <span class=\\"inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\\">\\n                    {$i18n.t(\'Recurring\')}\\n                  </span>\\n                {/if}\\n                {#if transaction.isUnusual}\\n                  <span class=\\"inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\\">\\n                    {$i18n.t(\'Unusual\')}\\n                  </span>\\n                {/if}\\n                {#if transaction.iqr_flag !== undefined}\\n                  <span class=\\"ml-1\\">{@html renderIqrFlag(transaction.iqr_flag)}</span>\\n                {/if}\\n              </td>\\n            </tr>\\n            {/each}\\n            \\n            {#if transactions.length === 0}\\n            <tr>\\n              <td colspan=\\"7\\" class=\\"px-4 py-8 text-center text-gray-500\\">\\n                {$i18n.t(\'No transactions found for this period\')}\\n              </td>\\n            </tr>\\n            {/if}\\n          </tbody>\\n        </table>\\n      </div>\\n    </div>\\n  {:else if currentView === \'chart\'}\\n    <!-- Chart view -->\\n    <div class=\\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow\\">\\n      <div class=\\"flex justify-between items-center mb-6\\">\\n        <div class=\\"flex items-center\\">\\n          <button \\n            class=\\"mr-2 p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\\"\\n            on:click={navigateBack}\\n          >\\n            <svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"h-5 w-5\\" viewBox=\\"0 0 20 20\\" fill=\\"currentColor\\">\\n              <path fill-rule=\\"evenodd\\" d=\\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\\" clip-rule=\\"evenodd\\" />\\n            </svg>\\n          </button>\\n          <h2 class=\\"text-xl font-bold\\">{chartTitle}</h2>\\n        </div>\\n      </div>\\n      \\n      {#if chartData}\\n        <div class=\\"chart-content\\">\\n          <!-- Timeline visualization - replacing both the chart container and monthly values grid -->\\n          <div class=\\"timeline-section mb-6\\">\\n            {@html renderTimeline()}\\n          </div>\\n          \\n          \\n        </div>\\n      {:else}\\n        <div class=\\"flex justify-center items-center h-64\\">\\n          <Spinner className=\\"size-8\\" />\\n        </div>\\n      {/if}\\n    </div>\\n  {:else if currentView === \'analysis\'}\\n    <!-- Analysis view -->\\n    <div class=\\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow\\">\\n      <div class=\\"flex justify-between items-center mb-4\\">\\n        <div class=\\"flex items-center\\">\\n          <button \\n            class=\\"mr-2 p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\\"\\n            on:click={navigateBack}\\n          >\\n            <svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"h-5 w-5\\" viewBox=\\"0 0 20 20\\" fill=\\"currentColor\\">\\n              <path fill-rule=\\"evenodd\\" d=\\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\\" clip-rule=\\"evenodd\\" />\\n            </svg>\\n          </button>\\n          <h2 class=\\"text-xl font-bold\\">{$i18n.t(\'Edit Analysis\')}</h2>\\n        </div>\\n      </div>\\n      \\n      <div class=\\"mb-4 relative\\">\\n        <textarea\\n          class=\\"w-full h-64 px-3 py-2 text-sm rounded border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800\\"\\n          bind:value={analysisInputText}\\n          placeholder={$i18n.t(\'Enter your analysis here...\')}\\n          disabled={isGeneratingAnalysis}\\n        ></textarea>\\n        \\n        {#if isGeneratingAnalysis}\\n          <div class=\\"absolute inset-0 bg-black/10 flex items-center justify-center\\">\\n            <div class=\\"flex flex-col items-center\\">\\n              <Spinner className=\\"size-8 mb-2\\" />\\n              <div class=\\"text-sm font-medium\\">{$i18n.t(\'Generating analysis...\')}</div>\\n            </div>\\n          </div>\\n        {/if}\\n      </div>\\n      \\n      <div class=\\"flex justify-end space-x-3\\">\\n        <button \\n          class=\\"px-4 py-2 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition\\"\\n          on:click={navigateBack}\\n        >\\n          {$i18n.t(\'Cancel\')}\\n        </button>\\n        <button \\n          class=\\"px-4 py-2 rounded-lg bg-green-600 text-white hover:bg-green-700 transition flex items-center\\"\\n          on:click={async () => {\\n            try {\\n              // Disable button during download (via CSS)\\n              const button = event.currentTarget;\\n              button.classList.add(\'opacity-50\', \'pointer-events-none\');\\n              button.innerHTML = `<svg class=\\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\\" xmlns=\\"http://www.w3.org/2000/svg\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\"><circle class=\\"opacity-25\\" cx=\\"12\\" cy=\\"12\\" r=\\"10\\" stroke=\\"currentColor\\" stroke-width=\\"4\\"></circle><path class=\\"opacity-75\\" fill=\\"currentColor\\" d=\\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\\"></path></svg> ${$i18n.t(\'Downloading...\')}`;\\n              \\n              await downloadWordReport();\\n              \\n              // Re-enable button after download\\n              setTimeout(() => {\\n                button.classList.remove(\'opacity-50\', \'pointer-events-none\');\\n                button.innerHTML = `<svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"h-5 w-5 mr-2\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\" stroke=\\"currentColor\\"><path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\\" /></svg> ${$i18n.t(\'Download Report\')}`;\\n              }, 1000);\\n            } catch (e) {\\n              console.error(\'Error in download button click handler:\', e);\\n              toast.error($i18n.t(\'Download failed: \') + (e.message || \'\'));\\n              \\n              // Re-enable button after error\\n              const button = event.currentTarget;\\n              button.classList.remove(\'opacity-50\', \'pointer-events-none\');\\n              button.innerHTML = `<svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"h-5 w-5 mr-2\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\" stroke=\\"currentColor\\"><path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\\" /></svg> ${$i18n.t(\'Download Report\')}`;\\n            }\\n          }}\\n          disabled={!analysisInputText || isGeneratingAnalysis}\\n        >\\n          <svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"h-5 w-5 mr-2\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\" stroke=\\"currentColor\\">\\n            <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\\" />\\n          </svg>\\n          {$i18n.t(\'Download\')}\\n        </button>\\n        <button \\n          class=\\"px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition\\"\\n          on:click={handleAnalysisSave}\\n          disabled={isGeneratingAnalysis}\\n        >\\n          {$i18n.t(\'Save\')}\\n        </button>\\n      </div>\\n    </div>\\n  {/if}\\n</div>\\n\\n<style>\\n  /* Account row styles */\\n  .account-row:hover {\\n    background-color: rgba(0, 0, 0, 0.05);\\n  }\\n  \\n  .dark .account-row:hover {\\n    background-color: rgba(255, 255, 255, 0.05);\\n  }\\n  \\n  .edit-icon {\\n    opacity: 0.6;\\n    font-size: 0.9em;\\n    cursor: pointer;\\n  }\\n  \\n  .edit-icon:hover {\\n    opacity: 1;\\n  }\\n  \\n  /* Category styling */\\n  .category-section {\\n    margin: 0;\\n    padding: 0;\\n  }\\n  \\n  .category-header {\\n    transition: background-color 0.2s;\\n  }\\n  \\n  .category-content {\\n    display: block;\\n  }\\n  \\n  /* Company styling */\\n  .company-section {\\n    margin-bottom: 8px;\\n  }\\n  \\n  .company-header {\\n    transition: background-color 0.2s;\\n  }\\n  \\n  .company-header:hover {\\n    background-color: rgba(0, 0, 0, 0.05);\\n  }\\n  \\n  .dark .company-header:hover {\\n    background-color: rgba(255, 255, 255, 0.05);\\n  }\\n  \\n  .toggle-icon {\\n    transition: transform 0.2s;\\n  }\\n  \\n  /* Timeline chart styles */\\n  .timeline-bar {\\n    transition: height 0.3s ease, background-color 0.2s;\\n  }\\n  \\n  .timeline-item:hover .timeline-bar {\\n    opacity: 0.8;\\n  }\\n  \\n  /* Page container */\\n  .page-container {\\n    min-height: calc(100vh - 100px);\\n  }\\n  \\n  /* IQR Flag styles */\\n  span[title] {\\n    cursor: help;\\n  }\\n  \\n  span[title*=\\"normal range\\"] {\\n    display: inline-flex;\\n    align-items: center;\\n    font-weight: 500;\\n  }\\n  \\n  /* Enhanced chart styles */\\n  .chart-content {\\n    background: white;\\n    border-radius: 8px;\\n    margin-bottom: 24px;\\n    position: relative;\\n  }\\n  \\n  .chart-container {\\n    position: relative;\\n    transition: all 0.3s ease;\\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\\n  }\\n  \\n  .chart-visualization {\\n    position: relative;\\n    overflow: hidden;\\n  }\\n  \\n  .chart-visualization::before {\\n    content: \'\';\\n    position: absolute;\\n    bottom: 30px;\\n    left: 0;\\n    right: 0;\\n    height: 1px;\\n    background: rgba(0, 0, 0, 0.05);\\n    z-index: 1;\\n  }\\n  \\n  /* Line chart styles */\\n  .chart-point {\\n    z-index: 20;\\n    transition: transform 0.2s ease;\\n  }\\n  \\n  .chart-point:hover {\\n    transform: translate(-50%, -50%) scale(1.3);\\n    z-index: 30;\\n  }\\n  \\n  .chart-point:hover .point-tooltip {\\n    opacity: 1;\\n  }\\n  \\n  .point-outer {\\n    transition: all 0.2s ease;\\n    box-shadow: 0 1px 3px rgba(0,0,0,0.1);\\n  }\\n  \\n  .point-inner {\\n    transition: all 0.2s ease;\\n  }\\n  \\n  /* Analysis popup styles */\\n  .analysis-popup {\\n    position: relative;\\n    z-index: 10;\\n    max-height: 300px;\\n    overflow-y: auto;\\n    transition: all 0.3s ease;\\n    animation: popup-fade-in 0.3s ease;\\n  }\\n  \\n  @keyframes popup-fade-in {\\n    from {\\n      opacity: 0;\\n      transform: translateY(-10px);\\n    }\\n    to {\\n      opacity: 1;\\n      transform: translateY(0);\\n    }\\n  }\\n  \\n  /* Dark mode support */\\n  .dark .chart-visualization::before {\\n    background: rgba(255, 255, 255, 0.05);\\n  }\\n  \\n  .dark .analysis-popup {\\n    background: #1f2937;\\n    color: #e5e7eb;\\n  }\\n  \\n  /* Responsive styles */\\n  @media (max-width: 640px) {\\n    .analysis-popup {\\n      max-height: 200px;\\n    }\\n  }\\n  \\n  /* Add animation styles to the <style> section */\\n  @keyframes fade-in {\\n    from {\\n      opacity: 0;\\n      transform: translateY(-10px);\\n    }\\n    to {\\n      opacity: 1;\\n      transform: translateY(0);\\n    }\\n  }\\n  \\n  .animate-fade-in {\\n    animation: fade-in 0.3s ease forwards;\\n  }\\n  \\n  /* Add spinner animation styles */\\n  @keyframes spin {\\n    0% { transform: rotate(0deg); }\\n    100% { transform: rotate(360deg); }\\n  }\\n  \\n  .spinner {\\n    border: 2px solid rgba(0, 0, 0, 0.1);\\n    border-top-color: #3b82f6;\\n    border-radius: 50%;\\n    width: 1rem;\\n    height: 1rem;\\n    animation: spin 1s linear infinite;\\n  }\\n  \\n  .dark .spinner {\\n    border-color: rgba(255, 255, 255, 0.1);\\n    border-top-color: #60a5fa;\\n  }\\n  \\n  /* Toggle icon styling */\\n  .toggle-icon {\\n    display: inline-flex;\\n    align-items: center;\\n    justify-content: center;\\n    width: 20px;\\n    height: 20px;\\n    line-height: 20px;\\n    font-size: 12px;\\n    color: #3b82f6;\\n    background-color: rgba(59, 130, 246, 0.1);\\n    border-radius: 4px;\\n    transition: all 0.2s ease-in-out;\\n  }\\n  \\n  .dark .toggle-icon {\\n    color: #60a5fa;\\n    background-color: rgba(59, 130, 246, 0.1);\\n  }\\n  \\n  .company-header:hover .toggle-icon,\\n  .category-header:hover .toggle-icon {\\n    color: #2563eb;\\n    background-color: rgba(59, 130, 246, 0.2);\\n    transform: scale(1.1);\\n  }\\n  \\n  /* Make the toggler more clickable */\\n  .company-header .toggle-icon,\\n  .category-header .toggle-icon {\\n    padding: 2px;\\n    margin: 0 4px 0 0;\\n  }\\n  \\n  /* Category content animation */\\n  .category-content {\\n    display: block;\\n    animation: slide-down 0.3s ease-in-out;\\n    transform-origin: top;\\n    overflow: hidden;\\n  }\\n  \\n  /* Company content animation */\\n  .company-content {\\n    animation: slide-down 0.3s ease-in-out;\\n    transform-origin: top;\\n    overflow: hidden;\\n  }\\n  \\n  @keyframes slide-down {\\n    from {\\n      opacity: 0;\\n      transform: scaleY(0.95);\\n    }\\n    to {\\n      opacity: 1;\\n      transform: scaleY(1);\\n    }\\n  }\\n</style> "],"names":[],"mappings":"AA4zEE,8BAAgB,CACd,UAAU,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAChC,CAcA,6BAAe,CACb,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,GAAG,CAClB,aAAa,CAAE,IAAI,CACnB,QAAQ,CAAE,QACZ,CA0DA,WAAW,4BAAc,CACvB,IAAK,CACH,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,WAAW,KAAK,CAC7B,CACA,EAAG,CACD,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,WAAW,CAAC,CACzB,CACF,CAaA,MAAO,YAAY,KAAK,CAAE,CAI1B,CAGA,WAAW,sBAAQ,CACjB,IAAK,CACH,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,WAAW,KAAK,CAC7B,CACA,EAAG,CACD,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,WAAW,CAAC,CACzB,CACF,CAOA,WAAW,mBAAK,CACd,EAAG,CAAE,SAAS,CAAE,OAAO,IAAI,CAAG,CAC9B,IAAK,CAAE,SAAS,CAAE,OAAO,MAAM,CAAG,CACpC,CAiEA,WAAW,yBAAW,CACpB,IAAK,CACH,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,OAAO,IAAI,CACxB,CACA,EAAG,CACD,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,OAAO,CAAC,CACrB,CACF"}'
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $i18n, $$unsubscribe_i18n;
  let $analysisModal, $$unsubscribe_analysisModal;
  let $$unsubscribe_userAPIKey;
  $$unsubscribe_userAPIKey = subscribe(userAPIKey, (value) => value);
  const i18n = getContext("i18n");
  $$unsubscribe_i18n = subscribe(i18n, (value) => $i18n = value);
  const analysisModal = writable({
    isOpen: false,
    title: "",
    content: "",
    isLoading: false,
    company: "",
    account: "",
    isEditing: false,
    editText: ""
  });
  $$unsubscribe_analysisModal = subscribe(analysisModal, (value) => $analysisModal = value);
  let expandedCompanies = {};
  let expandedCategories = {};
  let analysisText = {};
  $$result.css.add(css);
  {
    console.log("expandedCompanies changed:", expandedCompanies);
  }
  {
    console.log("expandedCategories changed:", Object.keys(expandedCategories).length, "categories");
  }
  Date.now().toString();
  {
    if (Object.keys(analysisText).length > 0) {
      console.log("Analysis data updated, refreshing UI");
    }
  }
  $$unsubscribe_i18n();
  $$unsubscribe_analysisModal();
  $$unsubscribe_userAPIKey();
  return ` ${$analysisModal.isOpen ? `<div class="fixed inset-0 z-50 flex items-center justify-center bg-black/60"><div class="w-full max-w-2xl bg-white dark:bg-gray-900 rounded-xl p-6 max-h-[80vh] overflow-auto"><div class="flex justify-between items-center mb-4"><h2 class="text-xl font-bold">${escape($analysisModal.title)}</h2> <button class="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full" data-svelte-h="svelte-1xal31m"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg></button></div> ${$analysisModal.isLoading ? `<div class="flex justify-center items-center py-8">${validate_component(Spinner, "Spinner").$$render($$result, { className: "size-8" }, {}, {})} <p class="ml-3 text-gray-600 dark:text-gray-400">${escape($i18n.t("Generating analysis..."))}</p></div>` : `${$analysisModal.isEditing ? ` <div class="mb-4"><textarea class="w-full h-64 px-3 py-2 text-sm rounded border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800"${add_attribute("placeholder", $i18n.t("Enter your analysis here..."), 0)}>${escape($analysisModal.editText || "")}</textarea></div> <div class="flex justify-end space-x-3"><button class="px-4 py-2 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition">${escape($i18n.t("Cancel"))}</button> <button class="px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition">${escape($i18n.t("Save"))}</button></div>` : ` <div class="analysis-content prose dark:prose-invert max-w-none">${each(($analysisModal.content || "").split(";"), (line) => {
    return `<p class="mb-1"><!-- HTML_TAG_START -->${line}<!-- HTML_TAG_END --></p>`;
  })}</div> <div class="mt-4 flex justify-end space-x-3"><button class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition flex items-center"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg> ${escape($i18n.t("Download Report"))}</button> <button class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition">${escape($i18n.t("Edit Analysis"))}</button></div>`}`}</div></div>` : ``} ${$$result.head += `<!-- HEAD_svelte-ktehck_START -->${$$result.title = `<title>Account Analysis</title>`, ""}<!-- HEAD_svelte-ktehck_END -->`, ""} <div class="page-container w-full max-w-7xl mx-auto px-4 py-6 svelte-126e3bb">${`<div class="flex justify-between items-center mb-6"><button class="cursor-pointer p-[7px] flex rounded-xl hover:bg-gray-100 dark:hover:bg-gray-900 transition" aria-label="Toggle Sidebar" data-svelte-h="svelte-eetc7p"><div class="m-auto self-center"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="size-5"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25H12"></path></svg></div></button> <h1 class="text-2xl font-bold text-blue-800 dark:text-blue-300">${escape($i18n.t("Account Analysis"))}</h1> <div class="flex items-center space-x-2" data-svelte-h="svelte-prv37y"></div></div> ${`${`<div class="text-center py-12 bg-white dark:bg-gray-800 rounded-lg shadow"><svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg> <p class="text-lg font-medium">${escape($i18n.t("Account Tree Missing"))}</p> <p class="text-sm mt-1 mb-4">${escape($i18n.t("To use the Account Analysis feature, you need to upload an account tree file first."))}</p> <div class="flex justify-center space-x-3"><button class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition flex items-center"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg> ${escape($i18n.t("Download Template"))}</button> <label class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition cursor-pointer flex items-center"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path></svg> ${escape($i18n.t("Upload Account Tree"))} <input type="file" class="hidden" accept=".xlsx,.xls,.csv"></label></div></div>`}`}`} </div>`;
});
export {
  Page as default
};
//# sourceMappingURL=_page.svelte.js.map
