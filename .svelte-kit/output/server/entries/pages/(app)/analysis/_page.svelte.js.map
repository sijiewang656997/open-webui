{"version":3,"file":"_page.svelte.js","sources":["../../../../../../../src/routes/(app)/analysis/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { toast } from 'svelte-sonner';\n  import { getContext, onMount } from 'svelte';\n  import Spinner from '$lib/components/common/Spinner.svelte';\n  import { userAPIKey, showSidebar } from '$lib/stores';\n  import { page } from '$app/stores';\n  import { writable } from 'svelte/store';\n  import { downloadWordDocument, createSimpleWordDocument } from '$lib/utils/docUtils';\n  import { createDocxTemplateReport, downloadDocxDocument } from '$lib/utils/docxTemplateUtils';\n  import { WEBUI_BASE_URL } from '$lib/constants';\n  import { getApiConfig } from '$lib/utils/api-config';\n\n  const i18n: any = getContext('i18n');\n  \n  // Create a store for the analysis modal\n  const analysisModal = writable({\n    isOpen: false,\n    title: '',\n    content: '',\n    isLoading: false,\n    company: '',\n    account: '',\n    isEditing: false,\n    editText: ''\n  });\n  \n  function openAnalysisModal(title: string, company: string, account: string): void {\n    analysisModal.update(state => ({\n      ...state,\n      isOpen: true,\n      title,\n      isLoading: true,\n      company,\n      account,\n      isEditing: false,\n      editText: ''\n    }));\n  }\n  \n  function closeAnalysisModal(): void {\n    analysisModal.update(state => ({\n      ...state,\n      isOpen: false\n    }));\n  }\n  \n  function toggleEditMode(): void {\n    analysisModal.update(state => {\n      // When entering edit mode, convert the HTML content back to plain text\n      const editText = state.isEditing ? state.editText : state.content.replace(/<br>/g, '\\n');\n      \n      return {\n        ...state,\n        isEditing: !state.isEditing,\n        editText\n      };\n    });\n  }\n  \n  function saveAnalysisEdit(): void {\n    analysisModal.update(state => {\n      if (!state.isEditing) return state;\n      \n      // Update the content with the edited text\n      const newContent = formatAnalysisText(state.editText);\n      \n      // Save to the analysisText store\n      if (state.company && state.account && selectedMonth) {\n        const monthKey = `${state.company}-${state.account}-${selectedMonth}`;\n        const generalKey = `${state.company}-${state.account}`;\n        \n        analysisText = {\n          ...analysisText,\n          [monthKey]: state.editText,\n          [generalKey]: state.editText\n        };\n        \n        // Also update the backend\n        updateGraphNodeAnalysis(state.company, state.account, state.editText)\n          .then(() => {\n            toast.success($i18n.t('Analysis saved'));\n          })\n          .catch(error => {\n            console.error('Error saving analysis:', error);\n            toast.error($i18n.t('Failed to save analysis'));\n          });\n      }\n      \n      return {\n        ...state,\n        content: newContent,\n        isEditing: false\n      };\n    });\n  }\n  \n  // Initialize apiConfig and language variables\n  let apiConfig = {\n    baseUrl: WEBUI_BASE_URL,\n    userToken: '',\n    languageLocal: 'en'\n  };\n  \n  // API base URL\n  const apiBaseUrl = WEBUI_BASE_URL;\n  \n  // Add type definitions at the top of the script section\n  interface Company {\n    accounts: Record<string, Account>;\n    categories: Category;\n    currentTotal: number;\n    previousTotal: number;\n  }\n\n  interface Account {\n    name: string;\n    currentTotal: number;\n    previousTotal: number;\n    categoryPath?: string[];\n    months?: {\n      previousMonth: string;\n    }[];\n  }\n\n  interface Category {\n    name: string;\n    level: number;\n    currentTotal: number;\n    previousTotal: number;\n    children: Record<string, Category>;\n  }\n\n  interface ChartPoint {\n    month: string;\n    value: number;\n    dateValue: number;\n    originalIndex: number;\n  }\n\n  interface ChartData {\n    company: string;\n    account: string;\n    months: string[];\n    values: number[];\n  }\n\n  // Fix the existing declarations with proper types\n  let loading = false;\n  let data: { companies: Record<string, Company> } | null = null;\n  let accountTree: any = null;\n  let expandedCompanies: Record<string, boolean> = {};\n  let expandedCategories: Record<string, boolean> = {};\n  let selectedMonth: string | null = null;\n  let monthOptions: string[] = [];\n  let threshold = 10;\n  let sortBy = 'date';\n  let sortDirection = 'desc';\n  let analysisText: Record<string, string> = {};\n  \n  // View state management\n  // Values: 'main', 'transactions', 'chart'\n  let currentView: 'main' | 'transactions' | 'chart' | 'analysis' = 'main';\n  \n  // Transaction view state\n  let transactions: any[] = [];\n  let transactionTitle = '';\n  \n  // Chart view state\n  let chartData: ChartData | null = null;\n  let chartTitle = '';\n  \n  // Analysis state\n  let currentAnalysisKey: string | null = null;\n  let analysisInputText = '';\n  let isGeneratingAnalysis = false;\n  \n  // Reactive statements for component state\n  $: console.log('expandedCompanies changed:', expandedCompanies);\n  $: console.log('expandedCategories changed:', Object.keys(expandedCategories).length, 'categories');\n  \n  // Add reactive state to force UI updates\n  $: expandedCompaniesState = Date.now().toString();\n  \n  let expandedInitialized = false;\n  \n  // Initialize expanded state when data changes - only once\n  $: if (data && data.companies && !expandedInitialized) {\n    console.log('Initializing expanded states (one-time)');\n    expandedInitialized = true; // Mark as initialized to prevent re-expanding\n    // Initialize the first company to be expanded by default\n    const firstCompany = Object.keys(data.companies)[0];\n    if (firstCompany) {\n      console.log('Automatically expanding first company:', firstCompany);\n      const newExpandedCompanies = { ...expandedCompanies };\n      newExpandedCompanies[firstCompany] = true;\n      expandedCompanies = newExpandedCompanies;\n    }\n  }\n  \n  // Add a variable to track the last selected month to prevent duplicate requests\n  let lastProcessedEvent: {\n    month: string | null;\n    company: string | null;\n    account: string | null;\n    timestamp: number;\n  } = { \n    month: null, \n    company: null, \n    account: null,\n    timestamp: 0 \n  };\n  \n  // Add a tracking variable for in-progress requests\n  let isProcessingEvent = false;\n  \n  // Add Chart.js initialization in onMount\n  onMount(async () => {\n    console.log('Current user language:', $i18n.language);\n    console.log('Current user API key:', $userAPIKey);\n    \n    // Initialize API config\n    try {\n      apiConfig = await getApiConfig(i18n);\n      console.log('API config initialized:', apiConfig);\n    } catch (error) {\n      console.error('Failed to initialize API config:', error);\n    }\n    \n    console.log('Component mounted, loading account tree...');\n    loadAccountTree();\n    \n    // Handle the custom select-month event from the chart \n    document.addEventListener('select-month', ((event: CustomEvent<{month: string, company: string, account: string}>) => {\n      console.log('Custom select-month event received:', event.detail);\n      \n      // If we're already processing an event, queue this one for later or discard it\n      if (isProcessingEvent) {\n        console.log('Already processing an event, skipping new event');\n        return;\n      }\n      \n      if (event.detail) {\n        const { month, company, account } = event.detail;\n        \n        // Add additional logging\n        console.log('Extracted values from event:', {\n          month,\n          company: company || 'null/undefined',\n          account: account || 'null/undefined',\n          typeofCompany: typeof company,\n          typeofAccount: typeof account\n        });\n        \n        // Prevent duplicate requests by checking if this is the same event as the last one\n        // and it occurred within the last 500ms\n        const now = Date.now();\n        const isSameEvent = (\n          lastProcessedEvent.month === month &&\n          lastProcessedEvent.company === company &&\n          lastProcessedEvent.account === account &&\n          (now - lastProcessedEvent.timestamp) < 500\n        );\n        \n        if (isSameEvent) {\n          console.log('Ignoring duplicate event within debounce period');\n          return;\n        }\n        \n        // Mark that we're processing an event\n        isProcessingEvent = true;\n        \n        // Update last processed event\n        lastProcessedEvent = { month, company, account, timestamp: now };\n        \n        if (month) {\n          console.log('Setting selected month to:', month);\n          selectedMonth = month;\n          \n          // Set isGeneratingAnalysis to true to show loading indicator\n          isGeneratingAnalysis = true;\n          \n          // Use a timeout to ensure UI updates before making API calls\n          setTimeout(async () => {\n            try {\n              // If company and account are provided in the event AND not undefined/null strings\n              if (company && account && company !== 'undefined' && account !== 'undefined') {\n                console.log('Using company/account from event:', company, account);\n                \n                // Create both month-specific and general keys for logging\n                const analysisKey = `${company}-${account}-${month}`;\n                const generalKey = `${company}-${account}`;\n                \n                console.log('Analysis keys to check:', {\n                  analysisKey,\n                  generalKey,\n                  hasMonthSpecificAnalysis: !!analysisText[analysisKey],\n                  hasGeneralAnalysis: !!analysisText[generalKey]\n                });\n                \n                // Always fetch analysis when a month is clicked\n                await fetchAutoAnalysis(company, account);\n              } \n              // Fallback to chartData\n              else if (chartData && chartData.company && chartData.account) {\n                console.log('Using company/account from chartData:', chartData.company, chartData.account);\n                \n                // Create both month-specific and general keys for logging\n                const analysisKey = `${chartData.company}-${chartData.account}-${month}`;\n                const generalKey = `${chartData.company}-${chartData.account}`;\n                \n                console.log('Analysis keys to check:', {\n                  analysisKey,\n                  generalKey,\n                  hasMonthSpecificAnalysis: !!analysisText[analysisKey],\n                  hasGeneralAnalysis: !!analysisText[generalKey]\n                });\n                \n                // Always fetch analysis when a month is clicked\n                await fetchAutoAnalysis(chartData.company, chartData.account);\n              } else {\n                console.error('Cannot fetch analysis: missing company or account information', {\n                  fromEvent: { company, account },\n                  fromChartData: chartData ? { \n                    company: chartData.company, \n                    account: chartData.account \n                  } : 'chartData is null',\n                  chartData: chartData\n                });\n                \n                // Set isGeneratingAnalysis back to false since we can't fetch\n                isGeneratingAnalysis = false;\n              }\n            } finally {\n              // Always mark that we're done processing the event, whether it succeeded or failed\n              console.log('Finished processing select-month event');\n              isProcessingEvent = false;\n            }\n          }, 50);\n        } else {\n          // If no month selected, mark as not processing\n          isProcessingEvent = false;\n        }\n      } else {\n        // If event has no detail, mark as not processing\n        isProcessingEvent = false;\n      }\n    }) as EventListener);\n\n    // Add listener for the month selector to directly update chart\n    setTimeout(() => {\n      const monthSelector = document.getElementById('monthSelector');\n      if (monthSelector) {\n        console.log('Adding event listener to month selector');\n        monthSelector.addEventListener('change', (event) => {\n          if (currentView === 'chart' && chartData) {\n            console.log('Month selector changed, updating chart');\n            // Update the chart after a short delay to ensure the selectedMonth is updated\n            setTimeout(() => initChart(), 50);\n          }\n        });\n      }\n    }, 500);\n\n    // Load Chart.js if needed\n    if (typeof window !== 'undefined' && !window.hasOwnProperty('Chart')) {\n      const script = document.createElement('script');\n      script.src = 'https://cdn.jsdelivr.net/npm/chart.js';\n      script.async = true;\n      document.head.appendChild(script);\n    }\n    \n    // Initialize the chart when data changes\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'attributes' && mutation.attributeName === 'data-ready') {\n          const canvas = document.getElementById('trendChart');\n          if (canvas && canvas.getAttribute('data-ready') === 'true') {\n            initChart();\n          }\n        }\n      });\n    });\n    \n    // Observe when the chart canvas is added to the DOM\n    setTimeout(() => {\n      const canvas = document.getElementById('trendChart');\n      if (canvas) {\n        observer.observe(canvas, { attributes: true });\n        \n        // Initialize immediately if possible\n        if (canvas.getAttribute('data-ready') === 'true') {\n          initChart();\n        }\n      }\n    }, 200);\n  });\n  \n  // Import required functions from the original modal component\n  // Rest of the functions will be added in subsequent edits\n  async function loadAccountTree() {\n    try {\n      loading = true;\n      \n      console.log('=== REQUEST ===');\n      console.log(`URL: ${apiBaseUrl}/proxy/api/account_tree`);\n      console.log('Method: GET');\n      console.log('Headers:', {\n        'Content-Type': 'application/json',\n        'Accept-Language': apiConfig.languageLocal,\n        'Authorization': `Bearer ${apiConfig.userToken}`\n      });\n      console.log('\\n');\n      \n      const response = await fetch(`${apiBaseUrl}/proxy/api/account_tree`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept-Language': apiConfig.languageLocal,\n          'Authorization': `Bearer ${apiConfig.userToken}`\n        }\n      });\n      \n      console.log('=== RESPONSE ===');\n      console.log('Status:', response.status);\n      console.log('Headers:', Object.fromEntries([...response.headers.entries()]));\n      \n      const result = await response.json();\n      console.log('Body:', result);\n      console.log('\\n');\n      \n      if (result.success && result.data) {\n        console.log('Account tree loaded successfully');\n        accountTree = result.data;\n        // Initialize expanded states after getting the tree\n        initializeExpandedStates(accountTree);\n        // After getting the account tree, load the analysis data\n        await fetchData();\n      } else {\n        console.error('Account tree response indicates failure:', result.error || 'Unknown error');\n        accountTree = null;\n      }\n    } catch (error) {\n      console.error('Error loading account tree:', error);\n      toast.error($i18n.t('Failed to load account tree'));\n      accountTree = null;\n    } finally {\n      loading = false;\n    }\n  }\n\n  // Function to initialize expanded states\n  function initializeExpandedStates(tree: any) {\n    if (!tree) return;\n    \n    // Get all root nodes and expand them\n    const rootKeys = Object.keys(tree);\n    \n    // Initialize empty objects for expanded states\n    expandedCompanies = {};\n    expandedCategories = {};\n    \n    if (rootKeys.length > 0) {\n      // Expand all companies\n      rootKeys.forEach(company => {\n        expandedCompanies[company] = true;\n        \n        // Get the top-level nodes from the tree\n        const topLevelNodes = Object.keys(tree);\n        \n        topLevelNodes.forEach(topNodeKey => {\n          const topNode = tree[topNodeKey];\n          \n          // Mark important top categories as expanded\n          if (topNode && typeof topNode === 'object') {\n            // Expand the top-level node\n            const topPath = `${company}/${topNodeKey}`;\n            expandedCategories[topPath] = true;\n            \n            // Always expand key categories like Operating Profit and Operating Costs\n            if (topNode.children) {\n              Object.entries(topNode.children).forEach(([categoryKey, category]) => {\n                const categoryName = category?.name || categoryKey;\n                \n                // Expand important categories automatically\n                const shouldExpand = \n                  categoryName.includes('Operating') || \n                  categoryName.includes('Profit') || \n                  categoryName.includes('Revenue') ||\n                  categoryName.includes('Sales') ||\n                  categoryName.includes('Costs') ||\n                  categoryName.includes('Expenses');\n                \n                if (shouldExpand) {\n                  const categoryPath = `${company}/${topNodeKey}/${categoryKey}`;\n                  expandedCategories[categoryPath] = true;\n                  \n                  console.log(`Auto-expanded category: ${categoryName}, Path: ${categoryPath}`);\n                }\n              });\n            }\n          }\n        });\n      });\n      \n      console.log('Initialized expanded states:', { \n        companies: Object.keys(expandedCompanies),\n        categories: Object.keys(expandedCategories).length\n      });\n    }\n  }\n  \n  // Helper function to check if a node is an account (starts with numbers or has specific account patterns)\n  function isAccountNode(node: any) {\n    if (!node || !node.name) return false;\n    \n    const name = node.name;\n    \n    // Main criteria: Account nodes typically start with numbers\n    if (/^\\d/.test(name)) return true;\n    \n    // Additional check: Account may contain specific account codes in parentheses/brackets\n    if (/\\(A\\d+\\)/.test(name) || /\\[A\\d+\\]/.test(name)) return true;\n    \n    // Check for account list nodes that might have account arrays\n    if (node.accounts && Array.isArray(node.accounts) && node.accounts.length > 0) return true;\n    \n    // Final check: Account may be at leaf level with specific level\n    if (node.level >= 2 && (!node.children || Object.keys(node.children).length === 0)) {\n      // Check if the name contains any account-like terms\n      const accountTerms = ['account', 'acct', 'a/c', '科目', '账户'];\n      return accountTerms.some(term => name.toLowerCase().includes(term));\n    }\n    \n    return false;\n  }\n  \n  async function fetchData() {\n    if (!accountTree) {\n      console.log('fetchData: No account tree available, returning early');\n      return Promise.resolve();\n    }\n    \n    try {\n      const url = selectedMonth \n        ? `${apiBaseUrl}/proxy/api/is_analysis?month=${selectedMonth}`\n        : `${apiBaseUrl}/proxy/api/is_analysis`;\n      \n      console.log('=== REQUEST ===');\n      console.log(`URL: ${url}`);\n      console.log('Method: GET');\n      console.log('Headers:', {\n        'Content-Type': 'application/json',\n        'Accept-Language': apiConfig.languageLocal,\n        'Authorization': `Bearer ${apiConfig.userToken}`\n      });\n      console.log('\\n');\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept-Language': apiConfig.languageLocal,\n          'Authorization': `Bearer ${apiConfig.userToken}`\n        }\n      });\n      \n      console.log('=== RESPONSE ===');\n      console.log('Status:', response.status);\n      console.log('Headers:', Object.fromEntries([...response.headers.entries()]));\n      \n      const result = await response.json();\n      console.log('Body:', result);\n      console.log('\\n');\n      \n      if (result.success && result.data) {\n        console.log('IS analysis data loaded successfully');\n        // Process data according to account tree structure\n        data = processDataWithTree(result.data);\n        monthOptions = result.data.monthOptions || [];\n        if (!selectedMonth) {\n          selectedMonth = result.data.selectedMonth;\n        }\n        console.log('Selected month:', selectedMonth);\n        console.log('Available months:', monthOptions);\n        console.log('Processed data:', data);\n        \n        // Return successful result\n        return Promise.resolve();\n      } else {\n        console.error('IS analysis response indicates failure:', result.error || 'Unknown error');\n        throw new Error(result.error || 'Invalid data structure received');\n      }\n    } catch (error) {\n      console.error('Error loading IS analysis data:', error);\n      toast.error($i18n.t('Failed to load analysis data'));\n      \n      // Return failed promise\n      return Promise.reject(error);\n    }\n  }\n  \n  // Process data according to account tree - same logic as in ISAnalysis.js\n  function processDataWithTree(rawData: any) {\n    if (!accountTree) return { companies: {} };\n    \n    try {\n      const processedData: any = { companies: {} };\n      \n      console.log('Processing data with account tree:', {\n        companiesCount: Object.keys(rawData.companies || {}).length,\n        hasAccountTree: !!accountTree\n      });\n      \n      Object.entries(rawData.companies || {}).forEach(([company, companyData]: [string, any]) => {\n        processedData.companies[company] = {\n          accounts: {},\n          categories: structureAccountTree(getAccountTreeRoot()),\n          currentTotal: 0,\n          previousTotal: 0\n        };\n        \n        console.log('Processing company data:', {\n          company,\n          accountsCount: Object.keys(companyData.accounts || {}).length\n        });\n        \n        // First pass: Find all accounts and add them with their direct category paths\n        Object.entries(companyData.accounts || {}).forEach(([account, accountData]: [string, any]) => {\n          const categoryPath = findAccountCategory(\n            account, \n            accountData.name, \n            getAccountTreeRoot()\n          );\n          \n          console.log('Account category path found:', {\n            account,\n            accountName: accountData.name,\n            categoryPath: categoryPath || 'Not found'\n          });\n          \n          if (categoryPath) {\n            processedData.companies[company].accounts[account] = {\n              ...accountData,\n              categoryPath: categoryPath\n            };\n          } else {\n            console.log('No category path found for account', {\n              account,\n              accountName: accountData.name\n            });\n          }\n        });\n        \n        // Reset all category totals to zero first\n        resetAllCategoryTotals(processedData.companies[company].categories);\n        \n        // Collect account values for updating categories\n        const accountValues: any[] = [];\n        Object.entries(companyData.accounts || {}).forEach(([account, accountData]: [string, any]) => {\n          const categoryPath = findAccountCategory(\n            account, \n            accountData.name, \n            getAccountTreeRoot()\n          );\n          \n          if (categoryPath) {\n            accountValues.push({\n              account,\n              accountName: accountData.name,\n              categoryPath,\n              currentTotal: accountData.currentTotal || 0,\n              previousTotal: accountData.previousTotal || 0\n            });\n          }\n        });\n        \n        // Sort by path length to process leaf nodes first\n        accountValues.sort((a, b) => b.categoryPath.length - a.categoryPath.length);\n        \n        // Update all categories in correct order\n        accountValues.forEach(({account, accountName, categoryPath, currentTotal, previousTotal}) => {\n          updateCategoryTotals(\n            processedData.companies[company].categories,\n            categoryPath,\n            currentTotal,\n            previousTotal\n          );\n        });\n        \n        // Roll up totals for all categories\n        rollUpCategoryTotals(processedData.companies[company].categories);\n      });\n      \n      console.log('Processed data structure:', processedData);\n      return processedData;\n    } catch (error) {\n      console.error('Error processing data with tree:', error);\n      return { companies: {} };\n    }\n  }\n  \n  // Helper function to get the root node of the account tree\n  function getAccountTreeRoot() {\n    if (!accountTree || typeof accountTree !== 'object') {\n      console.error('Invalid account tree structure', { tree: accountTree });\n      return null;\n    }\n    \n    // Get all keys from the tree object\n    const rootKeys = Object.keys(accountTree);\n    if (rootKeys.length === 0) {\n      console.error('Account tree has no root nodes', { tree: accountTree });\n      return null;\n    }\n    \n    // Create a merged root node that preserves the original top-level structure\n    const mergedRootNode = {\n      name: 'Root',\n      level: 0,\n      children: {}\n    };\n    \n    // Instead of merging children, preserve the top-level categories\n    rootKeys.forEach(rootKey => {\n      // Add each top-level node directly as a child of the merged root\n      if (accountTree[rootKey]) {\n        mergedRootNode.children[rootKey] = accountTree[rootKey];\n      }\n    });\n    \n    console.log('Using merged root node for account tree:', { \n      rootKeys,\n      childrenCount: Object.keys(mergedRootNode.children).length,\n      childrenNames: Object.keys(mergedRootNode.children).join(', ')\n    });\n    \n    return mergedRootNode;\n  }\n  \n  // Create a structured tree from the raw account tree\n  function structureAccountTree(node: any): any {\n    if (!node) {\n      console.error('Invalid node provided to structureAccountTree');\n      return {\n        name: 'Unknown',\n        level: 1,\n        currentTotal: 0,\n        previousTotal: 0,\n        children: {}\n      };\n    }\n    \n    const result = {\n      name: node.name || 'Unknown',\n      level: node.level || 1,\n      currentTotal: 0,\n      previousTotal: 0,\n      children: {}\n    };\n    \n    if (node.children) {\n      Object.entries(node.children).forEach(([key, child]) => {\n        result.children[key] = structureAccountTree(child);\n      });\n    }\n    \n    return result;\n  }\n  \n  // Find the category path for a given account\n  function findAccountCategory(account: string, accountName: string, node: any, path: string[] = []): string[] | null {\n    // Handle null/undefined nodes\n    if (!node) return null;\n    \n    // Check if this node's name starts with the account number\n    const nodeName = node.name || '';\n    const nodeAccountParts = nodeName.split(' ');\n    const nodeAccountNumber = nodeAccountParts[0];\n    \n    console.log('Searching for account in tree:', {\n      searchingFor: {\n        account,\n        accountName\n      },\n      currentNode: {\n        nodeName,\n        nodeAccountNumber,\n        level: node.level\n      },\n      currentPath: path\n    });\n    \n    // Direct match: This node represents the exact account we're looking for\n    if (nodeAccountNumber === account || nodeName === account) {\n      // For leaf nodes (actual accounts), return the full path including this node\n      const foundPath = [...path, nodeName];\n      console.log('Found exact account match:', {\n        account,\n        foundPath\n      });\n      return foundPath;\n    }\n    \n    // Check if the node name contains the account number/name\n    if (nodeName.includes(account) || (accountName && nodeName.includes(accountName))) {\n      const foundPath = [...path, nodeName];\n      console.log('Found account number/name in node name:', {\n        account,\n        nodeName,\n        foundPath\n      });\n      return foundPath;\n    }\n    \n    // Check if this node has accounts array with our account\n    if (node.accounts && Array.isArray(node.accounts)) {\n      const hasAccountInArray = node.accounts.some((a: string) => \n        a === account || \n        a.startsWith(account + ' ') || \n        (accountName && a.includes(accountName))\n      );\n      \n      if (hasAccountInArray) {\n        const foundPath = [...path, nodeName];\n        console.log('Found account in accounts array:', {\n          account,\n          foundPath\n        });\n        return foundPath;\n      }\n    }\n    \n    // Check children recursively\n    if (node.children) {\n      for (const [key, child] of Object.entries(node.children)) {\n        // Don't include the current node if at root\n        const newPath = path.length === 0 && node.level === 0 \n          ? []  // If at root, don't add to path\n          : [...path, nodeName];\n          \n        const found = findAccountCategory(account, accountName, child, newPath);\n        if (found) {\n          console.log('Found account in child node:', {\n            account,\n            childKey: key,\n            childLevel: (child as any).level,\n            foundPath: found\n          });\n          return found;\n        }\n      }\n    }\n    \n    return null;\n  }\n  \n  // Helper function to reset all category totals to zero\n  function resetAllCategoryTotals(category) {\n    if (!category) return;\n    \n    // Reset this category's totals\n    category.currentTotal = 0;\n    category.previousTotal = 0;\n    \n    // Reset all children's totals\n    if (category.children) {\n      Object.values(category.children).forEach(child => {\n        resetAllCategoryTotals(child);\n      });\n    }\n  }\n  \n  // Helper function to update category totals\n  function updateCategoryTotals(categories, path, currentAmount, previousAmount) {\n    let current = categories;\n    let multiplier = 1;\n    \n    console.log('Updating category totals:', {\n      path,\n      currentAmount,\n      previousAmount,\n      rootNodeName: categories?.name\n    });\n    \n    // First check if we have a valid path\n    if (!path || path.length === 0) {\n      console.log('Empty path provided to updateCategoryTotals');\n      return;\n    }\n    \n    // Check if the first path element is the root node name, and skip it if so\n    let startIndex = 0;\n    if (path[0] === categories?.name) {\n      console.log('First path element matches root node name, skipping:', {\n        rootNodeName: categories.name,\n        firstPathElement: path[0]\n      });\n      startIndex = 1;\n    }\n    \n    // Apply leaf node update and multipliers\n    for (let i = startIndex; i < path.length; i++) {\n      const category = path[i];\n      \n      // Skip undefined category names\n      if (!category) {\n        console.log('Undefined category in path', { index: i, path });\n        continue;\n      }\n      \n      // Apply multiplier for categories starting with \"-\"\n      if (category.startsWith('-')) {\n        multiplier *= -1;\n        console.log('Negating values for category:', {\n          category,\n          multiplier\n        });\n      }\n      \n      const categoryKey = category.startsWith('-') ? category : category;\n      \n      if (current.children && (current.children[category] || current.children[categoryKey])) {\n        const childCategory = current.children[category] || current.children[categoryKey];\n        \n        // If this is the last item in path, update totals\n        if (i === path.length - 1) {\n          childCategory.currentTotal += currentAmount * multiplier;\n          childCategory.previousTotal += previousAmount * multiplier;\n          \n          console.log('Updated leaf node totals:', {\n            category,\n            newTotals: {\n              currentTotal: childCategory.currentTotal,\n              previousTotal: childCategory.previousTotal\n            },\n            addedAmount: {\n              current: currentAmount * multiplier,\n              previous: previousAmount * multiplier\n            }\n          });\n        }\n        \n        // Move to next node in path\n        current = childCategory;\n      } else {\n        console.log('Category not found in children', { \n          category, \n          pathIndex: i,\n          availableChildren: current.children ? Object.keys(current.children) : 'none'\n        });\n        return; // Exit early if category not found\n      }\n    }\n  }\n  \n  // Helper function to roll up category totals from children to parents\n  function rollUpCategoryTotals(category) {\n    if (!category) {\n      console.log('Null category in rollUpCategoryTotals');\n      return { current: 0, previous: 0 };\n    }\n    \n    // Initialize with the category's current values\n    let currentTotal = 0;\n    let previousTotal = 0;\n    \n    // Handle leaf nodes that have direct values but no children\n    if (!category.children || Object.keys(category.children).length === 0) {\n      currentTotal = category.currentTotal;\n      previousTotal = category.previousTotal;\n      \n      return { current: currentTotal, previous: previousTotal };\n    }\n    \n    // Process all children first (post-order traversal)\n    Object.entries(category.children).forEach(([key, child]) => {\n      const childTotals = rollUpCategoryTotals(child);\n      \n      // Apply multiplier if category name starts with \"-\"\n      const multiplier = key.startsWith('-') || (child.name && child.name.startsWith('-')) ? -1 : 1;\n      \n      // Add child totals to current totals\n      currentTotal += childTotals.current * multiplier;\n      previousTotal += childTotals.previous * multiplier;\n    });\n    \n    // Update this category's totals with the sum of its children\n    category.currentTotal = currentTotal;\n    category.previousTotal = previousTotal;\n    \n    return { current: currentTotal, previous: previousTotal };\n  }\n  \n  function toggleCompany(company) {\n    if (!company) {\n      console.error('Invalid company name in toggleCompany');\n      return;\n    }\n    \n    console.log('Toggling company:', company, 'Current state:', expandedCompanies[company]);\n    \n    // Create a new object to ensure Svelte reactivity\n    const newExpandedCompanies = { ...expandedCompanies };\n    newExpandedCompanies[company] = !expandedCompanies[company];\n    expandedCompanies = newExpandedCompanies;\n    \n    console.log('New expanded state for company:', company, expandedCompanies[company]);\n    \n    // Force UI update by updating a state timestamp\n    expandedCompaniesState = Date.now().toString();\n    \n    // Use the data attribute for a more reliable selector\n    setTimeout(() => {\n      const mainContainer = document.querySelector('[data-tree-container=\"true\"]');\n      if (mainContainer) {\n        // Clear and replace the HTML\n        mainContainer.innerHTML = renderTreeStructure();\n      } else {\n        console.error('Analysis content container not found');\n      }\n    }, 10);\n  }\n  \n  function toggleCategory(categoryPath) {\n    if (!categoryPath || categoryPath === 'Unknown' || categoryPath === 'undefined') {\n      console.error('Invalid category path in toggleCategory:', categoryPath);\n      return;\n    }\n    \n    console.log('Toggling category:', categoryPath, 'Current state:', expandedCategories[categoryPath]);\n    // Create a new object to ensure Svelte reactivity\n    const newExpandedCategories = { ...expandedCategories };\n    // Safely toggle - if undefined, treat as false\n    newExpandedCategories[categoryPath] = !expandedCategories[categoryPath];\n    expandedCategories = newExpandedCategories;\n    console.log('New expanded state for category:', categoryPath, expandedCategories[categoryPath]);\n    \n    // Force UI update with timestamp to ensure it always changes\n    expandedCompaniesState = Date.now().toString();\n    \n    // Use the data attribute for a more reliable selector\n    setTimeout(() => {\n      const mainContainer = document.querySelector('[data-tree-container=\"true\"]');\n      if (mainContainer) {\n        // Clear and replace the HTML\n        mainContainer.innerHTML = renderTreeStructure();\n      } else {\n        console.error('Analysis content container not found');\n      }\n    }, 10);\n  }\n  \n  function handleThresholdChange(event) {\n    const value = event.target.value.replace(/^0+/, '') || '0';\n    threshold = Number(value);\n  }\n  \n  function handleMonthChange(event) {\n    selectedMonth = event.target.value;\n    \n    console.log('Month changed to:', selectedMonth);\n    \n    // Set loading state to true to show loading indicator\n    loading = true;\n    \n    // Fetch new data for the selected month\n    fetchData().then(() => {\n      console.log('Data fetched for new month, updating UI');\n      \n      // Force UI update by updating the state timestamp\n      expandedCompaniesState = Date.now().toString();\n      \n      // If we're in chart view, update the chart with the new month\n      if (currentView === 'chart' && chartData) {\n        console.log('Updating chart with new month:', selectedMonth);\n        setTimeout(() => initChart(), 50);\n      }\n      \n      // Set loading back to false\n      loading = false;\n    });\n  }\n  \n  async function fetchTransactions(company, account, month, isPrevious = false) {\n    try {\n      const url = `${apiBaseUrl}/proxy/api/transactions?company=${encodeURIComponent(company)}&account=${encodeURIComponent(account)}&month=${encodeURIComponent(month)}`;\n      \n      console.log('=== REQUEST ===');\n      console.log(`URL: ${url}`);\n      console.log('Method: GET');\n      console.log('Headers:', {\n        'Content-Type': 'application/json',\n        'Accept-Language': apiConfig.languageLocal,\n        'Authorization': `Bearer ${apiConfig.userToken}`\n      });\n      console.log('\\n');\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept-Language': apiConfig.languageLocal,\n          'Authorization': `Bearer ${apiConfig.userToken}`\n        }\n      });\n      \n      console.log('=== RESPONSE ===');\n      console.log('Status:', response.status);\n      console.log('Headers:', Object.fromEntries([...response.headers.entries()]));\n      \n      const result = await response.json();\n      console.log('Body:', result);\n      console.log('\\n');\n      \n      if (result.success && result.data) {\n        transactions = result.data.transactions;\n        transactionTitle = `${company} - ${account} - ${month} ${isPrevious ? '(Previous)' : '(Current)'}`;\n        currentView = 'transactions';\n      } else {\n        console.error('Transactions response indicates failure:', result.error || 'Unknown error');\n        throw new Error(result.error || 'Failed to load transactions');\n      }\n    } catch (error) {\n      console.error('Error loading transactions:', error);\n      toast.error($i18n.t('Failed to load transactions'));\n    }\n  }\n  \n  async function handleAccountClick(company, account, accountName) {\n    console.log('handleAccountClick called with:', {\n      company,\n      account,\n      accountName\n    });\n    \n    try {\n      const url = `${apiBaseUrl}/proxy/api/account_trend?company=${encodeURIComponent(company)}&account=${encodeURIComponent(account)}`;\n      \n      console.log('=== REQUEST ===');\n      console.log(`URL: ${url}`);\n      console.log('Method: GET');\n      console.log('Headers:', {\n        'Content-Type': 'application/json',\n        'Accept-Language': apiConfig.languageLocal,\n        'Authorization': `Bearer ${apiConfig.userToken}`\n      });\n      console.log('\\n');\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept-Language': apiConfig.languageLocal,\n          'Authorization': `Bearer ${apiConfig.userToken}`\n        }\n      });\n      \n      console.log('=== RESPONSE ===');\n      console.log('Status:', response.status);\n      console.log('Headers:', Object.fromEntries([...response.headers.entries()]));\n      \n      const result = await response.json();\n      console.log('Body:', result);\n      console.log('\\n');\n      \n      if (result.success && result.data) {\n        // Make sure company and account are explicitly set in the chartData\n        chartData = {\n          ...result.data,\n          company: company,\n          account: account\n        };\n        \n        console.log('ChartData set with explicit company/account:', chartData);\n        \n        chartTitle = `${company} - ${account} - ${accountName}`;\n        currentView = 'chart';\n        \n        // Also fetch analysis for this account\n        if (!analysisText[`${company}-${account}`]) {\n          fetchAutoAnalysis(company, account);\n        }\n      } else {\n        console.error('Account trend response indicates failure:', result.error || 'Unknown error');\n        throw new Error(result.error || 'Failed to load trend data');\n      }\n    } catch (error) {\n      console.error('Error loading trend data:', error);\n      toast.error($i18n.t('Failed to load trend data'));\n    }\n  }\n  \n  function handleAnalysisEdit(company, account) {\n    console.log('Handling analysis edit for:', company, account);\n    \n    // Create both month-specific and general keys\n    const monthKey = `${company}-${account}-${selectedMonth}`;\n    const generalKey = `${company}-${account}`;\n    \n    // Prefer month-specific analysis if available, otherwise use general\n    currentAnalysisKey = monthKey;\n    analysisInputText = analysisText[monthKey] || analysisText[generalKey] || '';\n    \n    console.log('Current analysis text:', analysisInputText);\n    currentView = 'analysis';\n    \n    // Auto-fetch analysis if we don't have it yet\n    if (!analysisInputText) {\n      console.log('No existing analysis found, fetching auto analysis');\n      fetchAutoAnalysis(company, account);\n    }\n  }\n  \n  // Add a reactive statement to force the UI to update when analysis data changes\n  $: analysisContentTimestamp = Date.now(); // This will change whenever we reference it\n  \n  // Add reactive statements to force refresh when analysis changes\n  $: if (selectedMonth && chartData) {\n    console.log('Reactive update triggered for analysis UI with selected month:', selectedMonth);\n    analysisContentTimestamp = Date.now();\n    // When in chart view, update the chart to highlight the selected month\n    if (currentView === 'chart') {\n      console.log('Updating chart for new selected month:', selectedMonth);\n      setTimeout(() => initChart(), 50);\n    }\n  }\n  \n  // Add reactive statement to refresh when analysisText object changes\n  $: if (Object.keys(analysisText).length > 0) {\n    console.log('Analysis data updated, refreshing UI');\n    analysisContentTimestamp = Date.now();\n  }\n  \n  // Add reactive statement to refresh when selectedMonth changes\n  $: if (selectedMonth && currentView === 'chart') {\n    console.log('Selected month changed to:', selectedMonth);\n    \n    // Reinitialize chart with the new month after a brief delay\n    setTimeout(() => {\n      if (document.getElementById('trendChart')) {\n        console.log('Re-initializing chart with new month:', selectedMonth);\n        initChart();\n      }\n    }, 50);\n  }\n  \n  // Update the fetchAutoAnalysis function to force a UI refresh\n  async function fetchAutoAnalysis(company, account) {\n    console.log('Fetching auto analysis for:', company, account, 'with selected month:', selectedMonth);\n    \n    // Check for null/undefined or \"undefined\" string values\n    if (!company || !account || company === 'undefined' || account === 'undefined') {\n      console.error('Invalid company or account for auto analysis:', { company, account });\n      toast.error($i18n.t('Missing company or account information'));\n      \n      // Update modal to show error\n      analysisModal.update(state => ({\n        ...state,\n        isLoading: false,\n        content: `<p class=\"text-red-500\">${$i18n.t('Missing company or account information')}</p>`\n      }));\n      \n      return;\n    }\n    \n    if (!selectedMonth) {\n      console.error('Missing selected month for analysis');\n      toast.error($i18n.t('Missing month information'));\n      \n      // Update modal to show error\n      analysisModal.update(state => ({\n        ...state,\n        isLoading: false,\n        content: `<p class=\"text-red-500\">${$i18n.t('Missing month information')}</p>`\n      }));\n      \n      return;\n    }\n    \n    // Check if data is available without showing an error\n    if (!data?.companies?.[company]?.accounts?.[account]) {\n      // Suppress the error message, only log it to console at debug level\n      console.debug('Data for auto analysis not available yet:', { \n        company, \n        account, \n        dataAvailable: !!data,\n        companiesAvailable: data ? Object.keys(data.companies || {}) : [],\n        accountsAvailable: data?.companies?.[company] ? Object.keys(data.companies[company].accounts || {}) : []\n      });\n      \n      // Continue with graceful handling - open modal with loading state\n      const accountName = account; // Fallback to using the account code as the name\n      openAnalysisModal(`${company} - ${account} - ${accountName}`, company, account);\n      \n      // Create a fake account data structure for display\n      const fakeAccountData = {\n        name: accountName,\n        currentTotal: 0,\n        previousTotal: 0,\n        months: [{previousMonth: ''}]\n      };\n      \n      // Use this fake data to proceed with the rest of the analysis\n      try {\n        await proceedWithAnalysis(company, account, fakeAccountData);\n      } catch (error) {\n        // Quietly handle any errors\n        console.debug('Error in analysis with fallback data:', error);\n        analysisModal.update(state => ({\n          ...state,\n          isLoading: false,\n          content: `<p>${$i18n.t('Analysis data not available for this account yet. Please try again later.')}</p>`\n        }));\n      }\n      \n      return;\n    }\n    \n    // Open the modal if not already open\n    const accountData = data.companies[company].accounts[account];\n    openAnalysisModal(`${company} - ${account} - ${accountData.name}`, company, account);\n    \n    await proceedWithAnalysis(company, account, accountData);\n  }\n  \n  // Helper function to proceed with analysis once we have account data\n  async function proceedWithAnalysis(company, account, accountData) {\n    // Add a timeout to prevent UI from being stuck indefinitely\n    const timeout = setTimeout(() => {\n      analysisModal.update(state => {\n        if (state.isLoading) {\n          console.log('Analysis request timed out after 15 seconds');\n          toast.error($i18n.t('Analysis request timed out. Please try again.'));\n          return {\n            ...state,\n            isLoading: false,\n            content: `<p class=\"text-red-500\">${$i18n.t('Analysis request timed out. Please try again.')}</p>`\n          };\n        }\n        return state;\n      });\n    }, 15000); // 15 second timeout\n    \n    try {\n      console.log('Account data for analysis:', accountData);\n      \n      const requestData = {\n        company,\n        account,\n        accountName: accountData.name,\n        currentMonth: selectedMonth,\n        previousMonth: accountData.months?.[0]?.previousMonth,\n        changePercentage: ((accountData.currentTotal - accountData.previousTotal) / \n          Math.abs(accountData.previousTotal || 1)) * 100 // Use 1 as fallback to avoid division by zero\n      };\n      \n      console.log('Auto analysis request data:', requestData);\n      \n      // Use AbortController to allow for request timeout\n      const controller = new AbortController();\n      const abortTimeout = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n      \n      let response;\n      let result;\n      \n      try {\n        response = await fetch(`${apiBaseUrl}/proxy/api/auto_analysis`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept-Language': apiConfig.languageLocal,\n            'Authorization': `Bearer ${apiConfig.userToken}`\n          },\n          body: JSON.stringify(requestData),\n          signal: controller.signal\n        });\n        \n        clearTimeout(abortTimeout);\n        \n        console.log('Auto analysis response status:', response.status);\n        \n        if (!response.ok) {\n          throw new Error(`Server responded with ${response.status}: ${response.statusText}`);\n        }\n        \n        result = await response.json();\n        console.log('Auto analysis response data:', result);\n      } catch (fetchError) {\n        // Handle AbortController timeout specifically\n        if (fetchError.name === 'AbortError') {\n          console.error('Analysis request aborted due to timeout');\n          toast.error($i18n.t('Analysis request timed out'));\n          \n          // Update modal with error message\n          analysisModal.update(state => ({\n            ...state,\n            isLoading: false,\n            content: `<p class=\"text-red-500\">${$i18n.t('Analysis request timed out')}</p>`\n          }));\n        } else {\n          console.error('Error during fetch:', fetchError);\n          toast.error($i18n.t('Error communicating with server'));\n          \n          // Update modal with error message\n          analysisModal.update(state => ({\n            ...state,\n            isLoading: false,\n            content: `<p class=\"text-red-500\">${$i18n.t('Error communicating with server')}</p>`\n          }));\n        }\n        \n        // Clear timeout since we've already handled the error\n        clearTimeout(timeout);\n        return; // Exit the function here after handling the fetch error\n      }\n      \n      // If we have a successful result, process it\n      if (result && result.success) {\n        console.log('Auto analysis generated successfully');\n        \n        // Make sure the analysis is a string\n        const analysisContent = typeof result.analysis === 'string' \n          ? result.analysis \n          : String(result.analysis || '');\n        \n        // Always include the month in the key\n        const analysisKey = `${company}-${account}-${selectedMonth}`;\n        \n        // Store analysis with the month-specific key\n        analysisText = {\n          ...analysisText,\n          [analysisKey]: analysisContent,\n          // Also store in the general format for backward compatibility\n          [`${company}-${account}`]: analysisContent\n        };\n        \n        console.log('Analysis stored with keys:', {\n          monthSpecificKey: analysisKey,\n          generalKey: `${company}-${account}`\n        });\n        \n        // Update modal with analysis content\n        analysisModal.update(state => ({\n          ...state,\n          isLoading: false,\n          content: formatAnalysisText(analysisContent),\n          editText: analysisContent  // Also set the editText field for easier editing\n        }));\n        \n        // Update other values for consistency\n        analysisInputText = analysisContent;\n        currentAnalysisKey = analysisKey;\n      } else {\n        console.error('Auto analysis response indicates failure:', result?.error || 'Unknown error');\n        toast.error($i18n.t('Failed to generate analysis'));\n        \n        // Update modal with error message\n        analysisModal.update(state => ({\n          ...state,\n          isLoading: false,\n          content: `<p class=\"text-red-500\">${$i18n.t('Failed to generate analysis')}</p>`\n        }));\n        \n        // Try to fetch existing analysis\n        const analysisKey = `${company}-${account}-${selectedMonth}`;\n        const generalKey = `${company}-${account}`;\n        analysisInputText = analysisText[analysisKey] || analysisText[generalKey] || '';\n        currentAnalysisKey = analysisKey;\n      }\n    } catch (error) {\n      console.error('Error generating analysis:', error);\n      toast.error($i18n.t('Error generating analysis'));\n      \n      // Update modal with error message\n      analysisModal.update(state => ({\n        ...state,\n        isLoading: false,\n        content: `<p class=\"text-red-500\">${$i18n.t('Error generating analysis')}</p>`\n      }));\n      \n      // Try to fetch existing analysis\n      const analysisKey = `${company}-${account}-${selectedMonth}`;\n      const generalKey = `${company}-${account}`;\n      analysisInputText = analysisText[analysisKey] || analysisText[generalKey] || '';\n      currentAnalysisKey = analysisKey;\n    } finally {\n      // Clear the timeout\n      clearTimeout(timeout);\n    }\n  }\n  \n  async function handleAnalysisSave() {\n    if (!currentAnalysisKey) return;\n    \n    // Extract company and account from the key\n    // The key format could be either \"company-account\" or \"company-account-month\"\n    const parts = currentAnalysisKey.split('-');\n    const company = parts[0];\n    const account = parts[1];\n    const month = parts.length > 2 ? parts.slice(2).join('-') : selectedMonth;\n    \n    try {\n      // Create both month-specific and general keys\n      const monthKey = `${company}-${account}-${month}`;\n      const generalKey = `${company}-${account}`;\n      \n      // Store the analysis in our local state with both keys\n      analysisText = {\n        ...analysisText,\n        [monthKey]: analysisInputText,\n        [generalKey]: analysisInputText\n      };\n      \n      // Update in the backend\n      await updateGraphNodeAnalysis(company, account, analysisInputText);\n      \n      currentView = 'main';\n      toast.success($i18n.t('Analysis saved'));\n    } catch (error) {\n      console.error('Error saving analysis:', error);\n      toast.error($i18n.t('Failed to save analysis'));\n    }\n  }\n  \n  async function updateGraphNodeAnalysis(company, account, analysisText) {\n    try {\n      const accountData = data.companies[company].accounts[account];\n      \n      const response = await fetch(`${apiBaseUrl}/proxy/api/update_graph_analysis`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept-Language': apiConfig.languageLocal,\n          'Authorization': `Bearer ${apiConfig.userToken}`\n        },\n        body: JSON.stringify({\n          company,\n          account,\n          accountName: accountData.name,\n          currentMonth: selectedMonth,\n          llm_analysis: analysisText\n        })\n      });\n      \n      const result = await response.json();\n      \n      if (!result.success) {\n        throw new Error(result.error || 'Failed to update graph analysis');\n      }\n    } catch (error) {\n      console.error('Error updating graph node analysis:', error);\n      throw error;\n    }\n  }\n  \n  async function handleDownloadTemplate() {\n    try {\n      const response = await fetch(`${apiBaseUrl}/proxy/api/download_account_tree_template`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept-Language': apiConfig.languageLocal,\n          'Authorization': `Bearer ${apiConfig.userToken}`\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to download template');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = 'account_tree_template.xlsx';\n      document.body.appendChild(a);\n      a.click();\n      \n      // Clean up\n      setTimeout(() => {\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      }, 100);\n      \n      toast.success($i18n.t('Template downloaded'));\n    } catch (error) {\n      console.error('Error downloading template:', error);\n      toast.error($i18n.t('Failed to download template'));\n    }\n  }\n  \n  function formatNumber(num) {\n    if (num === null || num === undefined) return '-';\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(num);\n  }\n  \n  function formatPercentage(num) {\n    if (num === null || num === undefined) return '-';\n    return `${num > 0 ? '+' : ''}${num.toFixed(1)}%`;\n  }\n  \n  function isSignificantChange(percentageChange) {\n    if (!percentageChange) return false;\n    return Math.abs(percentageChange) >= threshold;\n  }\n  \n  function renderIqrFlag(iqrFlag) {\n    if (iqrFlag === 1) return `<span title=\"${$i18n.t('Above normal range')}\">🚩 +</span>`;\n    if (iqrFlag === -1) return `<span title=\"${$i18n.t('Below normal range')}\">🚩 -</span>`;\n    if (iqrFlag === 0) return `<span title=\"${$i18n.t('Within normal range')}\">═</span>`;\n    return '-';\n  }\n  \n  function renderTableHeader() {\n    return `\n      <div class=\"table-header w-full grid grid-cols-5 text-sm font-semibold py-2 px-3 bg-blue-100 dark:bg-blue-900/30 border-b border-blue-200 dark:border-blue-900/50 rounded-t-lg\">\n        <div class=\"col-span-1\">${$i18n.t('Account')}</div>\n        <div class=\"text-right pr-4\">${$i18n.t('Current')}</div>\n        <div class=\"text-right pr-4\">${$i18n.t('Previous')}</div>\n        <div class=\"text-right pr-4\">${$i18n.t('Variance')}</div>\n        <div class=\"text-right pr-4\">${$i18n.t('Change %')}</div>\n      </div>\n    `;\n  }\n  \n  function renderAccount(company, account, accountName, accountData) {\n    const changePercentage = accountData.previousTotal !== 0 \n      ? ((accountData.currentTotal - accountData.previousTotal) / Math.abs(accountData.previousTotal)) * 100 \n      : 0;\n    \n    const significant = isSignificantChange(changePercentage);\n    \n    return `\n      <div class=\"account-row w-full grid grid-cols-5 text-sm py-2 px-3 border-b border-blue-100 dark:border-blue-900/20 hover:bg-blue-50 dark:hover:bg-blue-900/10 ${significant ? 'bg-yellow-50 dark:bg-yellow-900/10' : ''}\">\n        <div class=\"flex items-center\" style=\"padding-left: 16px;\">\n          <span class=\"font-mono text-xs mr-2 text-gray-500 dark:text-gray-400\">${account}</span>\n          <span class=\"cursor-pointer hover:text-blue-600 dark:hover:text-blue-400\" \n             data-action=\"account-click\" \n             data-company=\"${company}\" \n             data-account=\"${account}\" \n             data-name=\"${accountName}\">\n            ${accountName}\n          </span>\n        </div>\n        <div class=\"text-right pr-4 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400\" \n           data-action=\"transactions\" \n           data-company=\"${company}\" \n           data-account=\"${account}\" \n           data-month=\"${selectedMonth}\">\n          ${formatNumber(accountData.currentTotal)}\n        </div>\n        <div class=\"text-right pr-4 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400\" \n           data-action=\"transactions-prev\" \n           data-company=\"${company}\" \n           data-account=\"${account}\" \n           data-month=\"${accountData.months?.[0]?.previousMonth || ''}\">\n          ${formatNumber(accountData.previousTotal)}\n        </div>\n        <div class=\"text-right pr-4\">\n          ${formatNumber(accountData.currentTotal - accountData.previousTotal)}\n        </div>\n        <div class=\"text-right pr-4 ${significant ? 'text-red-600 dark:text-red-400 font-semibold' : ''}\">\n          ${formatPercentage(changePercentage)}\n          <i class=\"edit-icon ml-2 cursor-pointer\" \n             data-action=\"show-analysis\" \n             data-company=\"${company}\" \n             data-account=\"${account}\"\n             data-name=\"${accountName}\"\n             title=\"${$i18n.t('View Analysis')}\">\n            🔍\n          </i>\n        </div>\n      </div>\n    `;\n  }\n  \n  function renderCategoriesFromData(companyKey, category, level, path) {\n    if (!category) return '';\n    \n    let html = '';\n    const categoryName = category.name || '';\n    \n    if (!categoryName) {\n      console.error('Category has no name:', category);\n      return '';\n    }\n    \n    // Handle special root node case - render each top-level category properly\n    if (level === 0 && categoryName === 'Root') {\n      console.log('Rendering root node children as categories:', categoryName);\n      \n      // For the merged root node, render each top-level category with proper structure\n      if (category.children) {\n        // Sort children to maintain consistent order\n        const sortedChildren = Object.entries(category.children).sort((a, b) => {\n          const aName = a[1].name || a[0];\n          const bName = b[1].name || b[0];\n          \n          // Special case for \"Operating Profit\" or \"- Operating Costs\" to appear in order\n          if (aName.includes('Operating Profit') || aName.includes('Profit')) return -1;\n          if (bName.includes('Operating Profit') || bName.includes('Profit')) return 1;\n          if (aName.includes('Operating Costs') || aName.includes('Costs')) return 1;\n          if (bName.includes('Operating Costs') || bName.includes('Costs')) return -1;\n          \n          return String(aName).localeCompare(String(bName));\n        });\n        \n        // Render each top-level category as a normal category, not bypassing them\n        sortedChildren.forEach(([childKey, childNode]) => {\n          console.log(`Rendering top-level category: ${childKey}`);\n          html += renderCategoriesFromData(companyKey, childNode, level + 1, [...path, categoryName]);\n        });\n      }\n      \n      return html;\n    }\n    \n    // Original case for profit/loss nodes - bypass them\n    if (level !== 0 && (categoryName === '利润' || categoryName.toLowerCase() === 'profit')) {\n      console.log('Bypassing profit/loss node:', categoryName);\n      \n      // Directly render its children\n      if (category.children) {\n        Object.entries(category.children).forEach(([childKey, childNode]) => {\n          html += renderCategoriesFromData(companyKey, childNode, level + 1, [...path, categoryName]);\n        });\n      }\n      \n      return html;\n    }\n    \n    // Check if this is an account (starts with a number)\n    if (isAccountNode(category)) {\n      console.log('Rendering account node:', categoryName);\n      const accountCode = categoryName.split(' ')[0];\n      const accountName = categoryName.substring(accountCode.length + 1).trim();\n      \n      // Get account data from data structure\n      const accountData = data?.companies?.[companyKey]?.accounts?.[accountCode] || {\n        currentTotal: category.currentTotal || 0,\n        previousTotal: category.previousTotal || 0\n      };\n      \n      return renderAccount(companyKey, accountCode, accountName, accountData);\n    }\n    \n    // It's a category, not an account\n    const categoryPath = [...path, categoryName].join('/');\n    const isExpanded = !!expandedCategories[categoryPath];\n    \n    // Handle negative categories (starting with '-')\n    const displayName = categoryName.startsWith('-') ? categoryName.substring(1) : categoryName;\n    \n    console.log(`Rendering category: ${categoryName}, Path: ${categoryPath}, Level: ${level}`);\n    \n    // Calculate percentages\n    const currentTotal = category.currentTotal || 0;\n    const previousTotal = category.previousTotal || 0;\n    const changePercentage = (previousTotal !== 0 && previousTotal != null)\n      ? ((currentTotal - previousTotal) / Math.abs(previousTotal)) * 100 \n      : 0;\n    \n    html += `\n      <div class=\"category-section\">\n        <div \n          class=\"category-header w-full grid grid-cols-5 text-sm py-2 px-3 \n          ${level > 0 ? 'bg-blue-50/70 dark:bg-blue-900/20' : 'bg-blue-100 dark:bg-blue-900/30'} \n          cursor-pointer hover:bg-blue-100 dark:hover:bg-blue-900/40 border-b border-blue-200 dark:border-blue-900/30\"\n          data-action=\"toggle-category\" \n          data-path=\"${categoryPath}\"\n          style=\"padding-left: ${(level * 20) + 12}px\">\n          <div class=\"flex items-center\">\n            <div class=\"toggle-icon mr-2 text-blue-600 dark:text-blue-400\">${isExpanded ? '▼' : '▶'}</div>\n            <div class=\"font-medium text-blue-800 dark:text-blue-300\">${displayName}</div>\n          </div>\n          <div class=\"text-right pr-4\">${formatNumber(currentTotal)}</div>\n          <div class=\"text-right pr-4\">${formatNumber(previousTotal)}</div>\n          <div class=\"text-right pr-4\">${formatNumber(currentTotal - previousTotal)}</div>\n          <div class=\"text-right pr-4 ${isSignificantChange(changePercentage) ? 'text-red-600 dark:text-red-400 font-semibold' : ''}\">\n            ${formatPercentage(changePercentage)}\n          </div>\n        </div>\n    `;\n    \n    // Render children if expanded\n    if (isExpanded && category.children) {\n      html += `<div class=\"category-content\">`;\n      \n      try {\n        // Sort children - categories first, then accounts\n        const sortedChildren = Object.entries(category.children).sort((a, b) => {\n          const aIsAccount = isAccountNode(a[1]);\n          const bIsAccount = isAccountNode(b[1]);\n          \n          if (aIsAccount && !bIsAccount) return 1;  // Accounts come after categories\n          if (!aIsAccount && bIsAccount) return -1; // Categories come before accounts\n          \n          const aName = a[1].name || a[0];\n          const bName = b[1].name || b[0];\n          return String(aName).localeCompare(String(bName));\n        });\n        \n        // Render each child\n        sortedChildren.forEach(([childKey, childNode]) => {\n          if (!childNode) return;\n          html += renderCategoriesFromData(companyKey, childNode, level + 1, [...path, categoryName]);\n        });\n      } catch (error) {\n        console.error('Error rendering category children:', error);\n        html += `<div class=\"error p-2 text-red-500\">Error rendering children: ${error.message || 'Unknown error'}</div>`;\n      }\n      \n      html += `</div>`;\n    }\n    \n    html += `</div>`;\n    return html;\n  }\n  \n  function renderCompany(companyKey, companyData) {\n    if (!companyData) {\n      console.error('Invalid company data:', companyKey);\n      return '';\n    }\n    \n    console.log('Rendering company:', companyKey, companyData);\n    \n    const isExpanded = !!expandedCompanies[companyKey];\n    \n    let html = `\n      <div class=\"company-section mb-4\">\n        <div class=\"company-header flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-900/50 rounded-t-lg cursor-pointer transition duration-150 hover:bg-blue-100 dark:hover:bg-blue-900/50\"\n             data-action=\"toggle-company\" \n             data-company=\"${companyKey}\">\n          <div class=\"flex items-center\">\n            <div class=\"toggle-icon mr-2 text-blue-600 dark:text-blue-400\">${isExpanded ? '▼' : '▶'}</div>\n            <div class=\"font-bold text-blue-800 dark:text-blue-300\">${companyKey}</div>\n          </div>\n        </div>\n    `;\n    \n    if (isExpanded) {\n      html += `\n        <div class=\"company-content\">\n          <div class=\"company-data border border-blue-200 dark:border-blue-900/50 rounded-b-lg bg-white dark:bg-gray-800\">\n            ${renderTableHeader()}\n    `;\n    \n    // Render the categories from the processed data structure\n    if (companyData.categories) {\n      html += renderCategoriesFromData(companyKey, companyData.categories, 0, []);\n    }\n    \n    html += `\n        </div>\n      </div>\n    `;\n    }\n    \n    html += `</div>`;\n    return html;\n  }\n  \n  function renderTreeStructure() {\n    if (!accountTree || !data) {\n      console.log('Cannot render tree: missing accountTree or data');\n      return '';\n    }\n    \n    let html = '';\n    console.log('Rendering tree structure with data:', data);\n    \n    // Render each company from the data (not from accountTree)\n    Object.entries(data.companies || {}).forEach(([companyKey, companyData]) => {\n      html += renderCompany(companyKey, companyData);\n    });\n    \n    return html;\n  }\n  \n  function handleModalClick(e) {\n    const target = e.target;\n    \n    // Check if click was on an action element\n    const actionElement = target.closest('[data-action]');\n    if (!actionElement) return;\n    \n    const action = actionElement.dataset.action;\n    console.log('Modal action clicked:', action, actionElement.dataset);\n    \n    switch (action) {\n      case 'toggle-company':\n        const company = actionElement.dataset.company;\n        if (!company) {\n          console.error('No company key provided in toggle-company action');\n          return;\n        }\n        console.log('Toggle company clicked for:', company);\n        // Use the dedicated toggle function instead of updating state directly\n        toggleCompany(company);\n        break;\n        \n      case 'toggle-category':\n        const path = actionElement.dataset.path;\n        if (!path) {\n          console.error('No path provided in toggle-category action');\n          return;\n        }\n        console.log('Toggle category path:', path);\n        // Use the dedicated toggle function instead of updating state directly\n        toggleCategory(path);\n        break;\n      \n      case 'select-month':\n        const month = actionElement.dataset.month;\n        if (month && chartData) {\n          console.log('Month selected:', month);\n          selectedMonth = month;\n          // Trigger analysis fetch for the selected month if we don't have it yet\n          const analysisKey = `${chartData.company}-${chartData.account}-${month}`;\n          const generalKey = `${chartData.company}-${chartData.account}`;\n          if (!analysisText[analysisKey] && !analysisText[generalKey]) {\n            fetchAutoAnalysis(chartData.company, chartData.account);\n          }\n        }\n        break;\n\n      case 'close-popup':\n        // Just remove the selected month to close the popup\n        selectedMonth = null;\n        break;\n        \n      case 'account-click':\n        const clickCompany = actionElement.dataset.company;\n        const clickAccount = actionElement.dataset.account;\n        const clickName = actionElement.dataset.name;\n        \n        console.log('Account click action with data:', {\n          company: clickCompany,\n          account: clickAccount,\n          name: clickName\n        });\n        \n        if (!clickCompany || !clickAccount) {\n          console.error('Missing company or account data for account-click action');\n          return;\n        }\n        \n        handleAccountClick(clickCompany, clickAccount, clickName);\n        break;\n        \n      case 'transactions':\n        const txCompany = actionElement.dataset.company;\n        const txAccount = actionElement.dataset.account;\n        const txMonth = actionElement.dataset.month;\n        fetchTransactions(txCompany, txAccount, txMonth);\n        break;\n        \n      case 'transactions-prev':\n        const txPrevCompany = actionElement.dataset.company;\n        const txPrevAccount = actionElement.dataset.account;\n        let txPrevMonth = actionElement.dataset.month;\n        \n        // If no previous month is specified, calculate it as current month - 1\n        if (!txPrevMonth) {\n          if (selectedMonth) {\n            // Assuming month format is YYYY-MM\n            const [year, month] = selectedMonth.split('-').map(Number);\n            \n            // Calculate previous month\n            let prevMonth = month - 1;\n            let prevYear = year;\n            \n            // Handle January case (go to previous year December)\n            if (prevMonth === 0) {\n              prevMonth = 12;\n              prevYear--;\n            }\n            \n            // Format with leading zeros\n            txPrevMonth = `${prevYear}-${prevMonth.toString().padStart(2, '0')}`;\n            console.log('Calculated previous month:', txPrevMonth);\n          } else {\n            // Fallback, use current month\n            txPrevMonth = selectedMonth;\n          }\n        }\n        \n        if (txPrevMonth) {\n          fetchTransactions(txPrevCompany, txPrevAccount, txPrevMonth, true);\n        }\n        break;\n        \n      case 'show-analysis':\n        const analysisCompany = actionElement.dataset.company;\n        const analysisAccount = actionElement.dataset.account;\n        const analysisName = actionElement.dataset.name;\n        \n        console.log('Show analysis for:', analysisCompany, analysisAccount, analysisName);\n        \n        // Create a title with company, account, and name\n        const title = `${analysisCompany} - ${analysisAccount} - ${analysisName}`;\n        \n        // First check if we already have analysis for this account\n        const monthKey = `${analysisCompany}-${analysisAccount}-${selectedMonth}`;\n        const generalKey = `${analysisCompany}-${analysisAccount}`;\n        \n        if (analysisText[monthKey] || analysisText[generalKey]) {\n          // We already have analysis, just show the modal with existing content\n          const content = formatAnalysisText(analysisText[monthKey] || analysisText[generalKey]);\n          const rawText = analysisText[monthKey] || analysisText[generalKey] || '';\n          \n          analysisModal.update(state => ({\n            ...state,\n            isOpen: true,\n            title,\n            content,\n            isLoading: false,\n            company: analysisCompany || '',\n            account: analysisAccount || '',\n            isEditing: false,\n            editText: rawText\n          }));\n        } else {\n          // No existing analysis, fetch it\n          fetchAutoAnalysis(analysisCompany, analysisAccount);\n        }\n        break;\n        \n      case 'generate-analysis':\n        const genCompany = actionElement.dataset.company;\n        const genAccount = actionElement.dataset.account;\n        const genMonth = actionElement.dataset.month;\n        \n        // Set the current analysis key\n        currentAnalysisKey = `${genCompany}-${genAccount}-${genMonth}`;\n        \n        // Fetch auto analysis\n        fetchAutoAnalysis(genCompany, genAccount);\n        break;\n    }\n  }\n  \n  function navigateBack() {\n    console.log('Navigating back from view:', currentView);\n    currentView = 'main';\n  }\n  \n  // Create a function to initialize the chart when needed\n  function initChart() {\n    // Make sure we're in the browser\n    if (typeof window === 'undefined') return;\n    \n    const chartElement = document.getElementById('trendChart');\n    if (!chartElement || !chartData) return;\n    \n    // Get company and account from data attributes\n    const company = chartElement.getAttribute('data-company');\n    const account = chartElement.getAttribute('data-account');\n    \n    console.log('Chart initialization with data attributes:', {\n      company,\n      account,\n      hasChartData: !!chartData,\n      dataReady: chartElement.getAttribute('data-ready'),\n      selectedMonth\n    });\n\n    // @ts-ignore - Chart.js is loaded dynamically\n    if (typeof Chart === 'undefined') {\n      console.log('Chart.js not loaded yet, trying again in 100ms');\n      setTimeout(initChart, 100);\n      return;\n    }\n    \n    try {\n      const ctx = chartElement.getContext('2d');\n      if (!ctx) return;\n\n      // If we already have a chart instance, destroy it first\n      // @ts-ignore\n      if (window.trendChartInstance) {\n        console.log('Destroying previous chart instance');\n        // @ts-ignore\n        window.trendChartInstance.destroy();\n      }\n\n      // Sort data chronologically\n      const dataPoints = chartData.months.map((month, index) => ({\n        month,\n        value: chartData.values[index] || 0,\n        dateValue: month.split('-').map(Number).reduce((y, m) => y * 100 + m, 0),\n        originalIndex: index // Store original index for reference\n      })).sort((a, b) => a.dateValue - b.dateValue);\n\n      const labels = dataPoints.map(p => p.month);\n      const values = dataPoints.map(p => p.value);\n\n      // Generate point colors - purple for the selected month, blue for others with analysis\n      const pointColors = labels.map((month, i) => {\n        // Make the selected month purple and larger\n        if (selectedMonth === month) return '#8b5cf6';\n        \n        // Make the last point blue if no month is selected\n        if (!selectedMonth && i === labels.length - 1) return '#3b82f6';\n        \n        // Check if analysis exists for this month\n        const monthKey = `${chartData.company}-${chartData.account}-${month}`;\n        const generalKey = `${chartData.company}-${chartData.account}`;\n        const hasAnalysis = analysisText[monthKey] || analysisText[generalKey];\n\n        return hasAnalysis ? '#60a5fa' : '#94a3b8';\n      });\n      \n      // Create gradient for the line\n      const gradient = ctx.createLinearGradient(0, 0, 800, 0);\n      gradient.addColorStop(0, 'rgba(59, 130, 246, 0.8)');  // Blue\n      gradient.addColorStop(1, 'rgba(139, 92, 246, 0.8)');  // Purple\n\n      console.log('Creating chart with following configuration:', {\n        labels: labels,\n        company: company,\n        account: account,\n        selectedMonth,\n        canvasDataAttributes: {\n          company: chartElement.getAttribute('data-company'),\n          account: chartElement.getAttribute('data-account')\n        },\n        pointColors: pointColors\n      });\n\n      // Calculate point sizes - larger for selected month\n      const pointRadius = labels.map(month => \n        month === selectedMonth ? 8 : 6\n      );\n      \n      const pointHoverRadius = labels.map(month => \n        month === selectedMonth ? 10 : 8\n      );\n\n      // @ts-ignore - Chart.js is loaded dynamically\n      window.trendChartInstance = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Monthly Values',\n            data: values,\n            borderColor: gradient,\n            backgroundColor: gradient,\n            pointBackgroundColor: pointColors,\n            pointBorderColor: labels.map(month => \n              month === selectedMonth ? '#ffffff' : '#ffffff'\n            ),\n            pointBorderWidth: labels.map(month => \n              month === selectedMonth ? 2 : 1.5\n            ),\n            pointRadius: pointRadius,\n            pointHoverRadius: pointHoverRadius,\n            borderWidth: 3,\n            tension: 0.1,\n            fill: false\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          animation: {\n            duration: 500\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: function(context) {\n                  // @ts-ignore\n                  return new Intl.NumberFormat().format(context.parsed.y);\n                },\n                title: function(tooltipItems) {\n                  return tooltipItems[0].label;\n                }\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.7)',\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 10,\n              displayColors: false\n            },\n          },\n          scales: {\n            x: {\n              ticks: {\n                callback: function(value, index) {\n                  // Shorten month display to just show the month portion (MM)\n                  const monthStr = labels[index].split('-')[1];\n                  return monthStr || '';\n                },\n                maxRotation: 0,\n                color: function(context) {\n                  // Highlight the selected month tick\n                  const month = labels[context.index];\n                  return month === selectedMonth ? '#8b5cf6' : undefined;\n                },\n                font: {\n                  size: 10,\n                  weight: function(context) {\n                    const month = labels[context.index];\n                    return month === selectedMonth ? 'bold' : 'normal';\n                  }\n                }\n              },\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              beginAtZero: true,\n              ticks: {\n                callback: function(value) {\n                  return new Intl.NumberFormat().format(value);\n                },\n                font: {\n                  size: 10\n                }\n              },\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              }\n            }\n          },\n          onClick: function(event, elements) {\n            // If no elements were clicked, user clicked on chart background\n            if (elements.length === 0) {\n              console.log('Chart background clicked, clearing selected month');\n              // Clear selected month to hide analysis\n              selectedMonth = null;\n              // Reinitialize chart to update point appearance\n              setTimeout(() => initChart(), 50);\n              return;\n            }\n            \n            // User clicked on a data point\n            // @ts-ignore\n            const index = elements[0].index;\n            const month = labels[index];\n            \n            console.log('Chart point clicked:', {\n              month, \n              index,\n              chartDataCompany: chartData?.company,\n              chartDataAccount: chartData?.account\n            });\n            \n            // Update selected month\n            selectedMonth = month;\n            \n            // Reinitialize chart to update point appearance\n            setTimeout(() => initChart(), 50);\n            \n            // Get company and account directly from canvas data attributes\n            const canvas = document.getElementById('trendChart');\n            const canvasCompany = canvas ? canvas.getAttribute('data-company') : null;\n            const canvasAccount = canvas ? canvas.getAttribute('data-account') : null;\n            \n            // Use the chart title as the modal title\n            const modalTitle = chartTitle + ` - ${month}`;\n            \n            // Check if we already have analysis for this point\n            const analysisKey = `${canvasCompany}-${canvasAccount}-${month}`;\n            const generalKey = `${canvasCompany}-${canvasAccount}`;\n            \n            if (analysisText[analysisKey] || analysisText[generalKey]) {\n              // We already have analysis, show it in the modal\n              const content = formatAnalysisText(analysisText[analysisKey] || analysisText[generalKey]);\n              const rawText = analysisText[analysisKey] || analysisText[generalKey] || '';\n              \n              analysisModal.update(state => ({\n                ...state,\n                isOpen: true,\n                title: modalTitle,\n                content,\n                isLoading: false,\n                company: canvasCompany || '',\n                account: canvasAccount || '',\n                isEditing: false,\n                editText: rawText\n              }));\n            } else {\n              // Fetch analysis for this point\n              if (canvasCompany && canvasAccount) {\n                fetchAutoAnalysis(canvasCompany, canvasAccount);\n              }\n            }\n            \n            // Maintain compatibility with the old event-based approach for now\n            const selectEvent = new CustomEvent('select-month', {\n              detail: {\n                month: month,\n                company: canvasCompany,\n                account: canvasAccount\n              }\n            });\n            \n            console.log('Dispatching select-month event with:', {\n              month,\n              company: canvasCompany,\n              account: canvasAccount\n            });\n            \n            document.dispatchEvent(selectEvent);\n          }\n        }\n      });\n      \n      console.log('Chart initialized successfully');\n    } catch (error) {\n      console.error('Error initializing chart:', error);\n    }\n  }\n  \n  // Update the renderTimeline function to use the timestamp for reactivity\n  function renderTimeline() {\n    if (!chartData || !chartData.months || chartData.months.length === 0) {\n      console.log('No chart data available');\n      return '';\n    }\n    \n    // Reference the timestamp to ensure this function reruns when it changes\n    const refreshTimestamp = analysisContentTimestamp;\n    \n    console.log('Rendering timeline with data:', {\n      company: chartData.company,\n      account: chartData.account,\n      months: chartData.months.length,\n      refreshTimestamp,\n      selectedMonth,\n      isGeneratingAnalysis\n    });\n    \n    // Make sure company and account are valid strings, not undefined\n    const companyValue = chartData.company || '';\n    const accountValue = chartData.account || '';\n    \n    console.log('Setting chart data attributes:', {\n      company: companyValue,\n      account: accountValue\n    });\n    \n    // Generate HTML with Chart.js canvas and selected month details\n    let html = '<div class=\"chart-visualization relative bg-gradient-to-b from-blue-100/50 to-purple-100/30 dark:from-blue-900/20 dark:to-purple-900/10 p-6 pt-8 pb-12 rounded-xl shadow-sm border border-blue-100 dark:border-blue-900/30 mb-6\">';\n    html += `<h3 class=\"text-lg font-medium mb-4 text-gray-700 dark:text-gray-300\">${$i18n.t('Monthly Trend')}</h3>`;\n    html += '<div class=\"chart-container h-64 relative\">';\n    html += `<canvas id=\"trendChart\" width=\"800\" height=\"250\" data-company=\"${companyValue}\" data-account=\"${accountValue}\" data-ready=\"true\"></canvas>`;\n    html += '</div>';\n    \n    // Add selected month indicator below the chart if a month is selected\n    if (selectedMonth) {\n      // Find the month data in chartData\n      const monthIndex = chartData.months.findIndex(m => m === selectedMonth);\n      const monthValue = monthIndex !== -1 ? chartData.values[monthIndex] : null;\n      \n      // Get the previous month's value if available\n      let previousMonth = null;\n      let previousValue = null;\n      let percentChange = null;\n      \n      // Sort months chronologically to find the previous month\n      const sortedMonths = [...chartData.months].map((month, idx) => ({\n        month,\n        value: chartData.values[idx],\n        date: new Date(month.split('-')[0], parseInt(month.split('-')[1]) - 1)\n      })).sort((a, b) => a.date.getTime() - b.date.getTime());\n      \n      // Find current month in sorted array\n      const currentMonthIdx = sortedMonths.findIndex(m => m.month === selectedMonth);\n      if (currentMonthIdx > 0) {\n        previousMonth = sortedMonths[currentMonthIdx - 1].month;\n        previousValue = sortedMonths[currentMonthIdx - 1].value;\n        \n        // Calculate percentage change\n        if (previousValue && previousValue !== 0) {\n          percentChange = ((monthValue - previousValue) / Math.abs(previousValue)) * 100;\n        }\n      }\n      \n      // Format the selected month for display (YYYY-MM to MM/YYYY)\n      const [year, month] = selectedMonth.split('-');\n      const formattedMonth = `${month}/${year}`;\n      \n      // Add selected month indicator\n      html += '<div class=\"selected-month-indicator flex flex-col md:flex-row justify-between items-start md:items-center mt-4 p-4 bg-white dark:bg-gray-800 rounded-lg border border-blue-100 dark:border-blue-900/30 shadow-sm animate-fade-in\">';\n      \n      // Left side - month details\n      html += '<div class=\"flex items-center mb-3 md:mb-0\">';\n      html += '<div class=\"w-3 h-3 rounded-full bg-purple-500 mr-2\"></div>';\n      html += `<span class=\"font-medium text-gray-700 dark:text-gray-300\">${formattedMonth}</span>`;\n      html += '</div>';\n      \n      // Right side - value and change\n      html += '<div class=\"flex flex-col items-end\">';\n      html += `<div class=\"text-xl font-bold\">${formatNumber(monthValue)}</div>`;\n      \n      if (percentChange !== null) {\n        const changeClass = percentChange >= 0 \n          ? 'text-green-600 dark:text-green-400' \n          : 'text-red-600 dark:text-red-400';\n        \n        html += `<div class=\"text-sm ${changeClass}\">`;\n        html += `${percentChange >= 0 ? '+' : ''}${percentChange.toFixed(1)}% vs ${previousMonth.split('-')[1]}/${previousMonth.split('-')[0]}`;\n        html += '</div>';\n      }\n      \n      html += '</div>';\n      html += '</div>';\n    }\n    \n    html += '</div>';\n    \n    return html;\n  }\n  \n  // Add a watch statement to reinitialize the chart when chartData changes\n  $: if (chartData && currentView === 'chart') {\n    console.log('chartData changed, scheduling chart initialization');\n    // Check that the chartData has proper company and account values\n    if (!chartData.company || !chartData.account) {\n      console.warn('chartData missing company or account:', chartData);\n      // Ensure we have these values from the current state\n      if (chartTitle) {\n        // chartTitle format is typically \"company - account - accountName\"\n        const parts = chartTitle.split(' - ');\n        if (parts.length >= 2) {\n          chartData = {\n            ...chartData,\n            company: parts[0],\n            account: parts[1]\n          };\n          console.log('Fixed chartData by extracting from title:', chartData);\n        }\n      }\n    }\n    \n    setTimeout(() => {\n      initChart();\n    }, 200);\n  }\n  \n  function formatAnalysisText(text) {\n    if (!text) return '';\n    // Ensure text is a string before calling replace\n    const textStr = String(text);\n    return textStr.replace(/\\n/g, '<br>');\n  }\n\n  async function downloadWordReport() {\n    try {\n      console.log('[DEBUG] Starting Word document download');\n      \n      // Simplify to just use the current analysis text\n      let analysisContent = '';\n      let title = '';\n      \n      // Check if modal is open and has content\n      if ($analysisModal.isOpen) {\n        console.log('[DEBUG] Getting content from modal');\n        \n        // Get raw content without HTML formatting\n        analysisContent = $analysisModal.editText || '';\n        title = $analysisModal.title || 'Analysis Report';\n        \n        if (!analysisContent && $analysisModal.content) {\n          // If we only have HTML content, convert it\n          analysisContent = $analysisModal.content.replace(/<br>/g, '\\n').replace(/<[^>]*>/g, '');\n        }\n      } \n      // Otherwise check if we have analysis input text\n      else if (analysisInputText) {\n        console.log('[DEBUG] Using input text');\n        analysisContent = analysisInputText;\n        title = currentAnalysisKey || 'Analysis Report';\n      }\n      \n      if (!analysisContent) {\n        console.error('[DEBUG] No analysis content available');\n        toast.error($i18n.t('No analysis content to download'));\n        return;\n      }\n      \n      console.log('[DEBUG] Creating document with Docxtemplater');\n      console.log('[DEBUG] Content length:', analysisContent.length);\n      console.log('[DEBUG] Title:', title);\n      \n      // Generate a filename\n      const safeTitle = (title || 'analysis').replace(/[^a-z0-9]/gi, '_').toLowerCase();\n      const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n      const filename = `${safeTitle}_${timestamp}.docx`;\n      \n      try {\n        // Try the new Docxtemplater method first\n        const blob = await createDocxTemplateReport(analysisContent, title);\n        downloadDocxDocument(blob, filename);\n      } catch (docxTemplaterError) {\n        console.error('[DEBUG] Docxtemplater failed, falling back to simple document:', docxTemplaterError);\n        // Fall back to the previous method\n        const blob = await createSimpleWordDocument(analysisContent, title);\n        downloadWordDocument(blob, filename);\n      }\n      \n      console.log('[DEBUG] Download complete');\n      toast.success($i18n.t('Report downloaded successfully'));\n    } catch (error) {\n      console.error('[DEBUG] Error downloading Word report:', error);\n      toast.error($i18n.t('Failed to download report: ') + (error.message || 'Unknown error'));\n    }\n  }\n\n  function toggleSidebar() {\n\t\tshowSidebar.update(value => !value);\n\t}\n</script>\n\n<!-- Analysis Modal -->\n{#if $analysisModal.isOpen}\n<div class=\"fixed inset-0 z-50 flex items-center justify-center bg-black/60\" on:click|self={closeAnalysisModal}>\n  <div class=\"w-full max-w-2xl bg-white dark:bg-gray-900 rounded-xl p-6 max-h-[80vh] overflow-auto\">\n    <div class=\"flex justify-between items-center mb-4\">\n      <h2 class=\"text-xl font-bold\">{$analysisModal.title}</h2>\n      <button \n        class=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full\"\n        on:click={closeAnalysisModal}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n        </svg>\n      </button>\n    </div>\n    \n    {#if $analysisModal.isLoading}\n      <div class=\"flex justify-center items-center py-8\">\n        <Spinner className=\"size-8\" />\n        <p class=\"ml-3 text-gray-600 dark:text-gray-400\">{$i18n.t('Generating analysis...')}</p>\n      </div>\n    {:else if $analysisModal.isEditing}\n      <!-- Editing Mode -->\n      <div class=\"mb-4\">\n        <textarea\n          class=\"w-full h-64 px-3 py-2 text-sm rounded border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800\"\n          bind:value={$analysisModal.editText}\n          placeholder={$i18n.t('Enter your analysis here...')}\n        ></textarea>\n      </div>\n      \n      <div class=\"flex justify-end space-x-3\">\n        <button \n          class=\"px-4 py-2 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition\"\n          on:click={toggleEditMode}\n        >\n          {$i18n.t('Cancel')}\n        </button>\n        <button \n          class=\"px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition\"\n          on:click={saveAnalysisEdit}\n        >\n          {$i18n.t('Save')}\n        </button>\n      </div>\n    {:else}\n      <!-- Viewing Mode -->\n      <div class=\"analysis-content prose dark:prose-invert max-w-none\">\n        {#each ($analysisModal.content || '').split(';') as line}\n          <p class=\"mb-1\">{@html line}</p>\n        {/each}\n      </div>\n      \n      <div class=\"mt-4 flex justify-end space-x-3\">\n        <button \n          class=\"px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition flex items-center\"\n          on:click={async () => {\n            try {\n              // Disable button during download (via CSS)\n              const button = event.currentTarget;\n              button.classList.add('opacity-50', 'pointer-events-none');\n              button.innerHTML = `<svg class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"><circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle><path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\"></path></svg> ${$i18n.t('Downloading...')}`;\n              \n              await downloadWordReport();\n              \n              // Re-enable button after download\n              setTimeout(() => {\n                button.classList.remove('opacity-50', 'pointer-events-none');\n                button.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" /></svg> ${$i18n.t('Download Report')}`;\n              }, 1000);\n            } catch (e) {\n              console.error('Error in download button click handler:', e);\n              toast.error($i18n.t('Download failed: ') + (e.message || ''));\n              \n              // Re-enable button after error\n              const button = event.currentTarget;\n              button.classList.remove('opacity-50', 'pointer-events-none');\n              button.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" /></svg> ${$i18n.t('Download Report')}`;\n            }\n          }}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n          </svg>\n          {$i18n.t('Download Report')}\n        </button>\n        \n        <button \n          class=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition\"\n          on:click={toggleEditMode}\n        >\n          {$i18n.t('Edit Analysis')}\n        </button>\n      </div>\n    {/if}\n  </div>\n</div>\n{/if}\n\n<svelte:head>\n  <title>Account Analysis</title>\n</svelte:head>\n\n<div class=\"page-container w-full max-w-7xl mx-auto px-4 py-6\">\n  {#if currentView === 'main'}\n    <div class=\"flex justify-between items-center mb-6\">\n      <button\n        class=\"cursor-pointer p-[7px] flex rounded-xl hover:bg-gray-100 dark:hover:bg-gray-900 transition\"\n        on:click={toggleSidebar}\n        aria-label=\"Toggle Sidebar\"\n      >\n        <div class=\"m-auto self-center\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"2\"\n            stroke=\"currentColor\"\n            class=\"size-5\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              d=\"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25H12\"\n            />\n          </svg>\n        </div>\n      </button>\n      <h1 class=\"text-2xl font-bold text-blue-800 dark:text-blue-300\">{$i18n.t('Account Analysis')}</h1>\n      <div class=\"flex items-center space-x-2\">\n        <!-- Language dropdown removed -->\n      </div>\n    </div>\n\n    {#if loading}\n      <div class=\"flex justify-center items-center h-64\">\n        <Spinner className=\"size-8\" />\n      </div>\n    {:else if !accountTree}\n      <div class=\"text-center py-12 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-12 w-12 mx-auto mb-4 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n        <p class=\"text-lg font-medium\">{$i18n.t('Account Tree Missing')}</p>\n        <p class=\"text-sm mt-1 mb-4\">{$i18n.t('To use the Account Analysis feature, you need to upload an account tree file first.')}</p>\n        \n        <div class=\"flex justify-center space-x-3\">\n          <button \n            class=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition flex items-center\"\n            on:click={handleDownloadTemplate}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n            </svg>\n            {$i18n.t('Download Template')}\n          </button>\n          \n          <label \n            class=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition cursor-pointer flex items-center\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\" />\n            </svg>\n            {$i18n.t('Upload Account Tree')}\n            <input\n              type=\"file\"\n              class=\"hidden\"\n              accept=\".xlsx,.xls,.csv\"\n              on:change={(e) => {\n                if (e.target.files && e.target.files.length > 0) {\n                  const formData = new FormData();\n                  formData.append('file', e.target.files[0]);\n                  \n                  fetch(`${apiBaseUrl}/proxy/api/upload_account_tree`, {\n                    method: 'POST',\n                    headers: {\n                      'Authorization': `Bearer ${apiConfig.userToken}`\n                    },\n                    body: formData\n                  })\n                  .then(response => response.json())\n                  .then(result => {\n                    if (result.success) {\n                      toast.success($i18n.t('Account tree uploaded successfully'));\n                      loadAccountTree();\n                    } else {\n                      toast.error(result.error || $i18n.t('Upload failed'));\n                    }\n                  })\n                  .catch(error => {\n                    console.error('Error uploading account tree:', error);\n                    toast.error($i18n.t('Upload failed'));\n                  });\n                }\n              }}\n            />\n          </label>\n        </div>\n      </div>\n    {:else if data}\n      <div class=\"mb-6\">\n        <div class=\"controls-section mb-6 p-4 rounded-lg bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-900/50 shadow-sm\">\n          <div class=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n            <div class=\"flex items-center\">\n              <span class=\"mr-2 text-sm font-medium text-gray-700 dark:text-gray-300\">{$i18n.t('Significance Threshold')}:</span>\n              <input\n                type=\"number\"\n                bind:value={threshold}\n                min=\"0\"\n                max=\"100\"\n                class=\"w-16 h-8 px-3 py-1 text-sm border border-blue-200 dark:border-blue-800 rounded-md bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                on:change={handleThresholdChange}\n              /> <span class=\"ml-1 text-sm text-gray-700 dark:text-gray-300\">%</span>\n            </div>\n            \n            <div class=\"ml-auto\">\n              <select\n                id=\"monthSelector\"\n                bind:value={selectedMonth}\n                class=\"h-8 px-3 py-1 min-w-[130px] border border-blue-200 dark:border-blue-800 rounded-md bg-white dark:bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                on:change={handleMonthChange}\n              >\n                {#each monthOptions as month}\n                  <option value={month}>{month}</option>\n                {/each}\n              </select>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Hidden state to force re-render -->\n        <div class=\"hidden\">{expandedCompaniesState}</div>\n        \n        <!-- Companies Display with Loading Overlay -->\n        <div class=\"analysis-content rounded-lg border border-blue-200 dark:border-blue-800 overflow-hidden bg-white dark:bg-gray-800 shadow-md shadow-blue-100 dark:shadow-none relative\" \n             data-tree-container=\"true\"\n             on:click={handleModalClick}>\n          <!-- Loading overlay -->\n          {#if loading}\n            <div class=\"absolute inset-0 bg-white/60 dark:bg-gray-900/60 flex items-center justify-center z-10\">\n              <div class=\"flex flex-col items-center\">\n                <Spinner className=\"size-10\" />\n                <p class=\"mt-2 text-gray-600 dark:text-gray-400\">{$i18n.t('Loading...')}</p>\n              </div>\n            </div>\n          {/if}\n          \n          {@html renderTreeStructure()}\n        </div>\n      </div>\n    {:else}\n      <div class=\"flex justify-center items-center h-64\">\n        <Spinner className=\"size-8\" />\n        <div class=\"ml-3\">Loading account data...</div>\n      </div>\n    {/if}\n  {:else if currentView === 'transactions'}\n    <!-- Transactions view -->\n    <div class=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow\">\n      <div class=\"flex justify-between items-center mb-6\">\n        <div class=\"flex items-center\">\n          <button \n            class=\"mr-2 p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\"\n            on:click={navigateBack}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clip-rule=\"evenodd\" />\n            </svg>\n          </button>\n          <h2 class=\"text-xl font-bold\">{transactionTitle}</h2>\n        </div>\n      </div>\n      \n      <!-- Transaction summary -->\n      <div class=\"transaction-summary mb-6 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3\">\n        {#if transactions.length > 0}\n          {@const uniqueDocuments = [...new Set(transactions.map(t => t.document))]}\n          <div class=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n            <div class=\"text-xs text-blue-600 dark:text-blue-400\">{$i18n.t('Total Transactions')}</div>\n            <div class=\"text-xl font-bold\">{uniqueDocuments.length}</div>\n          </div>\n          \n          {@const totalDebit = transactions.reduce((sum, t) => sum + (t.debit || 0), 0)}\n          <div class=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n            <div class=\"text-xs text-green-600 dark:text-green-400\">{$i18n.t('Total Debits')}</div>\n            <div class=\"text-xl font-bold\">{formatNumber(totalDebit)}</div>\n          </div>\n          \n          {@const totalCredit = transactions.reduce((sum, t) => sum + (t.credit || 0), 0)}\n          <div class=\"p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n            <div class=\"text-xs text-red-600 dark:text-red-400\">{$i18n.t('Total Credits')}</div>\n            <div class=\"text-xl font-bold\">{formatNumber(totalCredit)}</div>\n          </div>\n          \n          <div class=\"p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n            <div class=\"text-xs text-purple-600 dark:text-purple-400\">{$i18n.t('Net Amount')}</div>\n            <div class=\"text-xl font-bold\">{formatNumber(totalDebit - totalCredit)}</div>\n          </div>\n        {/if}\n      </div>\n      \n      <div class=\"overflow-x-auto\">\n        <table class=\"w-full text-sm\">\n          <thead class=\"bg-gray-50 dark:bg-gray-700 text-gray-500 dark:text-gray-300\">\n            <tr>\n              <th class=\"px-4 py-2 text-left\">{$i18n.t('Date')}</th>\n              <th class=\"px-4 py-2 text-left\">{$i18n.t('Journal Entry')}</th>\n              <th class=\"px-4 py-2 text-left\">{$i18n.t('Account')}</th>\n              <th class=\"px-4 py-2 text-left\">{$i18n.t('Note')}</th>\n              <th class=\"px-4 py-2 text-right\">{$i18n.t('Debit')}</th>\n              <th class=\"px-4 py-2 text-right\">{$i18n.t('Credit')}</th>\n              <th class=\"px-4 py-2 text-center\">{$i18n.t('Flags')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {#each transactions as transaction}\n            <tr class=\"border-t border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800/50\">\n              <td class=\"px-4 py-2\">{transaction.postingDate}</td>\n              <td class=\"px-4 py-2 font-medium\">{transaction.document}</td>\n              <td class=\"px-4 py-2\">\n                <div class=\"font-mono text-xs\">{transaction.account}</div>\n                <div>{transaction.accountName}</div>\n              </td>\n              <td class=\"px-4 py-2\">{transaction.text}</td>\n              <td class=\"px-4 py-2 text-right\">\n                {#if transaction.debit}\n                  <span class=\"font-medium\">{formatNumber(transaction.debit)}</span>\n                {/if}\n              </td>\n              <td class=\"px-4 py-2 text-right\">\n                {#if transaction.credit}\n                  <span class=\"font-medium\">{formatNumber(transaction.credit)}</span>\n                {/if}\n              </td>\n              <td class=\"px-4 py-2 text-center\">\n                {#if transaction.isRecurring}\n                  <span class=\"inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\">\n                    {$i18n.t('Recurring')}\n                  </span>\n                {/if}\n                {#if transaction.isUnusual}\n                  <span class=\"inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\">\n                    {$i18n.t('Unusual')}\n                  </span>\n                {/if}\n                {#if transaction.iqr_flag !== undefined}\n                  <span class=\"ml-1\">{@html renderIqrFlag(transaction.iqr_flag)}</span>\n                {/if}\n              </td>\n            </tr>\n            {/each}\n            \n            {#if transactions.length === 0}\n            <tr>\n              <td colspan=\"7\" class=\"px-4 py-8 text-center text-gray-500\">\n                {$i18n.t('No transactions found for this period')}\n              </td>\n            </tr>\n            {/if}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  {:else if currentView === 'chart'}\n    <!-- Chart view -->\n    <div class=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow\">\n      <div class=\"flex justify-between items-center mb-6\">\n        <div class=\"flex items-center\">\n          <button \n            class=\"mr-2 p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\"\n            on:click={navigateBack}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clip-rule=\"evenodd\" />\n            </svg>\n          </button>\n          <h2 class=\"text-xl font-bold\">{chartTitle}</h2>\n        </div>\n      </div>\n      \n      {#if chartData}\n        <div class=\"chart-content\">\n          <!-- Timeline visualization - replacing both the chart container and monthly values grid -->\n          <div class=\"timeline-section mb-6\">\n            {@html renderTimeline()}\n          </div>\n          \n          \n        </div>\n      {:else}\n        <div class=\"flex justify-center items-center h-64\">\n          <Spinner className=\"size-8\" />\n        </div>\n      {/if}\n    </div>\n  {:else if currentView === 'analysis'}\n    <!-- Analysis view -->\n    <div class=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow\">\n      <div class=\"flex justify-between items-center mb-4\">\n        <div class=\"flex items-center\">\n          <button \n            class=\"mr-2 p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\"\n            on:click={navigateBack}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clip-rule=\"evenodd\" />\n            </svg>\n          </button>\n          <h2 class=\"text-xl font-bold\">{$i18n.t('Edit Analysis')}</h2>\n        </div>\n      </div>\n      \n      <div class=\"mb-4 relative\">\n        <textarea\n          class=\"w-full h-64 px-3 py-2 text-sm rounded border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800\"\n          bind:value={analysisInputText}\n          placeholder={$i18n.t('Enter your analysis here...')}\n          disabled={isGeneratingAnalysis}\n        ></textarea>\n        \n        {#if isGeneratingAnalysis}\n          <div class=\"absolute inset-0 bg-black/10 flex items-center justify-center\">\n            <div class=\"flex flex-col items-center\">\n              <Spinner className=\"size-8 mb-2\" />\n              <div class=\"text-sm font-medium\">{$i18n.t('Generating analysis...')}</div>\n            </div>\n          </div>\n        {/if}\n      </div>\n      \n      <div class=\"flex justify-end space-x-3\">\n        <button \n          class=\"px-4 py-2 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition\"\n          on:click={navigateBack}\n        >\n          {$i18n.t('Cancel')}\n        </button>\n        <button \n          class=\"px-4 py-2 rounded-lg bg-green-600 text-white hover:bg-green-700 transition flex items-center\"\n          on:click={async () => {\n            try {\n              // Disable button during download (via CSS)\n              const button = event.currentTarget;\n              button.classList.add('opacity-50', 'pointer-events-none');\n              button.innerHTML = `<svg class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"><circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle><path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\"></path></svg> ${$i18n.t('Downloading...')}`;\n              \n              await downloadWordReport();\n              \n              // Re-enable button after download\n              setTimeout(() => {\n                button.classList.remove('opacity-50', 'pointer-events-none');\n                button.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" /></svg> ${$i18n.t('Download Report')}`;\n              }, 1000);\n            } catch (e) {\n              console.error('Error in download button click handler:', e);\n              toast.error($i18n.t('Download failed: ') + (e.message || ''));\n              \n              // Re-enable button after error\n              const button = event.currentTarget;\n              button.classList.remove('opacity-50', 'pointer-events-none');\n              button.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" /></svg> ${$i18n.t('Download Report')}`;\n            }\n          }}\n          disabled={!analysisInputText || isGeneratingAnalysis}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n          </svg>\n          {$i18n.t('Download')}\n        </button>\n        <button \n          class=\"px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition\"\n          on:click={handleAnalysisSave}\n          disabled={isGeneratingAnalysis}\n        >\n          {$i18n.t('Save')}\n        </button>\n      </div>\n    </div>\n  {/if}\n</div>\n\n<style>\n  /* Account row styles */\n  .account-row:hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n  \n  .dark .account-row:hover {\n    background-color: rgba(255, 255, 255, 0.05);\n  }\n  \n  .edit-icon {\n    opacity: 0.6;\n    font-size: 0.9em;\n    cursor: pointer;\n  }\n  \n  .edit-icon:hover {\n    opacity: 1;\n  }\n  \n  /* Category styling */\n  .category-section {\n    margin: 0;\n    padding: 0;\n  }\n  \n  .category-header {\n    transition: background-color 0.2s;\n  }\n  \n  .category-content {\n    display: block;\n  }\n  \n  /* Company styling */\n  .company-section {\n    margin-bottom: 8px;\n  }\n  \n  .company-header {\n    transition: background-color 0.2s;\n  }\n  \n  .company-header:hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n  \n  .dark .company-header:hover {\n    background-color: rgba(255, 255, 255, 0.05);\n  }\n  \n  .toggle-icon {\n    transition: transform 0.2s;\n  }\n  \n  /* Timeline chart styles */\n  .timeline-bar {\n    transition: height 0.3s ease, background-color 0.2s;\n  }\n  \n  .timeline-item:hover .timeline-bar {\n    opacity: 0.8;\n  }\n  \n  /* Page container */\n  .page-container {\n    min-height: calc(100vh - 100px);\n  }\n  \n  /* IQR Flag styles */\n  span[title] {\n    cursor: help;\n  }\n  \n  span[title*=\"normal range\"] {\n    display: inline-flex;\n    align-items: center;\n    font-weight: 500;\n  }\n  \n  /* Enhanced chart styles */\n  .chart-content {\n    background: white;\n    border-radius: 8px;\n    margin-bottom: 24px;\n    position: relative;\n  }\n  \n  .chart-container {\n    position: relative;\n    transition: all 0.3s ease;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n  }\n  \n  .chart-visualization {\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .chart-visualization::before {\n    content: '';\n    position: absolute;\n    bottom: 30px;\n    left: 0;\n    right: 0;\n    height: 1px;\n    background: rgba(0, 0, 0, 0.05);\n    z-index: 1;\n  }\n  \n  /* Line chart styles */\n  .chart-point {\n    z-index: 20;\n    transition: transform 0.2s ease;\n  }\n  \n  .chart-point:hover {\n    transform: translate(-50%, -50%) scale(1.3);\n    z-index: 30;\n  }\n  \n  .chart-point:hover .point-tooltip {\n    opacity: 1;\n  }\n  \n  .point-outer {\n    transition: all 0.2s ease;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n  }\n  \n  .point-inner {\n    transition: all 0.2s ease;\n  }\n  \n  /* Analysis popup styles */\n  .analysis-popup {\n    position: relative;\n    z-index: 10;\n    max-height: 300px;\n    overflow-y: auto;\n    transition: all 0.3s ease;\n    animation: popup-fade-in 0.3s ease;\n  }\n  \n  @keyframes popup-fade-in {\n    from {\n      opacity: 0;\n      transform: translateY(-10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  /* Dark mode support */\n  .dark .chart-visualization::before {\n    background: rgba(255, 255, 255, 0.05);\n  }\n  \n  .dark .analysis-popup {\n    background: #1f2937;\n    color: #e5e7eb;\n  }\n  \n  /* Responsive styles */\n  @media (max-width: 640px) {\n    .analysis-popup {\n      max-height: 200px;\n    }\n  }\n  \n  /* Add animation styles to the <style> section */\n  @keyframes fade-in {\n    from {\n      opacity: 0;\n      transform: translateY(-10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  .animate-fade-in {\n    animation: fade-in 0.3s ease forwards;\n  }\n  \n  /* Add spinner animation styles */\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n  \n  .spinner {\n    border: 2px solid rgba(0, 0, 0, 0.1);\n    border-top-color: #3b82f6;\n    border-radius: 50%;\n    width: 1rem;\n    height: 1rem;\n    animation: spin 1s linear infinite;\n  }\n  \n  .dark .spinner {\n    border-color: rgba(255, 255, 255, 0.1);\n    border-top-color: #60a5fa;\n  }\n  \n  /* Toggle icon styling */\n  .toggle-icon {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width: 20px;\n    height: 20px;\n    line-height: 20px;\n    font-size: 12px;\n    color: #3b82f6;\n    background-color: rgba(59, 130, 246, 0.1);\n    border-radius: 4px;\n    transition: all 0.2s ease-in-out;\n  }\n  \n  .dark .toggle-icon {\n    color: #60a5fa;\n    background-color: rgba(59, 130, 246, 0.1);\n  }\n  \n  .company-header:hover .toggle-icon,\n  .category-header:hover .toggle-icon {\n    color: #2563eb;\n    background-color: rgba(59, 130, 246, 0.2);\n    transform: scale(1.1);\n  }\n  \n  /* Make the toggler more clickable */\n  .company-header .toggle-icon,\n  .category-header .toggle-icon {\n    padding: 2px;\n    margin: 0 4px 0 0;\n  }\n  \n  /* Category content animation */\n  .category-content {\n    display: block;\n    animation: slide-down 0.3s ease-in-out;\n    transform-origin: top;\n    overflow: hidden;\n  }\n  \n  /* Company content animation */\n  .company-content {\n    animation: slide-down 0.3s ease-in-out;\n    transform-origin: top;\n    overflow: hidden;\n  }\n  \n  @keyframes slide-down {\n    from {\n      opacity: 0;\n      transform: scaleY(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: scaleY(1);\n    }\n  }\n</style> "],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAYQ,QAAA,OAAY,WAAW,MAAM;;QAG7B,gBAAgB,SAAA;AAAA,IACpB,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS;AAAA,IACT,WAAW;AAAA,IACX,SAAS;AAAA,IACT,SAAS;AAAA,IACT,WAAW;AAAA,IACX,UAAU;AAAA;;AA+HR,MAAA,oBAAA,CAAA;AACA,MAAA,qBAAA,CAAA;AAMA,MAAA,eAAA,CAAA;;;AAoBD,YAAQ,IAAI,8BAA8B,iBAAiB;AAAA;;AAC3D,YAAQ,IAAI,+BAA+B,OAAO,KAAK,kBAAkB,EAAE,QAAQ,YAAY;AAAA;AAGtE,OAAK,IAAM,EAAA,SAAA;;QAuhChC,OAAO,KAAK,YAAY,EAAE,SAAS,GAAA;AACxC,cAAQ,IAAI,sCAAsC;AAAA;;;;;AAwxCjD,SAAA,IAAA,eAAe,SAIiB,oQAAA,OAAA,eAAe,KAAK,CAWhD,oeAAA,eAAe,wNAGkC,MAAM,EAAE,wBAAwB,CAAA,CAAA,eAE5E,GAAA,eAAe,YAMN,mJAAA,cAAA,eAAA,MAAM,EAAE,6BAA6B,GADtC,CAAA,CAAA,IAAA,OAAA,eAAe,YAAQ,EAAA,CAAA,mLAAA,OAUlC,MAAM,EAAE,QAAQ,CAAA,CAAA,sGAAA,OAMhB,MAAM,EAAE,MAAM,CAAA,CAAA,oBAMT,qEAAA,MAAA,eAAe,WAAW,IAAI,MAAM,GAAG,GAAA,UAAA;qDACtB,IAAI;AAAA,0fAmC1B,MAAM,EAAE,iBAAiB,+GAOzB,MAAM,EAAE,eAAe,CAAA,CAAA,iBAAA,EAAA,iBAa3B,EAAA,IAAA,SAAA,QAAA,oCAAA,SAAA,QAAA,mCAAA,EAAA,mCAAA,EAAA,kFAwBgE,2jBAAA,OAAA,MAAM,EAAE,kBAAkB,2eAezD,MAAM,EAAE,sBAAsB,8CAChC,MAAM,EAAE,qFAAqF,kfAUtH,MAAM,EAAE,mBAAmB,kbAS3B,MAAM,EAAE,qBAAqB,CAAA,CAAA;;"}