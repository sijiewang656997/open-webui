import { c as create_ssr_component, p as getContext, b as subscribe, f as escape, a as add_attribute, v as validate_component } from "../../../../chunks/ssr.js";
import "../../../../chunks/Toaster.svelte_svelte_type_style_lang.js";
import "../../../../chunks/index3.js";
import { S as Spinner } from "../../../../chunks/Spinner.js";
const css = {
  code: '.excel-management-container.svelte-1310t73.svelte-1310t73.svelte-1310t73{display:flex;flex-direction:column;height:100vh;width:100%}.management-header.svelte-1310t73.svelte-1310t73.svelte-1310t73{padding:12px 24px;box-shadow:0 2px 8px rgba(0, 0, 0, 0.15);z-index:10}.header-title-row.svelte-1310t73.svelte-1310t73.svelte-1310t73{display:flex;justify-content:space-between;align-items:center}.header-left.svelte-1310t73.svelte-1310t73.svelte-1310t73{display:flex;align-items:center}.back-button.svelte-1310t73.svelte-1310t73.svelte-1310t73{background:transparent;border:none;color:white;cursor:pointer;display:flex;align-items:center;padding:8px 12px;margin-right:15px;font-size:14px;border-radius:4px;transition:all 0.2s ease}.back-button.svelte-1310t73.svelte-1310t73.svelte-1310t73:hover{background-color:rgba(255, 255, 255, 0.15);transform:translateX(-2px)}.header-title.svelte-1310t73.svelte-1310t73.svelte-1310t73{margin:0;font-weight:500;font-size:20px;letter-spacing:0.3px}.management-content.svelte-1310t73.svelte-1310t73.svelte-1310t73{display:flex;flex-direction:column;flex:1;overflow:auto;padding:0;border-radius:8px;margin:16px;box-shadow:0 2px 12px rgba(0, 0, 0, 0.08)}.file-list-container.svelte-1310t73.svelte-1310t73.svelte-1310t73{display:flex;flex-direction:column;height:100%}.file-list-header.svelte-1310t73.svelte-1310t73.svelte-1310t73{padding:20px 24px;border-bottom:1px solid #edf2f7}.empty-state.svelte-1310t73.svelte-1310t73.svelte-1310t73{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:60px 20px;text-align:center}.file-detail-container.svelte-1310t73.svelte-1310t73.svelte-1310t73{display:flex;flex-direction:column;height:100%}.file-detail-header.svelte-1310t73.svelte-1310t73.svelte-1310t73{padding:18px 24px;border-bottom:1px solid #edf2f7;display:flex;align-items:center}.back-to-files-button.svelte-1310t73.svelte-1310t73.svelte-1310t73{background:transparent;border:none;color:#3182ce;cursor:pointer;display:flex;align-items:center;padding:8px 12px;font-size:14px;border-radius:4px;transition:all 0.2s ease}.back-to-files-button.svelte-1310t73.svelte-1310t73.svelte-1310t73:hover{background-color:rgba(49, 130, 206, 0.1);transform:translateX(-2px)}.file-info-section.svelte-1310t73.svelte-1310t73.svelte-1310t73{padding:16px 24px;border-bottom:1px solid #edf2f7;display:flex;flex-wrap:wrap}.file-info-item.svelte-1310t73.svelte-1310t73.svelte-1310t73{margin-right:32px;margin-bottom:12px;display:flex;align-items:center}.info-label.svelte-1310t73.svelte-1310t73.svelte-1310t73{font-weight:600;margin-right:8px;color:#64748b;font-size:14px}.info-value.svelte-1310t73.svelte-1310t73.svelte-1310t73{color:#334155;font-size:14px}.tables-section.svelte-1310t73.svelte-1310t73.svelte-1310t73{padding:16px 24px;flex:1;overflow:auto}.section-title.svelte-1310t73.svelte-1310t73.svelte-1310t73{margin-top:0;margin-bottom:16px;font-weight:600;color:#334155;font-size:16px}.table-view-section.svelte-1310t73.svelte-1310t73.svelte-1310t73{padding:16px 24px;width:100%;overflow:hidden}.table-item.svelte-1310t73.svelte-1310t73.svelte-1310t73{padding:12px 16px;border:1px solid #e2e8f0;border-radius:6px;cursor:pointer;transition:all 0.2s ease}.table-item.svelte-1310t73.svelte-1310t73.svelte-1310t73:hover{background-color:#f7fafc;border-color:#cbd5e0}.table-item.selected.svelte-1310t73.svelte-1310t73.svelte-1310t73{background-color:#ebf8ff;border-color:#90cdf4}.excel-table-wrapper.svelte-1310t73.svelte-1310t73.svelte-1310t73{overflow-y:auto;overflow-x:auto;max-height:70vh;max-width:100%;border:1px solid #e2e8f0;border-radius:4px;width:100%}.excel-table.svelte-1310t73.svelte-1310t73.svelte-1310t73{border-collapse:collapse;min-width:100%;table-layout:auto;white-space:nowrap}.excel-table.svelte-1310t73 th.svelte-1310t73.svelte-1310t73{background-color:#f7fafc;border:1px solid #e2e8f0;padding:8px 12px;text-align:left;font-weight:600;position:sticky;top:0;z-index:1;min-width:120px}.excel-table.svelte-1310t73 td.svelte-1310t73.svelte-1310t73{border:1px solid #e2e8f0;padding:8px 12px;vertical-align:top}.excel-table.svelte-1310t73 tbody.svelte-1310t73 tr.svelte-1310t73:hover{background-color:#f7fafc}.excel-table.svelte-1310t73 td[contenteditable="true"].svelte-1310t73.svelte-1310t73{background-color:#ffffff;cursor:text}.excel-table.svelte-1310t73 td[contenteditable="true"].svelte-1310t73.svelte-1310t73:focus{outline:2px solid #3182ce;outline-offset:-2px}@media(prefers-color-scheme: dark){.excel-table.svelte-1310t73 th.svelte-1310t73.svelte-1310t73{background-color:#2d3748;border-color:#4a5568}.excel-table.svelte-1310t73 td.svelte-1310t73.svelte-1310t73{border-color:#4a5568}.excel-table.svelte-1310t73 tbody.svelte-1310t73 tr.svelte-1310t73:hover{background-color:#2d3748}.excel-table.svelte-1310t73 td[contenteditable="true"].svelte-1310t73.svelte-1310t73{background-color:#1a202c}.excel-table.svelte-1310t73 td[contenteditable="true"].svelte-1310t73.svelte-1310t73:focus{outline-color:#4299e1}}',
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n  import { onMount, getContext } from 'svelte';\\n  import { toast } from 'svelte-sonner';\\n  import { user, showSidebar } from '$lib/stores';;\\n  import Spinner from '$lib/components/common/Spinner.svelte';\\n  import { getApiConfig } from '$lib/utils/api-config';\\n  import { WEBUI_BASE_URL } from '$lib/constants';\\n  \\n  const i18n = getContext('i18n');\\n  \\n  let isLoading = true;\\n  let files = [];\\n  let selectedFile = null;\\n  let tablesData = {};\\n  let tableLoadingStates = {};\\n  let expandedTables = {};\\n  let searchQuery = '';\\n  let selectedTable = null;\\n  let editedData = {};\\n  let selectedColumns = [];\\n  let hasUnsavedChanges = false;\\n  let isEditMode = false;\\n  \\n  // API configuration with fallback defaults\\n  let base_url = WEBUI_BASE_URL;\\n  let user_token = 'token_59b8b43a_aiurmmm0';\\n  let language_local = 'en';\\n  \\n  // Create a confirmation modal state\\n  let showConfirmDialog = false;\\n  let confirmDialogProps = {\\n    title: '',\\n    message: '',\\n    onConfirm: () => {},\\n    onCancel: () => {}\\n  };\\n  \\n  onMount(async () => {\\n    try {\\n\\n\\n      console.log('Loading API configuration...');\\n      \\n      // Get API configuration\\n      const apiConfig = await getApiConfig(i18n);\\n      \\n      // Update local variables with config values\\n      base_url = base_url;\\n      user_token = apiConfig.userToken || user_token;\\n      language_local = apiConfig.languageLocal || language_local;\\n      \\n      console.log('Excel-to-SQL page - API Config loaded:', { base_url, language_local, user_token });\\n    } catch (error) {\\n      console.error('Error loading API configuration:', error);\\n      // Keep using default values\\n    }\\n    \\n    await loadFiles();\\n  });\\n  \\n  // Function to make requests to the API with the required headers\\n  async function makeRequest(endpoint, options = {}) {\\n    // Updated to use the proxy endpoint for all requests\\n    const url = \`\${base_url}/proxy/api\${endpoint}\`;\\n    \\n    console.log(\`[ExcelToSQL Debug] Sending request to \${url}\`);\\n    \\n    const defaultOptions = {\\n      method: 'POST',\\n      headers: {\\n        'Content-Type': 'application/json',\\n        'Authorization': \`Bearer \${user_token}\`,\\n        'Accept-Language': language_local\\n      }\\n    };\\n    \\n    const mergedOptions = {\\n      ...defaultOptions,\\n      ...options,\\n      headers: {\\n        ...defaultOptions.headers,\\n        ...(options.headers || {})\\n      }\\n    };\\n    \\n    console.log(\`[ExcelToSQL Debug] Full request options:\`, mergedOptions);\\n    \\n    try {\\n      const response = await fetch(url, mergedOptions);\\n      \\n      console.log(\`[ExcelToSQL Debug] Response status: \${response.status}\`);\\n      \\n      // Try to parse the response as JSON\\n      try {\\n        const data = await response.json();\\n        console.log(\`[ExcelToSQL Debug] RAW API RESPONSE:\`, JSON.stringify(data, null, 2));\\n        \\n        if (!response.ok) {\\n          console.error(\`[ExcelToSQL Debug] Request failed with status \${response.status}:\`, data);\\n          throw new Error(data.error || data.detail || 'An error occurred');\\n        }\\n        \\n        return data;\\n      } catch (jsonError) {\\n        console.error('[ExcelToSQL Debug] Failed to parse JSON response:', jsonError);\\n        const textResponse = await response.text();\\n        console.error('[ExcelToSQL Debug] Text response:', textResponse);\\n        throw new Error('Invalid JSON response from server');\\n      }\\n    } catch (error) {\\n      console.error('[ExcelToSQL Debug] API request failed:', error);\\n      throw error;\\n    }\\n  }\\n  \\n  // Load files from backend\\n  async function loadFiles() {\\n    console.log('[ExcelToSQL Debug] Loading files list');\\n    isLoading = true;\\n    \\n    try {\\n      // Use correct endpoint for external API through the proxy\\n      const response = await makeRequest('/excel_to_sql/list_files', {\\n        method: 'GET'\\n      });\\n      \\n      console.log('[ExcelToSQL Debug] Files loaded:', response);\\n      \\n      if (response.success && response.files) {\\n        console.log('[ExcelToSQL Debug] LIST_FILES SUCCESS - File count:', response.files.length);\\n        console.log('[ExcelToSQL Debug] LIST_FILES DETAILED:', JSON.stringify(response.files, null, 2));\\n        \\n        const formattedFiles = response.files.map((file, index) => ({\\n          key: index.toString(),\\n          id: file.id || index.toString(),\\n          name: file.original_filename,\\n          savedPath: file.saved_path,\\n          dateUploaded: new Date(file.created_at || Date.now()).toLocaleString(),\\n          tableCount: (file.tables || []).length,\\n          tables: file.tables || [],\\n          mappingId: file.mapping_id\\n        }));\\n        \\n        console.log('[ExcelToSQL Debug] Formatted files:', formattedFiles);\\n        files = formattedFiles;\\n      } else {\\n        console.error('[ExcelToSQL Debug] Failed to load files:', response);\\n        toast.error('Failed to load Excel files');\\n      }\\n    } catch (error) {\\n      console.error('[ExcelToSQL Debug] Error loading Excel files:', error);\\n      toast.error(\`Error loading Excel files: \${error.message}\`);\\n      files = [];\\n    } finally {\\n      isLoading = false;\\n    }\\n  }\\n  \\n  // Function to show confirmation dialog\\n  function showConfirmation(title, message, onConfirm) {\\n    confirmDialogProps = {\\n      title,\\n      message,\\n      onConfirm: () => {\\n        onConfirm();\\n        showConfirmDialog = false;\\n      },\\n      onCancel: () => {\\n        showConfirmDialog = false;\\n      }\\n    };\\n    showConfirmDialog = true;\\n  }\\n  \\n  // Delete a file\\n  async function handleDeleteFile(file) {\\n    console.log('[ExcelToSQL Debug] Attempting to delete file:', file);\\n    showConfirmation(\\n      \\"Delete File\\",\\n      \`Are you sure you want to delete the file \\"\${file.name}\\"?\`,\\n      async () => {\\n        isLoading = true;\\n        try {\\n          console.log('[ExcelToSQL Debug] Confirmed file deletion for:', file.savedPath);\\n          // Update endpoint path to use proper structure\\n          const response = await makeRequest('/excel_to_sql/delete_file', {\\n            method: 'POST',\\n            body: JSON.stringify({ file_path: file.savedPath })\\n          });\\n  \\n          console.log('[ExcelToSQL Debug] Delete file response:', response);\\n          \\n          if (response.success) {\\n            toast.success(\`File \\"\${file.name}\\" deleted successfully\`);\\n            console.log('[ExcelToSQL Debug] File deleted successfully, reloading file list');\\n            await loadFiles();\\n            if (selectedFile && selectedFile.id === file.id) {\\n              console.log('[ExcelToSQL Debug] Clearing selected file as it was deleted');\\n              selectedFile = null;\\n            }\\n          } else {\\n            console.error('[ExcelToSQL Debug] Failed to delete file:', response.error);\\n            toast.error(\`Failed to delete file: \${response.error}\`);\\n          }\\n        } catch (error) {\\n          console.error('[ExcelToSQL Debug] Error deleting file:', error);\\n          toast.error(\`Error deleting file: \${error.message}\`);\\n        } finally {\\n          isLoading = false;\\n        }\\n      }\\n    );\\n  }\\n  \\n  // View file details\\n  function handleViewDetails(file) {\\n    console.log('[ExcelToSQL Debug] Viewing file details:', file);\\n    selectedFile = file;\\n    tablesData = {};\\n    tableLoadingStates = {};\\n    expandedTables = {};\\n    selectedTable = null;\\n    editedData = {};\\n    isEditMode = false;\\n    hasUnsavedChanges = false;\\n  }\\n  \\n  // Load a single table\\n  async function loadSingleTable(table) {\\n    console.log('[ExcelToSQL Debug] Loading table data for:', table.table_name);\\n    selectedTable = table;\\n    tableLoadingStates[table.table_name] = true;\\n    \\n    // Reset edit state when loading a new table\\n    isEditMode = false;\\n    hasUnsavedChanges = false;\\n    \\n    try {\\n      // Updated endpoint path to use proper structure\\n      const response = await makeRequest('/excel_to_sql/get_table_data', {\\n        method: 'POST',\\n        body: JSON.stringify({ \\n          table_name: table.table_name\\n        })\\n      });\\n\\n      console.log('[ExcelToSQL Debug] Table data response:', response);\\n\\n      if (response.success) {\\n        console.log('[ExcelToSQL Debug] Table data loaded successfully:', response.data);\\n        tablesData[table.table_name] = response.data || {};\\n        \\n        // Initialize edited data with original data\\n        const initialEditedData = {};\\n        if (response.data && response.data.rows) {\\n          response.data.rows.forEach((row, idx) => {\\n            initialEditedData[idx] = { ...row };\\n          });\\n        }\\n        editedData = initialEditedData;\\n        \\n        // Initialize selected columns with all columns\\n        if (response.data && response.data.columns) {\\n          selectedColumns = response.data.columns.map(col => col.name);\\n          console.log('[ExcelToSQL Debug] Selected columns:', selectedColumns);\\n        }\\n      } else {\\n        console.error('[ExcelToSQL Debug] Failed to load table data:', response.error);\\n        toast.error(\`Failed to load table data: \${response.error}\`);\\n      }\\n    } catch (error) {\\n      console.error('[ExcelToSQL Debug] Error loading table data:', error);\\n      toast.error(\`Error loading table data: \${error.message}\`);\\n    } finally {\\n      tableLoadingStates[table.table_name] = false;\\n    }\\n  }\\n  \\n  // Handle cell editing\\n  function handleCellEdit(rowIndex, columnName, value) {\\n    console.log(\`[ExcelToSQL Debug] Editing cell: row \${rowIndex}, column \${columnName}, value:\`, value);\\n    editedData[rowIndex] = {\\n      ...editedData[rowIndex],\\n      [columnName]: value\\n    };\\n    hasUnsavedChanges = true;\\n  }\\n  \\n  // Save edited data\\n  async function saveEditedData() {\\n    if (!selectedTable) return;\\n    \\n    console.log('[ExcelToSQL Debug] Saving edited data for table:', selectedTable.table_name);\\n    \\n    try {\\n      isLoading = true;\\n      \\n      // Convert edited data back to rows format\\n      const rows = Object.values(editedData);\\n      console.log('[ExcelToSQL Debug] Rows to save:', rows);\\n      console.log('[ExcelToSQL Debug] Columns to include:', selectedColumns);\\n      \\n      const requestPayload = {\\n        table_name: selectedTable.table_name,\\n        rows: rows,\\n        columns: selectedColumns\\n      };\\n      \\n      console.log('[ExcelToSQL Debug] Save request payload:', requestPayload);\\n      \\n      const response = await makeRequest('/excel_to_sql/update_table_data', {\\n        method: 'POST',\\n        body: JSON.stringify(requestPayload)\\n      });\\n      \\n      console.log('[ExcelToSQL Debug] Save response:', response);\\n      \\n      if (response.success) {\\n        console.log('[ExcelToSQL Debug] Data saved successfully');\\n        toast.success(\`Successfully saved changes to \${selectedTable.table_name}\`);\\n        hasUnsavedChanges = false;\\n        \\n        // Refresh the table data\\n        console.log('[ExcelToSQL Debug] Reloading table data after save');\\n        await loadSingleTable(selectedTable);\\n        \\n        // Exit edit mode after saving\\n        isEditMode = false;\\n      } else {\\n        console.error('[ExcelToSQL Debug] Failed to save changes:', response.error);\\n        toast.error(\`Failed to save changes: \${response.error}\`);\\n      }\\n    } catch (error) {\\n      console.error('[ExcelToSQL Debug] Error saving data:', error);\\n      toast.error(\`Error saving data: \${error.message}\`);\\n    } finally {\\n      isLoading = false;\\n    }\\n  }\\n  \\n  // Delete a table\\n  async function handleDeleteTable(table) {\\n    console.log('[ExcelToSQL Debug] Requesting to delete table:', table.table_name);\\n    showConfirmation(\\n      \\"Delete Table\\",\\n      \`Are you sure you want to delete the table \\"\${table.table_name}\\"?\`,\\n      async () => {\\n        try {\\n          console.log('[ExcelToSQL Debug] Confirmed table deletion for:', table.table_name);\\n          const response = await makeRequest('/excel_to_sql/delete_table', {\\n            method: 'POST',\\n            body: JSON.stringify({ table_name: table.table_name })\\n          });\\n\\n          console.log('[ExcelToSQL Debug] Delete table response:', response);\\n\\n          if (response.success) {\\n            console.log('[ExcelToSQL Debug] Table deleted successfully');\\n            toast.success(\`Table \\"\${table.table_name}\\" deleted successfully\`);\\n            \\n            // Update the selected file's tables\\n            if (selectedFile) {\\n              const updatedTables = selectedFile.tables.filter(t => t.table_name !== table.table_name);\\n              console.log('[ExcelToSQL Debug] Updated tables list after deletion:', updatedTables);\\n              \\n              selectedFile = {\\n                ...selectedFile,\\n                tables: updatedTables,\\n                tableCount: updatedTables.length\\n              };\\n              \\n              // Clear the selected table if it was deleted\\n              if (selectedTable && selectedTable.table_name === table.table_name) {\\n                console.log('[ExcelToSQL Debug] Clearing selected table as it was deleted');\\n                selectedTable = null;\\n              }\\n            }\\n          } else {\\n            console.error('[ExcelToSQL Debug] Failed to delete table:', response.error);\\n            toast.error(\`Failed to delete table: \${response.error}\`);\\n          }\\n        } catch (error) {\\n          console.error('[ExcelToSQL Debug] Error deleting table:', error);\\n          toast.error(\`Error deleting table: \${error.message}\`);\\n        }\\n      }\\n    );\\n  }\\n  \\n  // Filter files by search query\\n  $: filteredFiles = files.filter(file => \\n    searchQuery === '' || file.name.toLowerCase().includes(searchQuery.toLowerCase())\\n  );\\n  \\n  // Simple function to get icon for file type\\n  function getFileIcon(fileName) {\\n    if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\\n      return 'SpreadsheetDocument';\\n    } else if (fileName.endsWith('.csv')) {\\n      return 'TextDocument';\\n    }\\n    return 'Page';\\n  }\\n\\n  function toggleSidebar() {\\n\\t\\tshowSidebar.update(value => !value);\\n\\t}\\n<\/script>\\n\\n<div class=\\"excel-management-container\\">\\n  <div class=\\"management-header bg-gray-900 dark:bg-gray-950 text-white\\">\\n    <div class=\\"header-title-row\\">\\n      <div class=\\"header-left\\">\\n        <button\\n          class=\\"cursor-pointer p-[7px] flex rounded-xl hover:bg-gray-100 dark:hover:bg-gray-900 transition\\"\\n          on:click={toggleSidebar}\\n          aria-label=\\"Toggle Sidebar\\"\\n        >\\n          <div class=\\"m-auto self-center\\">\\n            <svg\\n              xmlns=\\"http://www.w3.org/2000/svg\\"\\n              fill=\\"none\\"\\n              viewBox=\\"0 0 24 24\\"\\n              stroke-width=\\"2\\"\\n              stroke=\\"currentColor\\"\\n              class=\\"size-5\\"\\n            >\\n              <path\\n                stroke-linecap=\\"round\\"\\n                stroke-linejoin=\\"round\\"\\n                d=\\"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25H12\\"\\n              />\\n            </svg>\\n          </div>\\n        </button>\\n        <a href=\\"/\\" class=\\"back-button\\">\\n          <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-5 h-5\\">\\n            <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M15.75 19.5L8.25 12l7.5-7.5\\" />\\n          </svg>\\n          Back\\n        </a>\\n        <h2 class=\\"header-title\\">{$i18n.t('Excel To SQL Management')}</h2>\\n      </div>\\n      <button \\n        class=\\"flex items-center space-x-2 px-3 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 transition\\"\\n        on:click={loadFiles}\\n      >\\n        <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-5 h-5\\">\\n          <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99\\" />\\n        </svg>\\n        <span>{$i18n.t('Refresh')}</span>\\n      </button>\\n    </div>\\n  </div>\\n\\n  <div class=\\"management-content bg-white dark:bg-gray-900\\">\\n    {#if !selectedFile}\\n      <!-- Show file list when no file is selected -->\\n      <div class=\\"file-list-container\\">\\n        <div class=\\"file-list-header dark:border-gray-700\\">\\n          <div class=\\"flex justify-between items-center\\">\\n            <h3 class=\\"text-lg font-semibold text-gray-800 dark:text-gray-200\\">{$i18n.t('Excel Data Sources')}</h3>\\n            <div class=\\"search-box\\">\\n              <div class=\\"relative\\">\\n                <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\\">\\n                  <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z\\" />\\n                </svg>\\n                <input \\n                  type=\\"text\\" \\n                  placeholder=\\"Search files...\\" \\n                  bind:value={searchQuery}\\n                  class=\\"pl-10 pr-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 w-full\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        \\n        {#if isLoading}\\n          <div class=\\"flex justify-center items-center h-64\\">\\n            <Spinner className=\\"w-10 h-10\\" />\\n            <span class=\\"ml-4 text-gray-600 dark:text-gray-400\\">{$i18n.t('Loading files...')}</span>\\n          </div>\\n        {:else if files.length === 0}\\n          <div class=\\"empty-state\\">\\n            <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-16 h-16 mx-auto mb-4 text-gray-400\\">\\n              <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4\\" />\\n            </svg>\\n            <h3 class=\\"text-xl font-medium text-gray-700 dark:text-gray-300 mb-2\\">{$i18n.t('No Excel files have been uploaded yet')}</h3>\\n            <p class=\\"text-gray-500 dark:text-gray-400\\">{$i18n.t('Upload Excel files using the Excel File Handler to see them here')}</p>\\n          </div>\\n        {:else if filteredFiles.length === 0}\\n          <div class=\\"empty-state\\">\\n            <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-16 h-16 mx-auto mb-4 text-gray-400\\">\\n              <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\\" />\\n            </svg>\\n            <h3 class=\\"text-xl font-medium text-gray-700 dark:text-gray-300 mb-2\\">{$i18n.t('No files match your search')}</h3>\\n            <p class=\\"text-gray-500 dark:text-gray-400\\">{$i18n.t('Try a different search term or clear your search')}</p>\\n          </div>\\n        {:else}\\n          <div class=\\"file-list\\">\\n            <table class=\\"w-full\\">\\n              <thead>\\n                <tr class=\\"border-b border-gray-200 dark:border-gray-700\\">\\n                  <th class=\\"py-3 px-4 text-left\\"></th>\\n                  <th class=\\"py-3 px-4 text-left\\">{$i18n.t('Filename')}</th>\\n                  <th class=\\"py-3 px-4 text-left\\">{$i18n.t('Upload Date')}</th>\\n                  <th class=\\"py-3 px-4 text-left\\">{$i18n.t('Tables')}</th>\\n                  <th class=\\"py-3 px-4 text-left\\">{$i18n.t('Actions')}</th>\\n                </tr>\\n              </thead>\\n              <tbody>\\n                {#each filteredFiles as file (file.id)}\\n                  <tr class=\\"border-b border-gray-200 dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800\\">\\n                    <td class=\\"py-3 px-4\\">\\n                      {#if getFileIcon(file.name) === 'SpreadsheetDocument'}\\n                        <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-6 h-6 text-green-600\\">\\n                          <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3\\" />\\n                        </svg>\\n                      {:else if getFileIcon(file.name) === 'TextDocument'}\\n                        <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-6 h-6 text-blue-600\\">\\n                          <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z\\" />\\n                        </svg>\\n                      {:else}\\n                        <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-6 h-6 text-gray-500\\">\\n                          <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z\\" />\\n                        </svg>\\n                      {/if}\\n                    </td>\\n                    <td class=\\"py-3 px-4 font-medium text-blue-600 dark:text-blue-400\\">{file.name}</td>\\n                    <td class=\\"py-3 px-4\\">{file.dateUploaded}</td>\\n                    <td class=\\"py-3 px-4\\">{file.tableCount}</td>\\n                    <td class=\\"py-3 px-4\\">\\n                      <div class=\\"flex space-x-2\\">\\n                        <button \\n                          class=\\"p-2 rounded-lg text-blue-600 hover:bg-blue-50 dark:hover:bg-gray-700\\"\\n                          on:click={() => handleViewDetails(file)}\\n                        >\\n                          <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-5 h-5\\">\\n                            <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z\\" />\\n                            <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\\" />\\n                          </svg>\\n                        </button>\\n                        <button \\n                          class=\\"p-2 rounded-lg text-red-600 hover:bg-red-50 dark:hover:bg-gray-700\\"\\n                          on:click={() => handleDeleteFile(file)}\\n                        >\\n                          <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-5 h-5\\">\\n                            <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0\\" />\\n                          </svg>\\n                        </button>\\n                      </div>\\n                    </td>\\n                  </tr>\\n                {/each}\\n              </tbody>\\n            </table>\\n          </div>\\n        {/if}\\n      </div>\\n    {:else}\\n      <!-- Show file details or selected table -->\\n      <div class=\\"file-detail-container\\">\\n        <div class=\\"file-detail-header dark:border-gray-700\\">\\n          <button \\n            class=\\"back-to-files-button\\"\\n            on:click={() => {\\n              if (selectedTable) {\\n                selectedTable = null;\\n                isEditMode = false;\\n              } else {\\n                selectedFile = null;\\n              }\\n            }}\\n          >\\n            <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-5 h-5\\">\\n              <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M15.75 19.5L8.25 12l7.5-7.5\\" />\\n            </svg>\\n            {selectedTable ? 'Back to Tables' : 'Back to Files'}\\n          </button>\\n          <h3 class=\\"text-lg font-semibold text-gray-800 dark:text-gray-200\\">{selectedFile.name}</h3>\\n        </div>\\n        \\n        {#if !selectedTable}\\n          <!-- Show file info and table list -->\\n          <div class=\\"file-info-section dark:border-gray-700\\">\\n            <div class=\\"file-info-item\\">\\n              <span class=\\"info-label\\">{$i18n.t('Filename')}:</span>\\n              <span class=\\"info-value\\">{selectedFile.name}</span>\\n            </div>\\n            <div class=\\"file-info-item\\">\\n              <span class=\\"info-label\\">{$i18n.t('Upload Date')}:</span>\\n              <span class=\\"info-value\\">{selectedFile.dateUploaded}</span>\\n            </div>\\n            <div class=\\"file-info-item\\">\\n              <span class=\\"info-label\\">{$i18n.t('Tables')}:</span>\\n              <span class=\\"info-value\\">{selectedFile.tableCount}</span>\\n            </div>\\n            <div class=\\"file-info-item\\">\\n              <span class=\\"info-label\\">{$i18n.t('Path')}:</span>\\n              <span class=\\"info-value text-xs opacity-80\\">{selectedFile.savedPath}</span>\\n            </div>\\n          </div>\\n          \\n          <div class=\\"tables-section\\">\\n            <div class=\\"flex justify-between items-center mb-4\\">\\n              <h4 class=\\"section-title\\">{$i18n.t('Excel Sheets')}</h4>\\n              {#if selectedFile.tables && selectedFile.tables.length > 0}\\n                <span class=\\"text-gray-500 dark:text-gray-400 text-sm\\">\\n                  {selectedFile.tables.length} {selectedFile.tables.length === 1 ? 'sheet' : 'sheets'} available\\n                </span>\\n              {/if}\\n            </div>\\n            \\n            {#if !selectedFile.tables || selectedFile.tables.length === 0}\\n              <div class=\\"no-content-message\\">\\n                <p class=\\"text-gray-500 dark:text-gray-400\\">{$i18n.t('No tables found in this file')}</p>\\n              </div>\\n            {:else}\\n              <div class=\\"tables-list\\">\\n                <div class=\\"space-y-2\\">\\n                  {#each selectedFile.tables as table}\\n                    <div \\n                      class=\\"table-item {selectedTable && selectedTable.table_name === table.table_name ? 'selected' : ''}\\"\\n                      on:click={() => loadSingleTable(table)}\\n                    >\\n                      <div class=\\"flex justify-between items-center w-full\\">\\n                        <span class=\\"text-md text-gray-800 dark:text-gray-200\\">{table.table_name}</span>\\n                        <span class=\\"text-sm text-gray-500 dark:text-gray-400\\">{table.row_count} rows</span>\\n                      </div>\\n                    </div>\\n                  {/each}\\n                </div>\\n              </div>\\n            {/if}\\n          </div>\\n        {:else}\\n          <!-- Show selected table with edit capabilities -->\\n          <div class=\\"table-view-section\\">\\n            <div class=\\"mb-4\\">\\n              <div class=\\"flex justify-between items-center\\">\\n                <h4 class=\\"text-lg font-semibold text-gray-800 dark:text-gray-200\\">{$i18n.t('Table')}: {selectedTable.table_name}</h4>\\n                <div class=\\"flex space-x-2\\">\\n                  <button\\n                    class=\\"px-3 py-2 rounded-lg bg-red-600 hover:bg-red-700 text-white transition flex items-center space-x-2\\"\\n                    on:click={() => handleDeleteTable(selectedTable)}\\n                  >\\n                    <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-5 h-5\\">\\n                      <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0\\" />\\n                    </svg>\\n                    <span>Delete Table</span>\\n                  </button>\\n                </div>\\n              </div>\\n            </div>\\n            \\n            {#if tableLoadingStates[selectedTable.table_name]}\\n              <div class=\\"flex justify-center items-center h-64\\">\\n                <Spinner className=\\"w-10 h-10\\" />\\n                <span class=\\"ml-4 text-gray-600 dark:text-gray-400\\">{$i18n.t('Loading table data...')}</span>\\n              </div>\\n            {:else}\\n              {#if tablesData[selectedTable.table_name]}\\n                <div class=\\"table-controls mb-4\\">\\n                  <div class=\\"flex space-x-4\\">\\n                    <button\\n                      class=\\"px-3 py-2 rounded-lg {isEditMode ? 'bg-green-600 hover:bg-green-700' : 'bg-blue-600 hover:bg-blue-700'} text-white transition flex items-center space-x-2\\"\\n                      on:click={isEditMode ? saveEditedData : () => isEditMode = true}\\n                      disabled={isEditMode && !hasUnsavedChanges}\\n                    >\\n                      {#if isEditMode}\\n                        <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-5 h-5\\">\\n                          <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0111.186 0z\\" />\\n                        </svg>\\n                        <span>Save Changes</span>\\n                      {:else}\\n                        <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-5 h-5\\">\\n                          <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10\\" />\\n                        </svg>\\n                        <span>Edit Data</span>\\n                      {/if}\\n                    </button>\\n                    \\n                    {#if isEditMode}\\n                      <button\\n                        class=\\"px-3 py-2 rounded-lg bg-gray-600 hover:bg-gray-700 text-white transition flex items-center space-x-2\\"\\n                        on:click={() => {\\n                          showConfirmation(\\n                            \\"Cancel Editing\\",\\n                            \\"Are you sure you want to cancel? All unsaved changes will be lost.\\",\\n                            () => {\\n                              isEditMode = false;\\n                              loadSingleTable(selectedTable); // Reload the original data\\n                            }\\n                          );\\n                        }}\\n                      >\\n                        <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" class=\\"w-5 h-5\\">\\n                          <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M6 18L18 6M6 6l12 12\\" />\\n                        </svg>\\n                        <span>Cancel</span>\\n                      </button>\\n                    {/if}\\n                  </div>\\n                </div>\\n                \\n                <div class=\\"excel-table-wrapper\\">\\n                  <table class=\\"excel-table w-full\\">\\n                    <thead>\\n                      <tr>\\n                        {#each tablesData[selectedTable.table_name].columns.filter(col => selectedColumns.includes(col.name)) as col}\\n                          <th>\\n                            <div class=\\"flex justify-between items-center\\">\\n                              <span>{col.name}</span>\\n                            </div>\\n                          </th>\\n                        {/each}\\n                      </tr>\\n                    </thead>\\n                    <tbody>\\n                      {#each tablesData[selectedTable.table_name].rows as row, rowIndex}\\n                        <tr>\\n                          {#each tablesData[selectedTable.table_name].columns.filter(col => selectedColumns.includes(col.name)) as col}\\n                            <td \\n                              contenteditable={isEditMode}\\n                              on:blur={(e) => {\\n                                if (isEditMode) {\\n                                  handleCellEdit(rowIndex, col.name, e.target.innerText);\\n                                }\\n                              }}\\n                            >\\n                              {row[col.name] !== undefined ? row[col.name] : ''}\\n                            </td>\\n                          {/each}\\n                        </tr>\\n                      {/each}\\n                    </tbody>\\n                  </table>\\n                </div>\\n              {/if}\\n            {/if}\\n          </div>\\n        {/if}\\n      </div>\\n    {/if}\\n  </div>\\n</div>\\n\\n<!-- Confirmation Dialog -->\\n{#if showConfirmDialog}\\n  <div class=\\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\\">\\n    <div class=\\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full p-6\\">\\n      <h3 class=\\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4\\">{confirmDialogProps.title}</h3>\\n      <p class=\\"text-gray-700 dark:text-gray-300 mb-6\\">{confirmDialogProps.message}</p>\\n      <div class=\\"flex justify-end space-x-4\\">\\n        <button \\n          class=\\"px-4 py-2 rounded-md bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600 transition\\"\\n          on:click={confirmDialogProps.onCancel}\\n        >\\n          No\\n        </button>\\n        <button \\n          class=\\"px-4 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 transition\\"\\n          on:click={confirmDialogProps.onConfirm}\\n        >\\n          Yes\\n        </button>\\n      </div>\\n    </div>\\n  </div>\\n{/if}\\n\\n<style>\\n  .excel-management-container {\\n    display: flex;\\n    flex-direction: column;\\n    height: 100vh;\\n    width: 100%;\\n  }\\n\\n  .management-header {\\n    padding: 12px 24px;\\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\\n    z-index: 10;\\n  }\\n\\n  .header-title-row {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n  }\\n\\n  .header-left {\\n    display: flex;\\n    align-items: center;\\n  }\\n\\n  .back-button {\\n    background: transparent;\\n    border: none;\\n    color: white;\\n    cursor: pointer;\\n    display: flex;\\n    align-items: center;\\n    padding: 8px 12px;\\n    margin-right: 15px;\\n    font-size: 14px;\\n    border-radius: 4px;\\n    transition: all 0.2s ease;\\n  }\\n\\n  .back-button:hover {\\n    background-color: rgba(255, 255, 255, 0.15);\\n    transform: translateX(-2px);\\n  }\\n\\n  .header-title {\\n    margin: 0;\\n    font-weight: 500;\\n    font-size: 20px;\\n    letter-spacing: 0.3px;\\n  }\\n\\n  .management-content {\\n    display: flex;\\n    flex-direction: column;\\n    flex: 1;\\n    overflow: auto;\\n    padding: 0;\\n    border-radius: 8px;\\n    margin: 16px;\\n    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\\n  }\\n\\n  .file-list-container {\\n    display: flex;\\n    flex-direction: column;\\n    height: 100%;\\n  }\\n\\n  .file-list-header {\\n    padding: 20px 24px;\\n    border-bottom: 1px solid #edf2f7;\\n  }\\n\\n  .empty-state {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: center;\\n    padding: 60px 20px;\\n    text-align: center;\\n  }\\n\\n  .file-detail-container {\\n    display: flex;\\n    flex-direction: column;\\n    height: 100%;\\n  }\\n\\n  .file-detail-header {\\n    padding: 18px 24px;\\n    border-bottom: 1px solid #edf2f7;\\n    display: flex;\\n    align-items: center;\\n  }\\n\\n  .back-to-files-button {\\n    background: transparent;\\n    border: none;\\n    color: #3182ce;\\n    cursor: pointer;\\n    display: flex;\\n    align-items: center;\\n    padding: 8px 12px;\\n    font-size: 14px;\\n    border-radius: 4px;\\n    transition: all 0.2s ease;\\n  }\\n\\n  .back-to-files-button:hover {\\n    background-color: rgba(49, 130, 206, 0.1);\\n    transform: translateX(-2px);\\n  }\\n\\n  .file-info-section {\\n    padding: 16px 24px;\\n    border-bottom: 1px solid #edf2f7;\\n    display: flex;\\n    flex-wrap: wrap;\\n  }\\n\\n  .file-info-item {\\n    margin-right: 32px;\\n    margin-bottom: 12px;\\n    display: flex;\\n    align-items: center;\\n  }\\n\\n  .info-label {\\n    font-weight: 600;\\n    margin-right: 8px;\\n    color: #64748b;\\n    font-size: 14px;\\n  }\\n\\n  .info-value {\\n    color: #334155;\\n    font-size: 14px;\\n  }\\n\\n  .tables-section {\\n    padding: 16px 24px;\\n    flex: 1;\\n    overflow: auto;\\n  }\\n\\n  .section-title {\\n    margin-top: 0;\\n    margin-bottom: 16px;\\n    font-weight: 600;\\n    color: #334155;\\n    font-size: 16px;\\n  }\\n\\n  .table-view-section {\\n    padding: 16px 24px;\\n    width: 100%;\\n    overflow: hidden;\\n  }\\n\\n  .table-item {\\n    padding: 12px 16px;\\n    border: 1px solid #e2e8f0;\\n    border-radius: 6px;\\n    cursor: pointer;\\n    transition: all 0.2s ease;\\n  }\\n\\n  .table-item:hover {\\n    background-color: #f7fafc;\\n    border-color: #cbd5e0;\\n  }\\n\\n  .table-item.selected {\\n    background-color: #ebf8ff;\\n    border-color: #90cdf4;\\n  }\\n\\n  .excel-table-wrapper {\\n    overflow-y: auto;\\n    overflow-x: auto;\\n    max-height: 70vh;\\n    max-width: 100%;\\n    border: 1px solid #e2e8f0;\\n    border-radius: 4px;\\n    width: 100%;\\n  }\\n\\n  .excel-table {\\n    border-collapse: collapse;\\n    min-width: 100%;\\n    table-layout: auto;\\n    white-space: nowrap;\\n  }\\n\\n  .excel-table th {\\n    background-color: #f7fafc;\\n    border: 1px solid #e2e8f0;\\n    padding: 8px 12px;\\n    text-align: left;\\n    font-weight: 600;\\n    position: sticky;\\n    top: 0;\\n    z-index: 1;\\n    min-width: 120px;\\n  }\\n\\n  .excel-table td {\\n    border: 1px solid #e2e8f0;\\n    padding: 8px 12px;\\n    vertical-align: top;\\n  }\\n\\n  .excel-table tbody tr:hover {\\n    background-color: #f7fafc;\\n  }\\n\\n  .excel-table td[contenteditable=\\"true\\"] {\\n    background-color: #ffffff;\\n    cursor: text;\\n  }\\n\\n  .excel-table td[contenteditable=\\"true\\"]:focus {\\n    outline: 2px solid #3182ce;\\n    outline-offset: -2px;\\n  }\\n\\n  /* Dark mode adjustments */\\n  @media (prefers-color-scheme: dark) {\\n    .excel-table th {\\n      background-color: #2d3748;\\n      border-color: #4a5568;\\n    }\\n\\n    .excel-table td {\\n      border-color: #4a5568;\\n    }\\n\\n    .excel-table tbody tr:hover {\\n      background-color: #2d3748;\\n    }\\n\\n    .excel-table td[contenteditable=\\"true\\"] {\\n      background-color: #1a202c;\\n    }\\n\\n    .excel-table td[contenteditable=\\"true\\"]:focus {\\n      outline-color: #4299e1;\\n    }\\n  }\\n</style> "],"names":[],"mappings":"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"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $i18n, $$unsubscribe_i18n;
  const i18n = getContext("i18n");
  $$unsubscribe_i18n = subscribe(i18n, (value) => $i18n = value);
  let searchQuery = "";
  $$result.css.add(css);
  $$unsubscribe_i18n();
  return `<div class="excel-management-container svelte-1310t73"><div class="management-header bg-gray-900 dark:bg-gray-950 text-white svelte-1310t73"><div class="header-title-row svelte-1310t73"><div class="header-left svelte-1310t73"><button class="cursor-pointer p-[7px] flex rounded-xl hover:bg-gray-100 dark:hover:bg-gray-900 transition" aria-label="Toggle Sidebar" data-svelte-h="svelte-1141mtx"><div class="m-auto self-center"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="size-5"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25H12"></path></svg></div></button> <a href="/" class="back-button svelte-1310t73" data-svelte-h="svelte-bddq2y"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5"></path></svg>
          Back</a> <h2 class="header-title svelte-1310t73">${escape($i18n.t("Excel To SQL Management"))}</h2></div> <button class="flex items-center space-x-2 px-3 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 transition"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99"></path></svg> <span>${escape($i18n.t("Refresh"))}</span></button></div></div> <div class="management-content bg-white dark:bg-gray-900 svelte-1310t73">${` <div class="file-list-container svelte-1310t73"><div class="file-list-header dark:border-gray-700 svelte-1310t73"><div class="flex justify-between items-center"><h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">${escape($i18n.t("Excel Data Sources"))}</h3> <div class="search-box"><div class="relative"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg> <input type="text" placeholder="Search files..." class="pl-10 pr-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 w-full"${add_attribute("value", searchQuery, 0)}></div></div></div></div> ${`<div class="flex justify-center items-center h-64">${validate_component(Spinner, "Spinner").$$render($$result, { className: "w-10 h-10" }, {}, {})} <span class="ml-4 text-gray-600 dark:text-gray-400">${escape($i18n.t("Loading files..."))}</span></div>`}</div>`}</div></div>  ${``}`;
});
export {
  Page as default
};
//# sourceMappingURL=_page.svelte.js.map
