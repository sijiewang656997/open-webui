import{c as s,b as l}from"./CisIfe-u.js";const p=async(a="")=>{let o=null;const e=await fetch(`${s}/config`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),"detail"in n?o=n.detail:o="Server connection failed",null));if(o)throw o;return e},u=async(a="",o)=>{let e=null;const n=await fetch(`${s}/config/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}},body:JSON.stringify({...o})}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),"detail"in t?e=t.detail:e="Server connection failed",null));if(e)throw e;return n},f=async(a="")=>{let o=null;const e=await fetch(`${s}/urls`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),"detail"in n?o=n.detail:o="Server connection failed",null));if(o)throw o;return e.OPENAI_API_BASE_URLS},d=async(a,o)=>{let e=null;const n=await fetch(`${a}/models`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...o&&{authorization:`Bearer ${o}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>{var i;return e=`OpenAI: ${((i=t==null?void 0:t.error)==null?void 0:i.message)??"Network Problem"}`,[]});if(e)throw e;return n},w=async(a,o)=>{let e=null;const n=await fetch(`${s}/models${typeof o=="number"?`/${o}`:""}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>{var i;return e=`OpenAI: ${((i=t==null?void 0:t.error)==null?void 0:i.message)??"Network Problem"}`,[]});if(e)throw e;return n},y=async(a="",o="https://api.openai.com/v1",e="",n=!1)=>{if(!o)throw"OpenAI: URL is required";let t=null,i=null;if(n){if(i=await fetch(`${o}/models`,{method:"GET",headers:{Accept:"application/json",Authorization:`Bearer ${e}`,"Content-Type":"application/json"}}).then(async c=>{if(!c.ok)throw await c.json();return c.json()}).catch(c=>{var r;return t=`OpenAI: ${((r=c==null?void 0:c.error)==null?void 0:r.message)??"Network Problem"}`,[]}),t)throw t}else if(i=await fetch(`${s}/verify`,{method:"POST",headers:{Accept:"application/json",Authorization:`Bearer ${a}`,"Content-Type":"application/json"},body:JSON.stringify({url:o,key:e})}).then(async c=>{if(!c.ok)throw await c.json();return c.json()}).catch(c=>{var r;return t=`OpenAI: ${((r=c==null?void 0:c.error)==null?void 0:r.message)??"Network Problem"}`,[]}),t)throw t;return i},j=async(a="",o,e=`${l}/api`)=>{const n=new AbortController;let t=null;const i=await fetch(`${e}/chat/completions`,{signal:n.signal,method:"POST",headers:{Authorization:`Bearer ${a}`,"Content-Type":"application/json"},body:JSON.stringify(o)}).catch(c=>(console.log(c),t=c,null));if(t)throw t;return[i,n]},A=async(a="",o,e=`${l}/api`)=>{let n=null;const t=await fetch(`${e}/chat/completions`,{method:"POST",headers:{Authorization:`Bearer ${a}`,"Content-Type":"application/json"},body:JSON.stringify(o)}).then(async i=>{if(!i.ok)throw await i.json();return i.json()}).catch(i=>(n=`${(i==null?void 0:i.detail)??i}`,null));if(n)throw n;return t},$=async(a="",o="")=>{let e=null;const n=await fetch(`${s}/lb_add_device`,{method:"POST",headers:{Authorization:`Bearer ${a}`,"Content-Type":"application/json"},body:JSON.stringify({device_ip:o})}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(e=`${(t==null?void 0:t.detail)??t}`,null));if(e)throw e;return n},m=async(a="")=>{let o=null;const e=await fetch(`${s}/lb_get_devices`,{method:"GET",headers:{Authorization:`Bearer ${a}`,"Content-Type":"application/json"}}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(o=`${(n==null?void 0:n.detail)??n}`,null));if(o)throw o;return e};export{d as a,$ as b,j as c,m as d,p as e,w as f,f as g,A as h,u,y as v};
//# sourceMappingURL=CgEzuEYe.js.map
