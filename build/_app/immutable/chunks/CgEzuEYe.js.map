{"version":3,"file":"CgEzuEYe.js","sources":["../../../../../../src/lib/apis/openai/index.ts"],"sourcesContent":["import { OPENAI_API_BASE_URL, WEBUI_API_BASE_URL, WEBUI_BASE_URL } from '$lib/constants';\n\nexport const getOpenAIConfig = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/config`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = 'Server connection failed';\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\ntype OpenAIConfig = {\n\tENABLE_OPENAI_API: boolean;\n\tOPENAI_API_BASE_URLS: string[];\n\tOPENAI_API_KEYS: string[];\n\tOPENAI_API_CONFIGS: object;\n};\n\nexport const updateOpenAIConfig = async (token: string = '', config: OpenAIConfig) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/config/update`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\t...config\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = 'Server connection failed';\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getOpenAIUrls = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/urls`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = 'Server connection failed';\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.OPENAI_API_BASE_URLS;\n};\n\nexport const updateOpenAIUrls = async (token: string = '', urls: string[]) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/urls/update`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\turls: urls\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = 'Server connection failed';\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.OPENAI_API_BASE_URLS;\n};\n\nexport const getOpenAIKeys = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/keys`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = 'Server connection failed';\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.OPENAI_API_KEYS;\n};\n\nexport const updateOpenAIKeys = async (token: string = '', keys: string[]) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/keys/update`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tkeys: keys\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = 'Server connection failed';\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.OPENAI_API_KEYS;\n};\n\nexport const getOpenAIModelsDirect = async (url: string, key: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${url}/models`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(key && { authorization: `Bearer ${key}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\n\t\t\treturn [];\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getOpenAIModels = async (token: string, urlIdx?: number) => {\n\tlet error = null;\n\n\tconst res = await fetch(\n\t\t`${OPENAI_API_BASE_URL}/models${typeof urlIdx === 'number' ? `/${urlIdx}` : ''}`,\n\t\t{\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t}\n\t\t}\n\t)\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\n\t\t\treturn [];\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const verifyOpenAIConnection = async (\n\ttoken: string = '',\n\turl: string = 'https://api.openai.com/v1',\n\tkey: string = '',\n\tdirect: boolean = false\n) => {\n\tif (!url) {\n\t\tthrow 'OpenAI: URL is required';\n\t}\n\n\tlet error = null;\n\tlet res = null;\n\n\tif (direct) {\n\t\tres = await fetch(`${url}/models`, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\tAuthorization: `Bearer ${key}`,\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t}\n\t\t})\n\t\t\t.then(async (res) => {\n\t\t\t\tif (!res.ok) throw await res.json();\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\n\t\t\t\treturn [];\n\t\t\t});\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\t} else {\n\t\tres = await fetch(`${OPENAI_API_BASE_URL}/verify`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\turl,\n\t\t\t\tkey\n\t\t\t})\n\t\t})\n\t\t\t.then(async (res) => {\n\t\t\t\tif (!res.ok) throw await res.json();\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\n\t\t\t\treturn [];\n\t\t\t});\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\treturn res;\n};\n\nexport const chatCompletion = async (\n\ttoken: string = '',\n\tbody: object,\n\turl: string = `${WEBUI_BASE_URL}/api`\n): Promise<[Response | null, AbortController]> => {\n\tconst controller = new AbortController();\n\tlet error = null;\n\n\tconst res = await fetch(`${url}/chat/completions`, {\n\t\tsignal: controller.signal,\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(body)\n\t}).catch((err) => {\n\t\tconsole.log(err);\n\t\terror = err;\n\t\treturn null;\n\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn [res, controller];\n};\n\nexport const generateOpenAIChatCompletion = async (\n\ttoken: string = '',\n\tbody: object,\n\turl: string = `${WEBUI_BASE_URL}/api`\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${url}/chat/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(body)\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = `${err?.detail ?? err}`;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const synthesizeOpenAISpeech = async (\n\ttoken: string = '',\n\tspeaker: string = 'alloy',\n\ttext: string = '',\n\tmodel: string = 'tts-1'\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/audio/speech`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tinput: text,\n\t\t\tvoice: speaker\n\t\t})\n\t}).catch((err) => {\n\t\tconsole.log(err);\n\t\terror = err;\n\t\treturn null;\n\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const addKneronDevice = async (token: string = '', device_ip: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/lb_add_device`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tdevice_ip: device_ip\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = `${err?.detail ?? err}`;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getKneronDevices = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/lb_get_devices`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = `${err?.detail ?? err}`;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n"],"names":["getOpenAIConfig","token","error","res","OPENAI_API_BASE_URL","err","updateOpenAIConfig","config","getOpenAIUrls","getOpenAIModelsDirect","url","key","_a","getOpenAIModels","urlIdx","verifyOpenAIConnection","direct","chatCompletion","body","WEBUI_BASE_URL","controller","generateOpenAIChatCompletion","addKneronDevice","device_ip","getKneronDevices"],"mappings":"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"}